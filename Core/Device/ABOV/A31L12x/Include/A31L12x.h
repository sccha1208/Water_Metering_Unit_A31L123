/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     A31L12x.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     23. July 2020
 * @note     Generated by SVDConv V3.3.18 on Thursday, 23.07.2020 15:16:06
 *           from File 'A31L12x.svd',
 *           last modified on Thursday, 23.07.2020 05:36:30
 */



/** @addtogroup VENDOR ABOV Semiconductor Co., Ltd.
  * @{
  */


/** @addtogroup A31L12x
  * @{
  */


#ifndef A31L12X_H
#define A31L12X_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0+ Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  A31L12x Specific Interrupt Numbers  =========================================== */
  LVI_IRQn                  =   0,              /*!< 0  LVI Interrupt                                                          */
  WUT_IRQn                  =   1,              /*!< 1  WUT Interrupt                                                          */
  WDT_IRQn                  =   2,              /*!< 2  WDT Interrupt                                                          */
  EINT0_IRQn                =   3,              /*!< 3  EINT0 Interrupt                                                        */
  EINT1_IRQn                =   4,              /*!< 4  EINT1 Interrupt                                                        */
  EINT2_IRQn                =   5,              /*!< 5  EINT2 Interrupt                                                        */
  EINT3_IRQn                =   6,              /*!< 6  EINT3 Interrupt                                                        */
  TIMER40_IRQn              =   7,              /*!< 7  TIMER40 Interrupt                                                      */
  TIMER41_IRQn              =   8,              /*!< 8  TIMER41 Interrupt                                                      */
  TIMER42_IRQn              =   9,              /*!< 9  TIMER42 Interrupt                                                      */
  I2C0_IRQn                 =  10,              /*!< 10 I2C0 Interrupt                                                         */
  USART10_IRQn              =  11,              /*!< 11 USART10 Interrupt                                                      */
  SPI0_IRQn                 =  12,              /*!< 12 SPI0 Interrupt                                                         */
  SPI1_IRQn                 =  13,              /*!< 13 SPI1 Interrupt                                                         */
  I2C1_IRQn                 =  14,              /*!< 14 I2C1 Interrupt                                                         */
  TIMER50_IRQn              =  15,              /*!< 15 TIMER50 Interrupt                                                      */
  SC0_IRQn                  =  16,              /*!< 16 SC0 Interrupt                                                          */
  SC1_IRQn                  =  17,              /*!< 17 SC1 Interrupt                                                          */
  ADC_IRQn                  =  18,              /*!< 18 ADC Interrupt                                                          */
  UART0_IRQn                =  19,              /*!< 19 UART0 Interrupt                                                        */
  UART1_IRQn                =  20,              /*!< 20 UART1 Interrupt                                                        */
  TIMER43_IRQn              =  21,              /*!< 21 TIMER43 Interrupt                                                      */
  CMPn_IRQn                 =  22,              /*!< 22 CMPn Interrupt                                                         */
  DMAC0_IRQn                =  23,              /*!< 23 DMAC0 Interrupt                                                        */
  DMAC1_IRQn                =  24,              /*!< 24 DMAC1 Interrupt                                                        */
  LPUART_IRQn               =  25,              /*!< 25 LPUART Interrupt                                                       */
  RTCC_IRQn                 =  28,              /*!< 28 RTCC Interrupt                                                         */
  DMAC2_IRQn                =  29,              /*!< 29 DMAC2 Interrupt                                                        */
  DMAC3_IRQn                =  30,              /*!< 30 DMAC3 Interrupt                                                        */
  DMAC4_IRQn                =  31               /*!< 31 DMAC4 Interrupt                                                        */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M0+ Processor and Core Peripherals  =========================== */
#define __CM0PLUS_REV                 0x0001U   /*!< CM0PLUS Core Revision                                                     */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0plus.h"                       /*!< ARM Cortex-M0+ processor and core peripherals                             */
#include "system_A31L12x.h"                     /*!< A31L12x System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Interrupt Controller (INTC)
  */

typedef struct {                                /*!< (@ 0x40001000) INTC Structure                                             */
  
  union {
    __IOM uint32_t PATRIG;                      /*!< (@ 0x00000000) Port A Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port A Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port A Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port A Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port A Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port A Interrupt Trigger Selection 4                               */
      __IOM uint32_t ITRIG5     : 1;            /*!< [5..5] Port A Interrupt Trigger Selection 5                               */
      __IOM uint32_t ITRIG6     : 1;            /*!< [6..6] Port A Interrupt Trigger Selection 6                               */
      __IOM uint32_t ITRIG7     : 1;            /*!< [7..7] Port A Interrupt Trigger Selection 7                               */
      __IOM uint32_t ITRIG8     : 1;            /*!< [8..8] Port A Interrupt Trigger Selection 8                               */
      __IOM uint32_t ITRIG9     : 1;            /*!< [9..9] Port A Interrupt Trigger Selection 9                               */
    } PATRIG_b;
  } ;
  
  union {
    __IOM uint32_t PBTRIG;                      /*!< (@ 0x00000004) Port B Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port B Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port B Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port B Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port B Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port B Interrupt Trigger Selection 4                               */
      __IOM uint32_t ITRIG5     : 1;            /*!< [5..5] Port B Interrupt Trigger Selection 5                               */
      __IOM uint32_t ITRIG6     : 1;            /*!< [6..6] Port B Interrupt Trigger Selection 6                               */
      __IOM uint32_t ITRIG7     : 1;            /*!< [7..7] Port B Interrupt Trigger Selection 7                               */
      __IOM uint32_t ITRIG8     : 1;            /*!< [8..8] Port B Interrupt Trigger Selection 8                               */
      __IOM uint32_t ITRIG9     : 1;            /*!< [9..9] Port B Interrupt Trigger Selection 9                               */
      __IOM uint32_t ITRIG10    : 1;            /*!< [10..10] Port B Interrupt Trigger Selection 10                            */
      __IOM uint32_t ITRIG11    : 1;            /*!< [11..11] Port B Interrupt Trigger Selection 11                            */
      __IOM uint32_t ITRIG12    : 1;            /*!< [12..12] Port B Interrupt Trigger Selection 12                            */
    } PBTRIG_b;
  } ;
  
  union {
    __IOM uint32_t PCTRIG;                      /*!< (@ 0x00000008) Port C Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port C Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port C Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port C Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port C Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port C Interrupt Trigger Selection 4                               */
      __IOM uint32_t ITRIG5     : 1;            /*!< [5..5] Port C Interrupt Trigger Selection 5                               */
      __IOM uint32_t ITRIG6     : 1;            /*!< [6..6] Port C Interrupt Trigger Selection 6                               */
      __IOM uint32_t ITRIG7     : 1;            /*!< [7..7] Port C Interrupt Trigger Selection 7                               */
      __IOM uint32_t ITRIG8     : 1;            /*!< [8..8] Port C Interrupt Trigger Selection 8                               */
      __IOM uint32_t ITRIG9     : 1;            /*!< [9..9] Port C Interrupt Trigger Selection 9                               */
      __IOM uint32_t ITRIG10    : 1;            /*!< [10..10] Port C Interrupt Trigger Selection 10                            */
      __IOM uint32_t ITRIG11    : 1;            /*!< [11..11] Port C Interrupt Trigger Selection 11                            */
    } PCTRIG_b;
  } ;
  
  union {
    __IOM uint32_t PDTRIG;                      /*!< (@ 0x0000000C) Port D Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port D Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port D Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port D Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port D Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port D Interrupt Trigger Selection 4                               */
      __IOM uint32_t ITRIG5     : 1;            /*!< [5..5] Port D Interrupt Trigger Selection 5                               */
      __IOM uint32_t ITRIG6     : 1;            /*!< [6..6] Port D Interrupt Trigger Selection 6                               */
      __IOM uint32_t ITRIG7     : 1;            /*!< [7..7] Port D Interrupt Trigger Selection 7                               */
    } PDTRIG_b;
  } ;
  
  union {
    __IOM uint32_t PETRIG;                      /*!< (@ 0x00000010) Port E Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port E Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port E Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port E Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port E Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port E Interrupt Trigger Selection 4                               */
    } PETRIG_b;
  } ;
  
  union {
    __IOM uint32_t PFTRIG;                      /*!< (@ 0x00000014) Port F Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port F Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port F Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port F Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port F Interrupt Trigger Selection 3                               */
    } PFTRIG_b;
  } ;
  __IM  uint32_t  RESERVED[58];
  
  union {
    __IOM uint32_t PACR;                        /*!< (@ 0x00000100) Port A Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port A Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port A Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port A Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port A Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port A Interrupt Control 4                                         */
      __IOM uint32_t INTCTL5    : 2;            /*!< [11..10] Port A Interrupt Control 5                                       */
      __IOM uint32_t INTCTL6    : 2;            /*!< [13..12] Port A Interrupt Control 6                                       */
      __IOM uint32_t INTCTL7    : 2;            /*!< [15..14] Port A Interrupt Control 7                                       */
      __IOM uint32_t INTCTL8    : 2;            /*!< [17..16] Port A Interrupt Control 8                                       */
      __IOM uint32_t INTCTL9    : 2;            /*!< [19..18] Port A Interrupt Control 9                                       */
    } PACR_b;
  } ;
  
  union {
    __IOM uint32_t PBCR;                        /*!< (@ 0x00000104) Port B Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port B Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port B Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port B Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port B Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port B Interrupt Control 4                                         */
      __IOM uint32_t INTCTL5    : 2;            /*!< [11..10] Port B Interrupt Control 5                                       */
      __IOM uint32_t INTCTL6    : 2;            /*!< [13..12] Port B Interrupt Control 6                                       */
      __IOM uint32_t INTCTL7    : 2;            /*!< [15..14] Port B Interrupt Control 7                                       */
      __IOM uint32_t INTCTL8    : 2;            /*!< [17..16] Port B Interrupt Control 8                                       */
      __IOM uint32_t INTCTL9    : 2;            /*!< [19..18] Port B Interrupt Control 9                                       */
      __IOM uint32_t INTCTL10   : 2;            /*!< [21..20] Port B Interrupt Control 10                                      */
      __IOM uint32_t INTCTL11   : 2;            /*!< [23..22] Port B Interrupt Control 11                                      */
      __IOM uint32_t INTCTL12   : 2;            /*!< [25..24] Port B Interrupt Control 12                                      */
    } PBCR_b;
  } ;
  
  union {
    __IOM uint32_t PCCR;                        /*!< (@ 0x00000108) Port C Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port C Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port C Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port C Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port C Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port C Interrupt Control 4                                         */
      __IOM uint32_t INTCTL5    : 2;            /*!< [11..10] Port C Interrupt Control 5                                       */
      __IOM uint32_t INTCTL6    : 2;            /*!< [13..12] Port C Interrupt Control 6                                       */
      __IOM uint32_t INTCTL7    : 2;            /*!< [15..14] Port C Interrupt Control 7                                       */
      __IOM uint32_t INTCTL8    : 2;            /*!< [17..16] Port C Interrupt Control 8                                       */
      __IOM uint32_t INTCTL9    : 2;            /*!< [19..18] Port C Interrupt Control 9                                       */
      __IOM uint32_t INTCTL10   : 2;            /*!< [21..20] Port C Interrupt Control 10                                      */
      __IOM uint32_t INTCTL11   : 2;            /*!< [23..22] Port C Interrupt Control 11                                      */
    } PCCR_b;
  } ;
  
  union {
    __IOM uint32_t PDCR;                        /*!< (@ 0x0000010C) Port D Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port D Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port D Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port D Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port D Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port D Interrupt Control 4                                         */
      __IOM uint32_t INTCTL5    : 2;            /*!< [11..10] Port D Interrupt Control 5                                       */
      __IOM uint32_t INTCTL6    : 2;            /*!< [13..12] Port D Interrupt Control 6                                       */
      __IOM uint32_t INTCTL7    : 2;            /*!< [15..14] Port D Interrupt Control 7                                       */
    } PDCR_b;
  } ;
  
  union {
    __IOM uint32_t PECR;                        /*!< (@ 0x00000110) Port E Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port E Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port E Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port E Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port E Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port E Interrupt Control 4                                         */
    } PECR_b;
  } ;
  
  union {
    __IOM uint32_t PFCR;                        /*!< (@ 0x00000114) Port F Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port F Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port F Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port F Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port F Interrupt Control 3                                         */
    } PFCR_b;
  } ;
  __IM  uint32_t  RESERVED1[58];
  
  union {
    __IOM uint32_t PAFLAG;                      /*!< (@ 0x00000200) Port A Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port A Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port A Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port A Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port A Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port A Interrupt Flag 4                                            */
      __IOM uint32_t FLAG5      : 1;            /*!< [5..5] Port A Interrupt Flag 5                                            */
      __IOM uint32_t FLAG6      : 1;            /*!< [6..6] Port A Interrupt Flag 6                                            */
      __IOM uint32_t FLAG7      : 1;            /*!< [7..7] Port A Interrupt Flag 7                                            */
      __IOM uint32_t FLAG8      : 1;            /*!< [8..8] Port A Interrupt Flag 8                                            */
      __IOM uint32_t FLAG9      : 1;            /*!< [9..9] Port A Interrupt Flag 9                                            */
    } PAFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PBFLAG;                      /*!< (@ 0x00000204) Port B Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port B Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port B Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port B Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port B Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port B Interrupt Flag 4                                            */
      __IOM uint32_t FLAG5      : 1;            /*!< [5..5] Port B Interrupt Flag 5                                            */
      __IOM uint32_t FLAG6      : 1;            /*!< [6..6] Port B Interrupt Flag 6                                            */
      __IOM uint32_t FLAG7      : 1;            /*!< [7..7] Port B Interrupt Flag 7                                            */
      __IOM uint32_t FLAG8      : 1;            /*!< [8..8] Port B Interrupt Flag 8                                            */
      __IOM uint32_t FLAG9      : 1;            /*!< [9..9] Port B Interrupt Flag 9                                            */
      __IOM uint32_t FLAG10     : 1;            /*!< [10..10] Port B Interrupt Flag 10                                         */
      __IOM uint32_t FLAG11     : 1;            /*!< [11..11] Port B Interrupt Flag 11                                         */
      __IOM uint32_t FLAG12     : 1;            /*!< [12..12] Port B Interrupt Flag 12                                         */
    } PBFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PCFLAG;                      /*!< (@ 0x00000208) Port C Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port C Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port C Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port C Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port C Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port C Interrupt Flag 4                                            */
      __IOM uint32_t FLAG5      : 1;            /*!< [5..5] Port C Interrupt Flag 5                                            */
      __IOM uint32_t FLAG6      : 1;            /*!< [6..6] Port C Interrupt Flag 6                                            */
      __IOM uint32_t FLAG7      : 1;            /*!< [7..7] Port C Interrupt Flag 7                                            */
      __IOM uint32_t FLAG8      : 1;            /*!< [8..8] Port C Interrupt Flag 8                                            */
      __IOM uint32_t FLAG9      : 1;            /*!< [9..9] Port C Interrupt Flag 9                                            */
      __IOM uint32_t FLAG10     : 1;            /*!< [10..10] Port C Interrupt Flag 10                                         */
      __IOM uint32_t FLAG11     : 1;            /*!< [11..11] Port C Interrupt Flag 11                                         */
    } PCFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PDFLAG;                      /*!< (@ 0x0000020C) Port D Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port D Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port D Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port D Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port D Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port D Interrupt Flag 4                                            */
      __IOM uint32_t FLAG5      : 1;            /*!< [5..5] Port D Interrupt Flag 5                                            */
      __IOM uint32_t FLAG6      : 1;            /*!< [6..6] Port D Interrupt Flag 6                                            */
      __IOM uint32_t FLAG7      : 1;            /*!< [7..7] Port D Interrupt Flag 7                                            */
    } PDFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PEFLAG;                      /*!< (@ 0x00000210) Port E Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port E Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port E Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port E Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port E Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port E Interrupt Flag 4                                            */
    } PEFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PFFLAG;                      /*!< (@ 0x00000214) Port F Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port F Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port F Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port F Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port F Interrupt Flag 3                                            */
    } PFFLAG_b;
  } ;
  __IM  uint32_t  RESERVED2[58];
  
  union {
    __IOM uint32_t EINT0CONF1;                  /*!< (@ 0x00000300) External Interrupt 0 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 0 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 0 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 0 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 0 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 0 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 0 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 0 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 0 Configuration 7                             */
    } EINT0CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT1CONF1;                  /*!< (@ 0x00000304) External Interrupt 1 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 1 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 1 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 1 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 1 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 1 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 1 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 1 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 1 Configuration 7                             */
    } EINT1CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT2CONF1;                  /*!< (@ 0x00000308) External Interrupt 2 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 2 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 2 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 2 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 2 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 2 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 2 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 2 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 2 Configuration 7                             */
    } EINT2CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT3CONF1;                  /*!< (@ 0x0000030C) External Interrupt 3 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 3 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 3 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 3 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 3 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 3 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 3 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 3 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 3 Configuration 7                             */
    } EINT3CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT0CONF2;                  /*!< (@ 0x00000310) External Interrupt 0 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 0 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 0 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 0 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 0 Configuration 11                            */
      __IOM uint32_t CONF12     : 4;            /*!< [19..16] External Interrupt 0 Configuration 12                            */
    } EINT0CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT1CONF2;                  /*!< (@ 0x00000314) External Interrupt 1 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 1 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 1 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 1 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 1 Configuration 11                            */
      __IOM uint32_t CONF12     : 4;            /*!< [19..16] External Interrupt 1 Configuration 12                            */
    } EINT1CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT2CONF2;                  /*!< (@ 0x00000318) External Interrupt 2 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 2 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 2 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 2 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 2 Configuration 11                            */
      __IOM uint32_t CONF12     : 4;            /*!< [19..16] External Interrupt 2 Configuration 12                            */
    } EINT2CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT3CONF2;                  /*!< (@ 0x0000031C) External Interrupt 3 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 3 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 3 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 3 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 3 Configuration 11                            */
      __IOM uint32_t CONF12     : 4;            /*!< [19..16] External Interrupt 3 Configuration 12                            */
    } EINT3CONF2_b;
  } ;
  __IM  uint32_t  RESERVED3[56];
  
  union {
    __IOM uint32_t MSK;                         /*!< (@ 0x00000400) Interrupt Source Mask Register                             */
    
    struct {
      __IOM uint32_t IMSK0_LVI  : 1;            /*!< [0..0] Interrupt Source Mask 0 (LVI)                                      */
      __IOM uint32_t IMSK1_WUT  : 1;            /*!< [1..1] Interrupt Source Mask 1 (WUT)                                      */
      __IOM uint32_t IMSK2_WDT  : 1;            /*!< [2..2] Interrupt Source Mask 2 (WDT)                                      */
      __IOM uint32_t IMSK3_EINT0 : 1;           /*!< [3..3] Interrupt Source Mask 3 (EINT0)                                    */
      __IOM uint32_t IMSK4_EINT1 : 1;           /*!< [4..4] Interrupt Source Mask 4 (EINT1)                                    */
      __IOM uint32_t IMSK5_EINT2 : 1;           /*!< [5..5] Interrupt Source Mask 5 (EINT2)                                    */
      __IOM uint32_t IMSK6_EINT3 : 1;           /*!< [6..6] Interrupt Source Mask 6 (EINT3)                                    */
      __IOM uint32_t IMSK7_TIMER40 : 1;         /*!< [7..7] Interrupt Source Mask 7 (TIMER40)                                  */
      __IOM uint32_t IMSK8_TIMER41 : 1;         /*!< [8..8] Interrupt Source Mask 8 (TIMER41)                                  */
      __IOM uint32_t IMSK9_TIMER42 : 1;         /*!< [9..9] Interrupt Source Mask 9 (TIMER42)                                  */
      __IOM uint32_t IMSK10_I2C0 : 1;           /*!< [10..10] Interrupt Source Mask 10 (I2C0)                                  */
      __IOM uint32_t IMSK11_USART10 : 1;        /*!< [11..11] Interrupt Source Mask 11 (USART10)                               */
      __IOM uint32_t IMSK12_SPI0 : 1;           /*!< [12..12] Interrupt Source Mask 12 (SPI0)                                  */
      __IOM uint32_t IMSK13_SPI1 : 1;           /*!< [13..13] Interrupt Source Mask 13 (SPI1)                                  */
      __IOM uint32_t IMSK14_I2C1 : 1;           /*!< [14..14] Interrupt Source Mask 14 (I2C1)                                  */
      __IOM uint32_t IMSK15_TIMER50 : 1;        /*!< [15..15] Interrupt Source Mask 15 (TIMER50)                               */
      __IOM uint32_t IMSK16_SC0 : 1;            /*!< [16..16] Interrupt Source Mask 16 (SC0)                                   */
      __IOM uint32_t IMSK17_SC1 : 1;            /*!< [17..17] Interrupt Source Mask 17 (SC1)                                   */
      __IOM uint32_t IMSK18_ADC : 1;            /*!< [18..18] Interrupt Source Mask 18 (ADC)                                   */
      __IOM uint32_t IMSK19_UART0 : 1;          /*!< [19..19] Interrupt Source Mask 19 (UART0)                                 */
      __IOM uint32_t IMSK20_UART1 : 1;          /*!< [20..20] Interrupt Source Mask 20 (UART1)                                 */
      __IOM uint32_t IMSK21_TIMER43 : 1;        /*!< [21..21] Interrupt Source Mask 21 (TIMER43)                               */
      __IOM uint32_t IMSK22_CMPn : 1;           /*!< [22..22] Interrupt Source Mask 22 (CMP)                                   */
      __IOM uint32_t IMSK23_DMAC0 : 1;          /*!< [23..23] Interrupt Source Mask 23 (DMAC0)                                 */
      __IOM uint32_t IMSK24_DMAC1 : 1;          /*!< [24..24] Interrupt Source Mask 24 (DMAC1)                                 */
      __IOM uint32_t IMSK25_LPUART : 1;         /*!< [25..25] Interrupt Source Mask 25 (LPUART)                                */
      __IOM uint32_t IMSK26_NULL : 1;           /*!< [26..26] Interrupt Source Mask 26 (RSVD)                                  */
      __IOM uint32_t IMSK27_NULL : 1;           /*!< [27..27] Interrupt Source Mask 27 (RSVD)                                  */
      __IOM uint32_t IMSK28_RTCC : 1;           /*!< [28..28] Interrupt Source Mask 28 (RTCC)                                  */
      __IOM uint32_t IMSK29_DMAC2 : 1;          /*!< [29..29] Interrupt Source Mask 29 (DMAC2)                                 */
      __IOM uint32_t IMSK30_DMAC3 : 1;          /*!< [30..30] Interrupt Source Mask 30 (DMAC3)                                 */
      __IOM uint32_t IMSK31_DMAC4 : 1;          /*!< [31..31] Interrupt Source Mask 31 (DMAC4)                                 */
    } MSK_b;
  } ;
} INTC_Type;                                    /*!< Size = 1028 (0x404)                                                       */



/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: Chip Configuration (SCUCC)
  */

typedef struct {                                /*!< (@ 0x4000F000) SCUCC Structure                                            */
  
  union {
    __IM  uint32_t VENDORID;                    /*!< (@ 0x00000000) Vendor Identification Register                             */
    
    struct {
      __IM  uint32_t VENDID     : 32;           /*!< [31..0] Vendor Identification                                             */
    } VENDORID_b;
  } ;
  
  union {
    __IM  uint32_t CHIPID;                      /*!< (@ 0x00000004) Chip Identification Register                               */
    
    struct {
      __IM  uint32_t CHIPID     : 32;           /*!< [31..0] Chip Identification                                               */
    } CHIPID_b;
  } ;
  
  union {
    __IM  uint32_t REVNR;                       /*!< (@ 0x00000008) Revision Number Register                                   */
    
    struct {
      __IM  uint32_t REVNO      : 8;            /*!< [7..0] Chip Revision Number                                               */
    } REVNR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t PMREMAP;                     /*!< (@ 0x00000014) Program Memory Remap Register                              */
    
    struct {
      __IOM uint32_t PMREM      : 8;            /*!< [7..0] Program Memory Remap                                               */
      __OM  uint32_t nPMREM     : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xe2f1)                                */
    } PMREMAP_b;
  } ;
  
  union {
    __IOM uint32_t BTPSCR;                      /*!< (@ 0x00000018) Boot Pin Status and Control Register                       */
    
    struct {
      __IM  uint32_t BTPSTA     : 1;            /*!< [0..0] BOOT Pin Status                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t BFIND      : 2;            /*!< [6..5] BOOT Pin Function Indicator                                        */
    } BTPSCR_b;
  } ;
  
  union {
    __IOM uint32_t RSTSSR;                      /*!< (@ 0x0000001C) Reset Source Status Register                               */
    
    struct {
      __IOM uint32_t PORSTA     : 1;            /*!< [0..0] POR Reset Status                                                   */
      __IOM uint32_t LVRSTA     : 1;            /*!< [1..1] LVR Reset Status                                                   */
      __IOM uint32_t WDTSTA     : 1;            /*!< [2..2] Watch-Dog Timer Reset Status                                       */
      __IOM uint32_t EXTSTA     : 1;            /*!< [3..3] External Pin Reset Status                                          */
      __IOM uint32_t SWSTA      : 1;            /*!< [4..4] Software Reset Status                                              */
      __IOM uint32_t MONSTA     : 1;            /*!< [5..5] Clock Monitoring Reset Status                                      */
      __IOM uint32_t WAKUPSTA   : 1;            /*!< [6..6] Wake-Up Reset Status                                               */
    } RSTSSR_b;
  } ;
  
  union {
    __IOM uint32_t NMISRCR;                     /*!< (@ 0x00000020) NMI Source Selection Register                              */
    
    struct {
      __IOM uint32_t NMISRC     : 5;            /*!< [4..0] Non-Maskable Interrupt Source Selection                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t MONINT     : 1;            /*!< [6..6] Clock Monitoring Interrupt Selection                               */
      __IOM uint32_t NMICON     : 1;            /*!< [7..7] Non-Maskable Interrupt (NMI) Control                               */
    } NMISRCR_b;
  } ;
  
  union {
    __OM  uint32_t SWRSTR;                      /*!< (@ 0x00000024) Software Reset Register                                    */
    
    struct {
      __OM  uint32_t SWRST      : 8;            /*!< [7..0] Software Reset (System Reset)                                      */
      __IM  uint32_t            : 8;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x9eb3)                                */
    } SWRSTR_b;
  } ;
  
  union {
    __IM  uint32_t SRSTVR;                      /*!< (@ 0x00000028) System Reset Validation Register                           */
    
    struct {
      __IM  uint32_t VALID      : 8;            /*!< [7..0] System Reset Validation                                            */
    } SRSTVR_b;
  } ;
  
  union {
    __IOM uint32_t WUTCR;                       /*!< (@ 0x0000002C) Wake-Up Timer Control Register                             */
    
    struct {
      __IOM uint32_t WUTIFLAG   : 1;            /*!< [0..0] Wake-Up Timer Interrupt Flag                                       */
      __IOM uint32_t CNTRLD     : 1;            /*!< [1..1] Counter Reload                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t WUTIEN     : 1;            /*!< [7..7] Wake-Up Timer Interrupt Enable                                     */
    } WUTCR_b;
  } ;
  
  union {
    __IOM uint32_t WUTDR;                       /*!< (@ 0x00000030) Wake-Up Timer Data Register                                */
    
    struct {
      __IOM uint32_t WUTDATA    : 24;           /*!< [23..0] Wake-Up Timer Data                                                */
    } WUTDR_b;
  } ;
  __IM  uint32_t  RESERVED1[29];
  
  union {
    __IOM uint32_t HIRCTRM;                     /*!< (@ 0x000000A8) High Frequency Internal RC Trim Register (HIRCNFIG)        */
    
    struct {
      __IOM uint32_t FTRMH      : 5;            /*!< [4..0] Factory HIRC Fine Trim                                             */
      __IOM uint32_t CTRMH      : 3;            /*!< [7..5] Factory HIRC Coarse Trim                                           */
      __OM  uint32_t nTRMH      : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xa6b5)                                */
    } HIRCTRM_b;
  } ;
  
  union {
    __IOM uint32_t WDTRCTRM;                    /*!< (@ 0x000000AC) Watch-Dog Timer RC Trim Register (WDTRCNFIG)               */
    
    struct {
      __IOM uint32_t FTRMW      : 3;            /*!< [2..0] Factory WDTRC Fine Trim                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTRMW      : 4;            /*!< [7..4] Factory WDTRC Coarse Trim                                          */
      __OM  uint32_t nTRMW      : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x4c3d)                                */
    } WDTRCTRM_b;
  } ;
} SCUCC_Type;                                   /*!< Size = 176 (0xb0)                                                         */



/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: Clock Generation (SCUCG)
  */

typedef struct {                                /*!< (@ 0x40001800) SCUCG Structure                                            */
  
  union {
    __IOM uint32_t SCCR;                        /*!< (@ 0x00000000) System Clock Control Register                              */
    
    struct {
      __IOM uint32_t MCLKSEL    : 2;            /*!< [1..0] Main Clock Selection, MCLK                                         */
      __IM  uint32_t            : 14;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x570a)                                */
    } SCCR_b;
  } ;
  
  union {
    __IOM uint32_t CLKSRCR;                     /*!< (@ 0x00000004) Clock Source Control Register                              */
    
    struct {
      __IOM uint32_t XSOSCEN    : 1;            /*!< [0..0] XSOSC Enable                                                       */
      __IOM uint32_t XMOSCEN    : 1;            /*!< [1..1] XMOSC Enable                                                       */
      __IOM uint32_t HIRCEN     : 1;            /*!< [2..2] HIRC Enable                                                        */
      __IOM uint32_t WDTRCEN    : 1;            /*!< [3..3] WDTRC Enable                                                       */
      __IM  uint32_t            : 4;
      __IOM uint32_t XMFRNG     : 1;            /*!< [8..8] Main Oscillator Type and Frequency Range Selection                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t HIRCSEL    : 2;            /*!< [13..12] HIRC Frequency Selection                                         */
      __IM  uint32_t            : 2;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xa507)                                */
    } CLKSRCR_b;
  } ;
  
  union {
    __IOM uint32_t SCDIVR1;                     /*!< (@ 0x00000008) System Clock Divide Register 1                             */
    
    struct {
      __IOM uint32_t HDIV       : 3;            /*!< [2..0] Clock Divide for HCLK, Divider 0                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t WLDIV      : 3;            /*!< [6..4] Clock Divide for RTCC and LCD Driver/Controller, Divider
                                                     2                                                                         */
    } SCDIVR1_b;
  } ;
  
  union {
    __IOM uint32_t SCDIVR2;                     /*!< (@ 0x0000000C) System Clock Divide Register 2                             */
    
    struct {
      __IOM uint32_t PDIV       : 2;            /*!< [1..0] Clock Divide for PCLK, Divider 1                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t SYSTDIV    : 2;            /*!< [5..4] Clock Divide for SysTick Timer, Divider 3                          */
    } SCDIVR2_b;
  } ;
  
  union {
    __IOM uint32_t CLKOCR;                      /*!< (@ 0x00000010) Clock Output Control Register                              */
    
    struct {
      __IOM uint32_t CLKOS      : 3;            /*!< [2..0] Clock Output Selection                                             */
      __IOM uint32_t CLKODIV    : 3;            /*!< [5..3] Output Clock Divide, Divider 4                                     */
      __IOM uint32_t POLSEL     : 1;            /*!< [6..6] Clock Output Polarity Selection when disable                       */
      __IOM uint32_t CLKOEN     : 1;            /*!< [7..7] Clock Output Enable                                                */
    } CLKOCR_b;
  } ;
  
  union {
    __IOM uint32_t CMONCR;                      /*!< (@ 0x00000014) Clock Monitoring Control Register                          */
    
    struct {
      __IOM uint32_t MONCS      : 2;            /*!< [1..0] Monitored Clock Selection                                          */
      __IOM uint32_t NMINTFG    : 1;            /*!< [2..2] Clock Monitoring Interrupt Flag                                    */
      __IOM uint32_t MONFLAG    : 1;            /*!< [3..3] Clock Monitoring Result Flag                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t MACTS      : 2;            /*!< [6..5] Clock Monitoring Action Selection                                  */
      __IOM uint32_t MONEN      : 1;            /*!< [7..7] Clock Monitoring Enable                                            */
    } CMONCR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t PPCLKEN1;                    /*!< (@ 0x00000020) Peripheral Clock Enable Register 1                         */
    
    struct {
      __IOM uint32_t PACLKE     : 1;            /*!< [0..0] Port A Clock Enable                                                */
      __IOM uint32_t PBCLKE     : 1;            /*!< [1..1] Port B Clock Enable                                                */
      __IOM uint32_t PCCLKE     : 1;            /*!< [2..2] Port C Clock Enable                                                */
      __IOM uint32_t PDCLKE     : 1;            /*!< [3..3] Port D Clock Enable                                                */
      __IOM uint32_t PECLKE     : 1;            /*!< [4..4] Port E Clock Enable                                                */
      __IOM uint32_t PFCLKE     : 1;            /*!< [5..5] Port F Clock Enable                                                */
      __IM  uint32_t            : 16;
      __IOM uint32_t T40CLKE    : 1;            /*!< [22..22] TIMER40 Clock Enable                                             */
      __IOM uint32_t T41CLKE    : 1;            /*!< [23..23] TIMER41 Clock Enable                                             */
      __IOM uint32_t T42CLKE    : 1;            /*!< [24..24] TIMER42 Clock Enable                                             */
      __IOM uint32_t T43CLKE    : 1;            /*!< [25..25] TIMER43 Clock Enable                                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t T50CLKE    : 1;            /*!< [30..30] TIMER50 Clock Enable                                             */
    } PPCLKEN1_b;
  } ;
  
  union {
    __IOM uint32_t PPCLKEN2;                    /*!< (@ 0x00000024) Peripheral Clock Enable Register 2                         */
    
    struct {
      __IOM uint32_t UST10CLKE  : 1;            /*!< [0..0] USART10 Clock Enable                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t UT0CLKE    : 1;            /*!< [2..2] UART0 Clock Enable                                                 */
      __IOM uint32_t UT1CLKE    : 1;            /*!< [3..3] UART1 Clock Enable                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t I2C0CLKE   : 1;            /*!< [6..6] I2C0 (Inter-IC) Clock Enable                                       */
      __IOM uint32_t I2C1CLKE   : 1;            /*!< [7..7] I2C1 (Inter-IC) Clock Enable                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADCLKE     : 1;            /*!< [10..10] ADC (Analog to Digital Converter) Clock Enable                   */
      __IOM uint32_t RTCCLKE    : 1;            /*!< [11..11] RTCC (Real Time Clock/Calendar) Clock Enable                     */
      __IOM uint32_t CRCLKE     : 1;            /*!< [12..12] CRC (Cyclic Redundancy Check) Clock Enable                       */
      __IOM uint32_t LCDCLKE    : 1;            /*!< [13..13] LCD (LCD Driver) Clock Enable                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t LPUTCLKE   : 1;            /*!< [15..15] LPUART (Low Power UART) Clock Enable                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t WDTCLKE    : 1;            /*!< [17..17] WDT (Watch-Dog Timer) Clock Enable                               */
      __IOM uint32_t LVICLKE    : 1;            /*!< [18..18] LVI (Low Voltage Indicator) Clock Enable                         */
      __IOM uint32_t FMCLKE     : 1;            /*!< [19..19] FMC (Flash Memory Controller) Clock Enable                       */
      __IOM uint32_t SPI0CLKE   : 1;            /*!< [20..20] SPI0 Clock Enable                                                */
      __IOM uint32_t SPI1CLKE   : 1;            /*!< [21..21] SPI1 Clock Enable                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t SC0CLKE    : 1;            /*!< [24..24] SC0 (Smart Card) Clock Enable                                    */
      __IOM uint32_t SC1CLKE    : 1;            /*!< [25..25] SC1 (Smart Card) Clock Enable                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMP0CLKE   : 1;            /*!< [27..27] CMP0 (Comparator) Clock Enable                                   */
      __IOM uint32_t CMP1CLKE   : 1;            /*!< [28..28] CMP1 (Comparator) Clock Enable                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t DMACLKE    : 1;            /*!< [31..31] DMAC (DMA Controller) Clock Enable                               */
    } PPCLKEN2_b;
  } ;
  __IM  uint32_t  RESERVED1[6];
  
  union {
    __IOM uint32_t PPCLKSR;                     /*!< (@ 0x00000040) Peripheral Clock Selection Register                        */
    
    struct {
      __IOM uint32_t WDTCLK     : 1;            /*!< [0..0] WDT (Watch-Dog Timer) Clock Selection                              */
      __IM  uint32_t            : 5;
      __IOM uint32_t LCDCLK     : 2;            /*!< [7..6] LCD (LCD Driver) Clock Selection                                   */
      __IOM uint32_t RTCCLK     : 2;            /*!< [9..8] RTCC (Real Time Clock/Calendar) Clock Selection                    */
      __IOM uint32_t LPUTCLK    : 2;            /*!< [11..10] LPUART (Low Power UART) Clock Selection                          */
      __IM  uint32_t            : 12;
      __IOM uint32_t T50CLK     : 2;            /*!< [25..24] TIMER50 Clock Selection                                          */
    } PPCLKSR_b;
  } ;
  __IM  uint32_t  RESERVED2[7];
  
  union {
    __IOM uint32_t PPRST1;                      /*!< (@ 0x00000060) Peripheral Reset Register 1                                */
    
    struct {
      __IOM uint32_t PARST      : 1;            /*!< [0..0] Port A Reset                                                       */
      __IOM uint32_t PBRST      : 1;            /*!< [1..1] Port B Reset                                                       */
      __IOM uint32_t PCRST      : 1;            /*!< [2..2] Port C Reset                                                       */
      __IOM uint32_t PDRST      : 1;            /*!< [3..3] Port D Reset                                                       */
      __IOM uint32_t PERST      : 1;            /*!< [4..4] Port E Reset                                                       */
      __IOM uint32_t PFRST      : 1;            /*!< [5..5] Port F Reset                                                       */
      __IM  uint32_t            : 16;
      __IOM uint32_t T40RST     : 1;            /*!< [22..22] TIMER40 Reset                                                    */
      __IOM uint32_t T41RST     : 1;            /*!< [23..23] TIMER41 Reset                                                    */
      __IOM uint32_t T42RST     : 1;            /*!< [24..24] TIMER42 Reset                                                    */
      __IOM uint32_t T43RST     : 1;            /*!< [25..25] TIMER43 Reset                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t T50RST     : 1;            /*!< [30..30] TIMER50 Reset                                                    */
    } PPRST1_b;
  } ;
  
  union {
    __IOM uint32_t PPRST2;                      /*!< (@ 0x00000064) Peripheral Reset Register 2                                */
    
    struct {
      __IOM uint32_t UST10RST   : 1;            /*!< [0..0] USART10 Reset                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t UT0RST     : 1;            /*!< [2..2] UART0 Reset                                                        */
      __IOM uint32_t UT1RST     : 1;            /*!< [3..3] UART1 Reset                                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t I2C0RST    : 1;            /*!< [6..6] I2C0 (Inter-IC) Reset                                              */
      __IOM uint32_t I2C1RST    : 1;            /*!< [7..7] I2C1 (Inter-IC) Reset                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADRST      : 1;            /*!< [10..10] ADC (Analog to Digital Converter) Reset                          */
      __IOM uint32_t RTCRST     : 1;            /*!< [11..11] RTCC (Real Time Clock/Calendar) Reset                            */
      __IOM uint32_t CRRST      : 1;            /*!< [12..12] CRC (Cyclic Redundancy Check) Reset                              */
      __IOM uint32_t LCDRST     : 1;            /*!< [13..13] LCD (LCD Driver) Reset                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t LPUTRST    : 1;            /*!< [15..15] LPUART (Low Power UART) Reset                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t LVIRST     : 1;            /*!< [18..18] LVI (Low Voltage Indicator) Reset                                */
      __IOM uint32_t FMCRST     : 1;            /*!< [19..19] FMC (Flash Memory Controller) Reset                              */
      __IOM uint32_t SPI0RST    : 1;            /*!< [20..20] SPI0 Reset                                                       */
      __IOM uint32_t SPI1RST    : 1;            /*!< [21..21] SPI1 Reset                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t SC0RST     : 1;            /*!< [24..24] SC0 (Smart Card) Reset                                           */
      __IOM uint32_t SC1RST     : 1;            /*!< [25..25] SC1 (Smart Card) Reset                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMP0RST    : 1;            /*!< [27..27] CMP0 (Comparator) Reset                                          */
      __IOM uint32_t CMP1RST    : 1;            /*!< [28..28] CMP1 (Comparator) Reset                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t DMARST     : 1;            /*!< [31..31] DMAC (DMA Controller) Reset                                      */
    } PPRST2_b;
  } ;
  __IM  uint32_t  RESERVED3[6];
  
  union {
    __IOM uint32_t XSOSC;                       /*!< (@ 0x00000084) Sub Oscillator Control Register                            */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t ISET_I     : 3;            /*!< [5..3] Sub Oscillator Driving Current Selection                           */
    } XSOSC_b;
  } ;
} SCUCG_Type;                                   /*!< Size = 136 (0x88)                                                         */



/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: LVI and LVR (SCULV)
  */

typedef struct {                                /*!< (@ 0x40005100) SCULV Structure                                            */
  
  union {
    __IOM uint32_t LVICR;                       /*!< (@ 0x00000000) Low Voltage Indicator Control Register                     */
    
    struct {
      __IOM uint32_t LVIVS      : 3;            /*!< [2..0] LVI Voltage Selection                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LVIFLAG    : 1;            /*!< [4..4] LVI Interrupt Flag                                                 */
      __IOM uint32_t LVINTEN    : 1;            /*!< [5..5] LVI Interrupt Enable                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t LVIEN      : 1;            /*!< [7..7] LVI Enable                                                         */
    } LVICR_b;
  } ;
  
  union {
    __IOM uint32_t LVRCR;                       /*!< (@ 0x00000004) Low Voltage Reset Control Register                         */
    
    struct {
      __IOM uint32_t LVREN      : 8;            /*!< [7..0] LVR Enable                                                         */
    } LVRCR_b;
  } ;
} SCULV_Type;                                   /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port n (Pn)
  */

typedef struct {                                /*!< (@ 0x50000000) Pn Structure                                               */
  
  union {
    __IOM uint32_t MOD;                         /*!< (@ 0x00000000) Port n Mode Register                                       */
    
    struct {
      __IOM uint32_t MODE0      : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
      __IOM uint32_t MODE1      : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
      __IOM uint32_t MODE2      : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
      __IOM uint32_t MODE3      : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
      __IOM uint32_t MODE4      : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
      __IOM uint32_t MODE5      : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
      __IOM uint32_t MODE6      : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
      __IOM uint32_t MODE7      : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
      __IOM uint32_t MODE8      : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
      __IOM uint32_t MODE9      : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
      __IOM uint32_t MODE10     : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
      __IOM uint32_t MODE11     : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
      __IOM uint32_t MODE12     : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
    } MOD_b;
  } ;
  
  union {
    __IOM uint32_t TYP;                         /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
    
    struct {
      __IOM uint32_t TYP0       : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
      __IOM uint32_t TYP1       : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
      __IOM uint32_t TYP2       : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
      __IOM uint32_t TYP3       : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
      __IOM uint32_t TYP4       : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
      __IOM uint32_t TYP5       : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
      __IOM uint32_t TYP6       : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
      __IOM uint32_t TYP7       : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
      __IOM uint32_t TYP8       : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
      __IOM uint32_t TYP9       : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
      __IOM uint32_t TYP10      : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
      __IOM uint32_t TYP11      : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
      __IOM uint32_t TYP12      : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
    } TYP_b;
  } ;
  
  union {
    __IOM uint32_t AFSR1;                       /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
    
    struct {
      __IOM uint32_t AFSR0      : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
      __IOM uint32_t AFSR1      : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
      __IOM uint32_t AFSR2      : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
      __IOM uint32_t AFSR3      : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
      __IOM uint32_t AFSR4      : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
      __IOM uint32_t AFSR5      : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
      __IOM uint32_t AFSR6      : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
      __IOM uint32_t AFSR7      : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
    } AFSR1_b;
  } ;
  
  union {
    __IOM uint32_t AFSR2;                       /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
    
    struct {
      __IOM uint32_t AFSR8      : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
      __IOM uint32_t AFSR9      : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
      __IOM uint32_t AFSR10     : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
      __IOM uint32_t AFSR11     : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
      __IOM uint32_t AFSR12     : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
    } AFSR2_b;
  } ;
  
  union {
    __IOM uint32_t PUPD;                        /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
    
    struct {
      __IOM uint32_t PUPD0      : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
      __IOM uint32_t PUPD1      : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
      __IOM uint32_t PUPD2      : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
      __IOM uint32_t PUPD3      : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
      __IOM uint32_t PUPD4      : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
      __IOM uint32_t PUPD5      : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
      __IOM uint32_t PUPD6      : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
      __IOM uint32_t PUPD7      : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
      __IOM uint32_t PUPD8      : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
      __IOM uint32_t PUPD9      : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
      __IOM uint32_t PUPD10     : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
      __IOM uint32_t PUPD11     : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
      __IOM uint32_t PUPD12     : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
    } PUPD_b;
  } ;
  
  union {
    __IM  uint32_t INDR;                        /*!< (@ 0x00000014) Port n Input Data Register                                 */
    
    struct {
      __IM  uint32_t INDR0      : 1;            /*!< [0..0] Port n Input Data 0                                                */
      __IM  uint32_t INDR1      : 1;            /*!< [1..1] Port n Input Data 1                                                */
      __IM  uint32_t INDR2      : 1;            /*!< [2..2] Port n Input Data 2                                                */
      __IM  uint32_t INDR3      : 1;            /*!< [3..3] Port n Input Data 3                                                */
      __IM  uint32_t INDR4      : 1;            /*!< [4..4] Port n Input Data 4                                                */
      __IM  uint32_t INDR5      : 1;            /*!< [5..5] Port n Input Data 5                                                */
      __IM  uint32_t INDR6      : 1;            /*!< [6..6] Port n Input Data 6                                                */
      __IM  uint32_t INDR7      : 1;            /*!< [7..7] Port n Input Data 7                                                */
      __IM  uint32_t INDR8      : 1;            /*!< [8..8] Port n Input Data 8                                                */
      __IM  uint32_t INDR9      : 1;            /*!< [9..9] Port n Input Data 9                                                */
      __IM  uint32_t INDR10     : 1;            /*!< [10..10] Port n Input Data 10                                             */
      __IM  uint32_t INDR11     : 1;            /*!< [11..11] Port n Input Data 11                                             */
      __IM  uint32_t INDR12     : 1;            /*!< [12..12] Port n Input Data 12                                             */
    } INDR_b;
  } ;
  
  union {
    __IOM uint32_t OUTDR;                       /*!< (@ 0x00000018) Port n Output Data Register                                */
    
    struct {
      __IOM uint32_t OUTDR0     : 1;            /*!< [0..0] Port n Output Data 0                                               */
      __IOM uint32_t OUTDR1     : 1;            /*!< [1..1] Port n Output Data 1                                               */
      __IOM uint32_t OUTDR2     : 1;            /*!< [2..2] Port n Output Data 2                                               */
      __IOM uint32_t OUTDR3     : 1;            /*!< [3..3] Port n Output Data 3                                               */
      __IOM uint32_t OUTDR4     : 1;            /*!< [4..4] Port n Output Data 4                                               */
      __IOM uint32_t OUTDR5     : 1;            /*!< [5..5] Port n Output Data 5                                               */
      __IOM uint32_t OUTDR6     : 1;            /*!< [6..6] Port n Output Data 6                                               */
      __IOM uint32_t OUTDR7     : 1;            /*!< [7..7] Port n Output Data 7                                               */
      __IOM uint32_t OUTDR8     : 1;            /*!< [8..8] Port n Output Data 8                                               */
      __IOM uint32_t OUTDR9     : 1;            /*!< [9..9] Port n Output Data 9                                               */
      __IOM uint32_t OUTDR10    : 1;            /*!< [10..10] Port n Output Data 10                                            */
      __IOM uint32_t OUTDR11    : 1;            /*!< [11..11] Port n Output Data 11                                            */
      __IOM uint32_t OUTDR12    : 1;            /*!< [12..12] Port n Output Data 12                                            */
    } OUTDR_b;
  } ;
  
  union {
    __OM  uint32_t BSR;                         /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
    
    struct {
      __OM  uint32_t BSR0       : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
      __OM  uint32_t BSR1       : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
      __OM  uint32_t BSR2       : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
      __OM  uint32_t BSR3       : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
      __OM  uint32_t BSR4       : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
      __OM  uint32_t BSR5       : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
      __OM  uint32_t BSR6       : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
      __OM  uint32_t BSR7       : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
      __OM  uint32_t BSR8       : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
      __OM  uint32_t BSR9       : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
      __OM  uint32_t BSR10      : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
      __OM  uint32_t BSR11      : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
      __OM  uint32_t BSR12      : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
    } BSR_b;
  } ;
  
  union {
    __OM  uint32_t BCR;                         /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
    
    struct {
      __OM  uint32_t BCR0       : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
      __OM  uint32_t BCR1       : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
      __OM  uint32_t BCR2       : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
      __OM  uint32_t BCR3       : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
      __OM  uint32_t BCR4       : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
      __OM  uint32_t BCR5       : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
      __OM  uint32_t BCR6       : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
      __OM  uint32_t BCR7       : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
      __OM  uint32_t BCR8       : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
      __OM  uint32_t BCR9       : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
      __OM  uint32_t BCR10      : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
      __OM  uint32_t BCR11      : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
      __OM  uint32_t BCR12      : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
    } BCR_b;
  } ;
  
  union {
    __IOM uint32_t OUTDMSK;                     /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
    
    struct {
      __IOM uint32_t OUTDMSK0   : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
      __IOM uint32_t OUTDMSK1   : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
      __IOM uint32_t OUTDMSK2   : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
      __IOM uint32_t OUTDMSK3   : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
      __IOM uint32_t OUTDMSK4   : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
      __IOM uint32_t OUTDMSK5   : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
      __IOM uint32_t OUTDMSK6   : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
      __IOM uint32_t OUTDMSK7   : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
      __IOM uint32_t OUTDMSK8   : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
      __IOM uint32_t OUTDMSK9   : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
      __IOM uint32_t OUTDMSK10  : 1;            /*!< [10..10] Port n Output Data Mask 10                                       */
      __IOM uint32_t OUTDMSK11  : 1;            /*!< [11..11] Port n Output Data Mask 11                                       */
      __IOM uint32_t OUTDMSK12  : 1;            /*!< [12..12] Port n Output Data Mask 12                                       */
    } OUTDMSK_b;
  } ;
  
  union {
    __IOM uint32_t DBCR;                        /*!< (@ 0x00000028) Port n Debounce Control Register                           */
    
    struct {
      __IOM uint32_t DBEN0      : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
      __IOM uint32_t DBEN1      : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
      __IOM uint32_t DBEN2      : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
      __IOM uint32_t DBEN3      : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
      __IOM uint32_t DBEN4      : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
      __IOM uint32_t DBEN5      : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
      __IOM uint32_t DBEN6      : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
      __IOM uint32_t DBEN7      : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
      __IOM uint32_t DBEN8      : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
      __IOM uint32_t DBEN9      : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
      __IOM uint32_t DBEN10     : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
      __IOM uint32_t DBEN11     : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
      __IOM uint32_t DBEN12     : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBCLK      : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
    } DBCR_b;
  } ;
} Pn_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port A (PA)
  */

typedef struct {                                /*!< (@ 0x30000000) PA Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PA_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
      } PA_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PA_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
      } PA_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PA_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PA_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PA_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
      } PA_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PA_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
      } PA_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PA_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
      } PA_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PA_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
      } PA_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PA_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
      } PA_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PA_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
      } PA_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PA_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
      } PA_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PA_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IM  uint32_t          : 6;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PA_DBCR_b;
    } ;
  };
} PA_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port B (PB)
  */

typedef struct {                                /*!< (@ 0x30000100) PB Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PB_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } PB_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PB_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } PB_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PB_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PB_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PB_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } PB_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PB_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PB_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PB_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } PB_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PB_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } PB_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PB_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } PB_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PB_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } PB_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PB_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } PB_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PB_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PB_DBCR_b;
    } ;
  };
} PB_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port C (PC)
  */

typedef struct {                                /*!< (@ 0x30000200) PC Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PC_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
      } PC_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PC_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
      } PC_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PC_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PC_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PC_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
      } PC_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PC_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
      } PC_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PC_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
      } PC_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PC_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
      } PC_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PC_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
      } PC_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PC_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
      } PC_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PC_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
      } PC_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PC_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IM  uint32_t          : 4;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PC_DBCR_b;
    } ;
  };
} PC_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port D (PD)
  */

typedef struct {                                /*!< (@ 0x30000300) PD Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PD_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
      } PD_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PD_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
      } PD_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PD_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PD_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    __IOM uint32_t PD_AFSR2;                    /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PD_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
      } PD_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PD_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
      } PD_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PD_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
      } PD_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PD_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
      } PD_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PD_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
      } PD_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PD_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
      } PD_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PD_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IM  uint32_t          : 8;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PD_DBCR_b;
    } ;
  };
} PD_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port E (PE)
  */

typedef struct {                                /*!< (@ 0x30000400) PE Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PE_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
      } PE_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PE_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
      } PE_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PE_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
      } PE_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    __IOM uint32_t PE_AFSR2;                    /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PE_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
      } PE_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PE_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
      } PE_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PE_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
      } PE_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PE_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
      } PE_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PE_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
      } PE_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PE_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
      } PE_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PE_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IM  uint32_t          : 11;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PE_DBCR_b;
    } ;
  };
} PE_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port F (PF)
  */

typedef struct {                                /*!< (@ 0x30000500) PF Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PF_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
      } PF_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PF_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
      } PF_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PF_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
      } PF_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } AFSR2_b;
    } ;
    __IOM uint32_t PF_AFSR2;                    /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PF_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
      } PF_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PF_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
      } PF_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PF_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
      } PF_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PF_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
      } PF_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PF_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
      } PF_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PF_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
      } PF_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IOM uint32_t DBEN12   : 1;            /*!< [12..12] Port n Debounce Enable 12                                        */
        __IM  uint32_t          : 3;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PF_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IM  uint32_t          : 12;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PF_DBCR_b;
    } ;
  };
} PF_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Management Unit (PMU)
  */

typedef struct {                                /*!< (@ 0x40001900) PMU Structure                                              */
  
  union {
    __IOM uint32_t PWRCR;                       /*!< (@ 0x00000000) Power Control Register                                     */
    
    struct {
      __IOM uint32_t SRAMRTPWR  : 1;            /*!< [0..0] SRAM Retention Power Control                                       */
      __IM  uint32_t            : 7;
      __IOM uint32_t FLASHPWR   : 1;            /*!< [8..8] Flash Memory Power Control                                         */
      __IM  uint32_t            : 6;
      __IOM uint32_t ALLPWR     : 1;            /*!< [15..15] All System and Peripheral Except Always-on Regiion
                                                     Power Control                                                             */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x5072)                                */
    } PWRCR_b;
  } ;
  __IM  uint32_t  RESERVED[15];
  
  union {
    __IOM uint8_t BKR0;                         /*!< (@ 0x00000040) Back-up Data Register 0                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR0_b;
  } ;
  
  union {
    __IOM uint8_t BKR1;                         /*!< (@ 0x00000041) Back-up Data Register 1                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR1_b;
  } ;
  
  union {
    __IOM uint8_t BKR2;                         /*!< (@ 0x00000042) Back-up Data Register 2                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR2_b;
  } ;
  
  union {
    __IOM uint8_t BKR3;                         /*!< (@ 0x00000043) Back-up Data Register 3                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR3_b;
  } ;
  
  union {
    __IOM uint8_t BKR4;                         /*!< (@ 0x00000044) Back-up Data Register 4                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR4_b;
  } ;
  
  union {
    __IOM uint8_t BKR5;                         /*!< (@ 0x00000045) Back-up Data Register 5                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR5_b;
  } ;
  
  union {
    __IOM uint8_t BKR6;                         /*!< (@ 0x00000046) Back-up Data Register 6                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR6_b;
  } ;
  
  union {
    __IOM uint8_t BKR7;                         /*!< (@ 0x00000047) Back-up Data Register 7                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR7_b;
  } ;
  
  union {
    __IOM uint8_t BKR8;                         /*!< (@ 0x00000048) Back-up Data Register 8                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR8_b;
  } ;
  
  union {
    __IOM uint8_t BKR9;                         /*!< (@ 0x00000049) Back-up Data Register 9                                    */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR9_b;
  } ;
  
  union {
    __IOM uint8_t BKR10;                        /*!< (@ 0x0000004A) Back-up Data Register 10                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR10_b;
  } ;
  
  union {
    __IOM uint8_t BKR11;                        /*!< (@ 0x0000004B) Back-up Data Register 11                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR11_b;
  } ;
  
  union {
    __IOM uint8_t BKR12;                        /*!< (@ 0x0000004C) Back-up Data Register 12                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR12_b;
  } ;
  
  union {
    __IOM uint8_t BKR13;                        /*!< (@ 0x0000004D) Back-up Data Register 13                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR13_b;
  } ;
  
  union {
    __IOM uint8_t BKR14;                        /*!< (@ 0x0000004E) Back-up Data Register 14                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR14_b;
  } ;
  
  union {
    __IOM uint8_t BKR15;                        /*!< (@ 0x0000004F) Back-up Data Register 15                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR15_b;
  } ;
  
  union {
    __IOM uint8_t BKR16;                        /*!< (@ 0x00000050) Back-up Data Register 16                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR16_b;
  } ;
  
  union {
    __IOM uint8_t BKR17;                        /*!< (@ 0x00000051) Back-up Data Register 17                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR17_b;
  } ;
  
  union {
    __IOM uint8_t BKR18;                        /*!< (@ 0x00000052) Back-up Data Register 18                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR18_b;
  } ;
  
  union {
    __IOM uint8_t BKR19;                        /*!< (@ 0x00000053) Back-up Data Register 19                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR19_b;
  } ;
  
  union {
    __IOM uint8_t BKR20;                        /*!< (@ 0x00000054) Back-up Data Register 20                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR20_b;
  } ;
  
  union {
    __IOM uint8_t BKR21;                        /*!< (@ 0x00000055) Back-up Data Register 21                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR21_b;
  } ;
  
  union {
    __IOM uint8_t BKR22;                        /*!< (@ 0x00000056) Back-up Data Register 22                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR22_b;
  } ;
  
  union {
    __IOM uint8_t BKR23;                        /*!< (@ 0x00000057) Back-up Data Register 23                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR23_b;
  } ;
  
  union {
    __IOM uint8_t BKR24;                        /*!< (@ 0x00000058) Back-up Data Register 24                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR24_b;
  } ;
  
  union {
    __IOM uint8_t BKR25;                        /*!< (@ 0x00000059) Back-up Data Register 25                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR25_b;
  } ;
  
  union {
    __IOM uint8_t BKR26;                        /*!< (@ 0x0000005A) Back-up Data Register 26                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR26_b;
  } ;
  
  union {
    __IOM uint8_t BKR27;                        /*!< (@ 0x0000005B) Back-up Data Register 27                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR27_b;
  } ;
  
  union {
    __IOM uint8_t BKR28;                        /*!< (@ 0x0000005C) Back-up Data Register 28                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR28_b;
  } ;
  
  union {
    __IOM uint8_t BKR29;                        /*!< (@ 0x0000005D) Back-up Data Register 29                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR29_b;
  } ;
  
  union {
    __IOM uint8_t BKR30;                        /*!< (@ 0x0000005E) Back-up Data Register 30                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR30_b;
  } ;
  
  union {
    __IOM uint8_t BKR31;                        /*!< (@ 0x0000005F) Back-up Data Register 31                                   */
    
    struct {
      __IOM uint8_t BACKUP      : 8;            /*!< [7..0] Back-up Data                                                       */
    } BKR31_b;
  } ;
} PMU_Type;                                     /*!< Size = 96 (0x60)                                                          */



/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash Memory Controller (FMC)
  */

typedef struct {                                /*!< (@ 0x40001B00) FMC Structure                                              */
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000000) Flash Memory Address Register                              */
    
    struct {
      __IOM uint32_t ADDR       : 32;           /*!< [31..0] Flash Memory Address Pointer                                      */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t IDR1;                        /*!< (@ 0x00000004) Flash Memory Identification Register 1                     */
    
    struct {
      __IOM uint32_t ID1        : 32;           /*!< [31..0] Flash Memory Identification 0                                     */
    } IDR1_b;
  } ;
  
  union {
    __IOM uint32_t IDR2;                        /*!< (@ 0x00000008) Flash Memory Identification Register 2                     */
    
    struct {
      __IOM uint32_t ID2        : 32;           /*!< [31..0] Flash Memory Identification 1                                     */
    } IDR2_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x0000000C) Flash Memory Control Register                              */
    
    struct {
      __IOM uint32_t FMOD       : 4;            /*!< [3..0] Flash Memory Operation Mode Selection                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t FMBUSY     : 1;            /*!< [7..7] Flash Memory Operation Mode Busy                                   */
      __IOM uint32_t FMKEY      : 8;            /*!< [15..8] Flash Memory Operation Area Selection                             */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x6c93)                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t BCR;                         /*!< (@ 0x00000010) Flash Memory Configure Area Bulk Erase Control
                                                                    Register                                                   */
    
    struct {
      __IOM uint32_t CNF1BEN    : 4;            /*!< [3..0] Configure Option Page 1 Bulk Erase Enable                          */
      __IOM uint32_t CNF2BEN    : 4;            /*!< [7..4] Configure Option Page 2 Bulk Erase Enable                          */
      __IOM uint32_t CNF3BEN    : 4;            /*!< [11..8] Configure Option Page 3 Bulk Erase Enable                         */
      __IM  uint32_t            : 4;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xc1be)                                */
    } BCR_b;
  } ;
  
  union {
    __IOM uint32_t ERFLAG;                      /*!< (@ 0x00000014) Flash Memory Error Flag                                    */
    
    struct {
      __IOM uint32_t FMOPFLAG   : 1;            /*!< [0..0] Error bit of Flash Memory Operation Procedure                      */
      __IOM uint32_t INSTFLAG   : 1;            /*!< [1..1] Don't care                                                         */
    } ERFLAG_b;
  } ;
  __IM  uint32_t  RESERVED[58];
  __OM  uint32_t  PAGEBUF;                      /*!< (@ 0x00000100) Flash Memory Page Buffer Area (128bytes/Accessed
                                                                    by 32bit Word Only)                                        */
} FMC_Type;                                     /*!< Size = 260 (0x104)                                                        */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watch-Dog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40001A00) WDT Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Watch-Dog Timer Control Register                           */
    
    struct {
      __IOM uint32_t CLKDIV     : 2;            /*!< [1..0] Watch-Dog Timer Clock Divider                                      */
      __IOM uint32_t UNFIEN     : 1;            /*!< [2..2] Watch-Dog Timer Underflow Interrupt Enable                         */
      __IOM uint32_t WINMIEN    : 1;            /*!< [3..3] Watch-Dog Timer Window Match Interrupt Enable                      */
      __IOM uint32_t CNTEN      : 6;            /*!< [9..4] Watch-Dog Timer Counter Enable                                     */
      __IOM uint32_t RSTEN      : 6;            /*!< [15..10] Watch-Dog Timer Reset Enable                                     */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x5a69)                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) Watch-Dog Timer Status Register                            */
    
    struct {
      __IOM uint32_t UNFIFLAG   : 1;            /*!< [0..0] Watch-Dog Timer Underflow Interrupt Flag                           */
      __IOM uint32_t WINMIFLAG  : 1;            /*!< [1..1] Watch-Dog Timer Window Match Interrupt Flag                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGCNTEN   : 1;            /*!< [7..7] Watch-Dog Timer Counter Enable When the core is halted
                                                     in debug mode                                                             */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000008) Watch-Dog Timer Data Register                              */
    
    struct {
      __IOM uint32_t DATA       : 24;           /*!< [23..0] Watch-Dog Timer Data                                              */
    } DR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x0000000C) Watch-Dog Timer Counter Register                           */
    
    struct {
      __IM  uint32_t CNT        : 24;           /*!< [23..0] Watch-Dog Timer Counter                                           */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t WINDR;                       /*!< (@ 0x00000010) Watch-Dog Timer Window Data Register                       */
    
    struct {
      __IOM uint32_t WDATA      : 24;           /*!< [23..0] Watch-Dog Timer Window Data                                       */
    } WINDR_b;
  } ;
  
  union {
    __OM  uint32_t CNTR;                        /*!< (@ 0x00000014) Watch-Dog Timer Counter Reload Register                    */
    
    struct {
      __OM  uint32_t CNTR       : 8;            /*!< [7..0] Watch-Dog Timer Counter Reload                                     */
    } CNTR_b;
  } ;
} WDT_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           RTCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real Time Clock and Calendar (RTCC)
  */

typedef struct {                                /*!< (@ 0x40005200) RTCC Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) RTCC Control Register                                      */
    
    struct {
      __IOM uint32_t RTWAIT     : 1;            /*!< [0..0] RTCC Wait Control                                                  */
      __IM  uint32_t RTWST      : 1;            /*!< [1..1] RTCC Wait Status Flag                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t ALIFLAG    : 1;            /*!< [5..5] RTCC Alarm Match Interrupt Flag                                    */
      __IOM uint32_t ALIEN      : 1;            /*!< [6..6] RTCC Alarm Match Interrupt Enable                                  */
      __IOM uint32_t ALEN       : 1;            /*!< [7..7] RTCC Alarm Match Operation Enable                                  */
      __IOM uint32_t OUTSEL     : 1;            /*!< [8..8] RTCOUT Selection                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t HS24       : 1;            /*!< [10..10] 12/24-hour System Selection                                      */
      __IOM uint32_t RTIFLAG    : 1;            /*!< [11..11] RTCC Interval Interrupt Flag                                     */
      __IOM uint32_t RTIN       : 3;            /*!< [14..12] RTCC Interrupt Interval Selection                                */
      __IOM uint32_t RTEN       : 1;            /*!< [15..15] RTCC Enable                                                      */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ECR;                         /*!< (@ 0x00000004) RTCC Time Error Correcton Register                         */
    
    struct {
      __IOM uint32_t ECV        : 6;            /*!< [5..0] Time Error Correction Data                                         */
      __IOM uint32_t ECSIGN     : 1;            /*!< [6..6] Time Error Correction Data Sign                                    */
      __IOM uint32_t ECTM       : 1;            /*!< [7..7] Time Error Correction Timing Selection                             */
    } ECR_b;
  } ;
  
  union {
    __IM  uint32_t SCNT;                        /*!< (@ 0x00000008) RTCC Sub-counter Register                                  */
    
    struct {
      __IM  uint32_t RTCNT      : 16;           /*!< [15..0] RTCC Sub-counter                                                  */
    } SCNT_b;
  } ;
  
  union {
    __IOM uint32_t SEC;                         /*!< (@ 0x0000000C) RTCC Second Counter Register                               */
    
    struct {
      __IOM uint32_t RSEC       : 7;            /*!< [6..0] RTCC Second Counter                                                */
    } SEC_b;
  } ;
  
  union {
    __IOM uint32_t MIN;                         /*!< (@ 0x00000010) RTCC Minute Counter Register                               */
    
    struct {
      __IOM uint32_t RMIN       : 7;            /*!< [6..0] RTCC Minute Counter                                                */
    } MIN_b;
  } ;
  
  union {
    __IOM uint32_t HOUR;                        /*!< (@ 0x00000014) RTCC Hour Counter Register                                 */
    
    struct {
      __IOM uint32_t RHOUR      : 7;            /*!< [6..0] RTCC Hour Counter                                                  */
    } HOUR_b;
  } ;
  
  union {
    __IOM uint32_t DAY;                         /*!< (@ 0x00000018) RTCC Day Counter Register                                  */
    
    struct {
      __IOM uint32_t RDAY       : 6;            /*!< [5..0] RTCC Day Counter                                                   */
    } DAY_b;
  } ;
  
  union {
    __IOM uint32_t WEEK;                        /*!< (@ 0x0000001C) RTCC Week Counter Register                                 */
    
    struct {
      __IOM uint32_t RWEEK      : 3;            /*!< [2..0] RTCC Week Counter                                                  */
    } WEEK_b;
  } ;
  
  union {
    __IOM uint32_t MONTH;                       /*!< (@ 0x00000020) RTCC Month Counter Register                                */
    
    struct {
      __IOM uint32_t RMONTH     : 5;            /*!< [4..0] RTCC Month Counter                                                 */
    } MONTH_b;
  } ;
  
  union {
    __IOM uint32_t YEAR;                        /*!< (@ 0x00000024) RTCC Year Counter Register                                 */
    
    struct {
      __IOM uint32_t RYEAR      : 8;            /*!< [7..0] RTCC Year Counter                                                  */
    } YEAR_b;
  } ;
  
  union {
    __IOM uint32_t ALMIN;                       /*!< (@ 0x00000028) RTCC Alarm Minute Counter Register                         */
    
    struct {
      __IOM uint32_t AMIN       : 7;            /*!< [6..0] RTCC Alarm Minute Counter                                          */
    } ALMIN_b;
  } ;
  
  union {
    __IOM uint32_t ALHOUR;                      /*!< (@ 0x0000002C) RTCC Alarm Hour Counter Register                           */
    
    struct {
      __IOM uint32_t AHOUR      : 6;            /*!< [5..0] RTCC Alarm Hour Counter                                            */
    } ALHOUR_b;
  } ;
  
  union {
    __IOM uint32_t ALWEEK;                      /*!< (@ 0x00000030) RTCC Alarm Week Counter Register                           */
    
    struct {
      __IOM uint32_t AWEEK0     : 1;            /*!< [0..0] Sunday Alarm Setting                                               */
      __IOM uint32_t AWEEK1     : 1;            /*!< [1..1] Monday Alarm Setting                                               */
      __IOM uint32_t AWEEK2     : 1;            /*!< [2..2] Tuesday Alarm Setting                                              */
      __IOM uint32_t AWEEK3     : 1;            /*!< [3..3] Wednesday Alarm Setting                                            */
      __IOM uint32_t AWEEK4     : 1;            /*!< [4..4] Thursday Alarm Setting                                             */
      __IOM uint32_t AWEEK5     : 1;            /*!< [5..5] Friday Alarm Setting                                               */
      __IOM uint32_t AWEEK6     : 1;            /*!< [6..6] Saturday Alarm Setting                                             */
    } ALWEEK_b;
  } ;
} RTCC_Type;                                    /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER4n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 4n (TIMER4n)
  */

typedef struct {                                /*!< (@ 0x51000000) TIMER4n Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER4n Control Register                                   */
    
    struct {
      __IOM uint32_t T4nCLR     : 1;            /*!< [0..0] TIMER4n Counter and Prescaler Clear                                */
      __IOM uint32_t T4nPAU     : 1;            /*!< [1..1] TIMER4n Counter Temporary Pause Control                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nINPOL   : 2;            /*!< [5..4] TIMER4n Capture/'Force level' Polarity Selection                   */
      __IOM uint32_t UPDT       : 2;            /*!< [7..6] Data Reload Time Selection                                         */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t T4nOPAIR   : 1;            /*!< [10..10] TIMER4n Output Pair Selection                                    */
      __IOM uint32_t T4nECE     : 1;            /*!< [11..11] TIMER4n External Clock Edge Selection                            */
      __IOM uint32_t T4nMS      : 2;            /*!< [13..12] TIMER4n Operation Mode Selection                                 */
      __IOM uint32_t T4nCLK     : 1;            /*!< [14..14] TIMER4n Clock Selection                                          */
      __IOM uint32_t T4nEN      : 1;            /*!< [15..15] TIMER4n Operation Enable                                         */
      __IOM uint32_t CNTSH      : 2;            /*!< [17..16] Timer Counter Sharing Selection                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTSHEN    : 1;            /*!< [19..19] Timer Counter Sharing Enable                                     */
      __IOM uint32_t T4nFRCS    : 2;            /*!< [21..20] TIMER4n Force Input Selection                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t T4nFRCEN   : 1;            /*!< [23..23] TIMER4n Output Force Level Enable                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER4n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER4n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER4n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER4n A Data bits. The range is 0x0000 to 0xFFFF                */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER4n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER4n B Data bits. The range is 0x0000 to 0xFFFF                */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000010) TIMER4n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER4n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000014) TIMER4n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER4n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000018) TIMER4n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER4n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x0000001C) TIMER4n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLA       : 1;            /*!< [0..0] Configure TnOUTA Output When Disable                               */
      __IOM uint32_t LVLB       : 1;            /*!< [1..1] Configure TnOUTB Output When Disable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nAOE     : 1;            /*!< [4..4] TnOUTA Output Enable                                               */
      __IOM uint32_t T4nBOE     : 1;            /*!< [5..5] TnOUTB Output Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t POLA       : 1;            /*!< [8..8] TnOUTA Output Polarity Selection                                   */
      __IOM uint32_t POLB       : 1;            /*!< [9..9] TnOUTB Output Polarity Selection                                   */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000020) TIMER4n Output Delay Data Register                         */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER4n Output Delay Data                                          */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000024) TIMER4n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T4nAMIEN   : 2;            /*!< [1..0] TIMER4n A Match Interrupt Enable                                   */
      __IOM uint32_t T4nBMIEN   : 2;            /*!< [3..2] TIMER4n B Match Interrupt Enable                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMIEN   : 1;            /*!< [8..8] TIMER4n Period Match Interrupt Enable                              */
      __IOM uint32_t T4nBTIEN   : 1;            /*!< [9..9] TIMER4n Bottom Interrupt Enable                                    */
      __IOM uint32_t T4nCIEN    : 1;            /*!< [10..10] TIMER4n Capture Interrupt Enable                                 */
      __IOM uint32_t T4nFRCIEN  : 1;            /*!< [11..11] TIMER4n Output Force Level Interrupt Enable                      */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x00000028) TIMER4n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T4nAMIFLAG : 1;            /*!< [0..0] TIMER4n A Match Interrupt Flag                                     */
      __IOM uint32_t T4nBMIFLAG : 1;            /*!< [1..1] TIMER4n B Match Interrupt Flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nPMIFLAG : 1;            /*!< [4..4] TIMER4n Period Match Interrupt Flag                                */
      __IOM uint32_t T4nBTIFLAG : 1;            /*!< [5..5] TIMER4n Bottom Interrupt Flag                                      */
      __IOM uint32_t T4nCIFLAG  : 1;            /*!< [6..6] TIMER4n Capture Interrupt Flag                                     */
      __IOM uint32_t T4nFRCIFLAG : 1;           /*!< [7..7] TIMER4n Output Force Level Interrupt Flag                          */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x0000002C) TIMER4n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T4nAMTG    : 2;            /*!< [1..0] Select TIMER4n A Match for ADC Trigger Signal Generator.           */
      __IOM uint32_t T4nBMTG    : 2;            /*!< [3..2] Select TIMER4n B Match for ADC Trigger Signal Generator.           */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMTG    : 1;            /*!< [8..8] Select TIMER4n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T4nBTTG    : 1;            /*!< [9..9] Select TIMER4n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
} TIMER4n_Type;                                 /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER40                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 40 (TIMER40)
  */

typedef struct {                                /*!< (@ 0x40002700) TIMER40 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER4n Control Register                                   */
    
    struct {
      __IOM uint32_t T4nCLR     : 1;            /*!< [0..0] TIMER4n Counter and Prescaler Clear                                */
      __IOM uint32_t T4nPAU     : 1;            /*!< [1..1] TIMER4n Counter Temporary Pause Control                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nINPOL   : 2;            /*!< [5..4] TIMER4n Capture/'Force level' Polarity Selection                   */
      __IOM uint32_t UPDT       : 2;            /*!< [7..6] Data Reload Time Selection                                         */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t T4nOPAIR   : 1;            /*!< [10..10] TIMER4n Output Pair Selection                                    */
      __IOM uint32_t T4nECE     : 1;            /*!< [11..11] TIMER4n External Clock Edge Selection                            */
      __IOM uint32_t T4nMS      : 2;            /*!< [13..12] TIMER4n Operation Mode Selection                                 */
      __IOM uint32_t T4nCLK     : 1;            /*!< [14..14] TIMER4n Clock Selection                                          */
      __IOM uint32_t T4nEN      : 1;            /*!< [15..15] TIMER4n Operation Enable                                         */
      __IOM uint32_t CNTSH      : 2;            /*!< [17..16] Timer Counter Sharing Selection                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTSHEN    : 1;            /*!< [19..19] Timer Counter Sharing Enable                                     */
      __IOM uint32_t T4nFRCS    : 2;            /*!< [21..20] TIMER4n Force Input Selection                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t T4nFRCEN   : 1;            /*!< [23..23] TIMER4n Output Force Level Enable                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER4n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER4n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER4n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER4n A Data bits. The range is 0x0000 to 0xFFFF                */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER4n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER4n B Data bits. The range is 0x0000 to 0xFFFF                */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000010) TIMER4n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER4n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000014) TIMER4n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER4n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000018) TIMER4n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER4n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x0000001C) TIMER4n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLA       : 1;            /*!< [0..0] Configure TnOUTA Output When Disable                               */
      __IOM uint32_t LVLB       : 1;            /*!< [1..1] Configure TnOUTB Output When Disable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nAOE     : 1;            /*!< [4..4] TnOUTA Output Enable                                               */
      __IOM uint32_t T4nBOE     : 1;            /*!< [5..5] TnOUTB Output Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t POLA       : 1;            /*!< [8..8] TnOUTA Output Polarity Selection                                   */
      __IOM uint32_t POLB       : 1;            /*!< [9..9] TnOUTB Output Polarity Selection                                   */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000020) TIMER4n Output Delay Data Register                         */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER4n Output Delay Data                                          */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000024) TIMER4n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T4nAMIEN   : 2;            /*!< [1..0] TIMER4n A Match Interrupt Enable                                   */
      __IOM uint32_t T4nBMIEN   : 2;            /*!< [3..2] TIMER4n B Match Interrupt Enable                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMIEN   : 1;            /*!< [8..8] TIMER4n Period Match Interrupt Enable                              */
      __IOM uint32_t T4nBTIEN   : 1;            /*!< [9..9] TIMER4n Bottom Interrupt Enable                                    */
      __IOM uint32_t T4nCIEN    : 1;            /*!< [10..10] TIMER4n Capture Interrupt Enable                                 */
      __IOM uint32_t T4nFRCIEN  : 1;            /*!< [11..11] TIMER4n Output Force Level Interrupt Enable                      */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x00000028) TIMER4n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T4nAMIFLAG : 1;            /*!< [0..0] TIMER4n A Match Interrupt Flag                                     */
      __IOM uint32_t T4nBMIFLAG : 1;            /*!< [1..1] TIMER4n B Match Interrupt Flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nPMIFLAG : 1;            /*!< [4..4] TIMER4n Period Match Interrupt Flag                                */
      __IOM uint32_t T4nBTIFLAG : 1;            /*!< [5..5] TIMER4n Bottom Interrupt Flag                                      */
      __IOM uint32_t T4nCIFLAG  : 1;            /*!< [6..6] TIMER4n Capture Interrupt Flag                                     */
      __IOM uint32_t T4nFRCIFLAG : 1;           /*!< [7..7] TIMER4n Output Force Level Interrupt Flag                          */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x0000002C) TIMER4n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T4nAMTG    : 2;            /*!< [1..0] Select TIMER4n A Match for ADC Trigger Signal Generator.           */
      __IOM uint32_t T4nBMTG    : 2;            /*!< [3..2] Select TIMER4n B Match for ADC Trigger Signal Generator.           */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMTG    : 1;            /*!< [8..8] Select TIMER4n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T4nBTTG    : 1;            /*!< [9..9] Select TIMER4n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
} TIMER40_Type;                                 /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER41                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 41 (TIMER41)
  */

typedef struct {                                /*!< (@ 0x40002780) TIMER41 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER4n Control Register                                   */
    
    struct {
      __IOM uint32_t T4nCLR     : 1;            /*!< [0..0] TIMER4n Counter and Prescaler Clear                                */
      __IOM uint32_t T4nPAU     : 1;            /*!< [1..1] TIMER4n Counter Temporary Pause Control                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nINPOL   : 2;            /*!< [5..4] TIMER4n Capture/'Force level' Polarity Selection                   */
      __IOM uint32_t UPDT       : 2;            /*!< [7..6] Data Reload Time Selection                                         */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t T4nOPAIR   : 1;            /*!< [10..10] TIMER4n Output Pair Selection                                    */
      __IOM uint32_t T4nECE     : 1;            /*!< [11..11] TIMER4n External Clock Edge Selection                            */
      __IOM uint32_t T4nMS      : 2;            /*!< [13..12] TIMER4n Operation Mode Selection                                 */
      __IOM uint32_t T4nCLK     : 1;            /*!< [14..14] TIMER4n Clock Selection                                          */
      __IOM uint32_t T4nEN      : 1;            /*!< [15..15] TIMER4n Operation Enable                                         */
      __IOM uint32_t CNTSH      : 2;            /*!< [17..16] Timer Counter Sharing Selection                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTSHEN    : 1;            /*!< [19..19] Timer Counter Sharing Enable                                     */
      __IOM uint32_t T4nFRCS    : 2;            /*!< [21..20] TIMER4n Force Input Selection                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t T4nFRCEN   : 1;            /*!< [23..23] TIMER4n Output Force Level Enable                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER4n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER4n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER4n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER4n A Data bits. The range is 0x0000 to 0xFFFF                */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER4n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER4n B Data bits. The range is 0x0000 to 0xFFFF                */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000010) TIMER4n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER4n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000014) TIMER4n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER4n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000018) TIMER4n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER4n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x0000001C) TIMER4n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLA       : 1;            /*!< [0..0] Configure TnOUTA Output When Disable                               */
      __IOM uint32_t LVLB       : 1;            /*!< [1..1] Configure TnOUTB Output When Disable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nAOE     : 1;            /*!< [4..4] TnOUTA Output Enable                                               */
      __IOM uint32_t T4nBOE     : 1;            /*!< [5..5] TnOUTB Output Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t POLA       : 1;            /*!< [8..8] TnOUTA Output Polarity Selection                                   */
      __IOM uint32_t POLB       : 1;            /*!< [9..9] TnOUTB Output Polarity Selection                                   */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000020) TIMER4n Output Delay Data Register                         */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER4n Output Delay Data                                          */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000024) TIMER4n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T4nAMIEN   : 2;            /*!< [1..0] TIMER4n A Match Interrupt Enable                                   */
      __IOM uint32_t T4nBMIEN   : 2;            /*!< [3..2] TIMER4n B Match Interrupt Enable                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMIEN   : 1;            /*!< [8..8] TIMER4n Period Match Interrupt Enable                              */
      __IOM uint32_t T4nBTIEN   : 1;            /*!< [9..9] TIMER4n Bottom Interrupt Enable                                    */
      __IOM uint32_t T4nCIEN    : 1;            /*!< [10..10] TIMER4n Capture Interrupt Enable                                 */
      __IOM uint32_t T4nFRCIEN  : 1;            /*!< [11..11] TIMER4n Output Force Level Interrupt Enable                      */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x00000028) TIMER4n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T4nAMIFLAG : 1;            /*!< [0..0] TIMER4n A Match Interrupt Flag                                     */
      __IOM uint32_t T4nBMIFLAG : 1;            /*!< [1..1] TIMER4n B Match Interrupt Flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nPMIFLAG : 1;            /*!< [4..4] TIMER4n Period Match Interrupt Flag                                */
      __IOM uint32_t T4nBTIFLAG : 1;            /*!< [5..5] TIMER4n Bottom Interrupt Flag                                      */
      __IOM uint32_t T4nCIFLAG  : 1;            /*!< [6..6] TIMER4n Capture Interrupt Flag                                     */
      __IOM uint32_t T4nFRCIFLAG : 1;           /*!< [7..7] TIMER4n Output Force Level Interrupt Flag                          */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x0000002C) TIMER4n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T4nAMTG    : 2;            /*!< [1..0] Select TIMER4n A Match for ADC Trigger Signal Generator.           */
      __IOM uint32_t T4nBMTG    : 2;            /*!< [3..2] Select TIMER4n B Match for ADC Trigger Signal Generator.           */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMTG    : 1;            /*!< [8..8] Select TIMER4n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T4nBTTG    : 1;            /*!< [9..9] Select TIMER4n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
} TIMER41_Type;                                 /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER42                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 42 (TIMER42)
  */

typedef struct {                                /*!< (@ 0x40002800) TIMER42 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER4n Control Register                                   */
    
    struct {
      __IOM uint32_t T4nCLR     : 1;            /*!< [0..0] TIMER4n Counter and Prescaler Clear                                */
      __IOM uint32_t T4nPAU     : 1;            /*!< [1..1] TIMER4n Counter Temporary Pause Control                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nINPOL   : 2;            /*!< [5..4] TIMER4n Capture/'Force level' Polarity Selection                   */
      __IOM uint32_t UPDT       : 2;            /*!< [7..6] Data Reload Time Selection                                         */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t T4nOPAIR   : 1;            /*!< [10..10] TIMER4n Output Pair Selection                                    */
      __IOM uint32_t T4nECE     : 1;            /*!< [11..11] TIMER4n External Clock Edge Selection                            */
      __IOM uint32_t T4nMS      : 2;            /*!< [13..12] TIMER4n Operation Mode Selection                                 */
      __IOM uint32_t T4nCLK     : 1;            /*!< [14..14] TIMER4n Clock Selection                                          */
      __IOM uint32_t T4nEN      : 1;            /*!< [15..15] TIMER4n Operation Enable                                         */
      __IOM uint32_t CNTSH      : 2;            /*!< [17..16] Timer Counter Sharing Selection                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTSHEN    : 1;            /*!< [19..19] Timer Counter Sharing Enable                                     */
      __IOM uint32_t T4nFRCS    : 2;            /*!< [21..20] TIMER4n Force Input Selection                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t T4nFRCEN   : 1;            /*!< [23..23] TIMER4n Output Force Level Enable                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER4n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER4n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER4n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER4n A Data bits. The range is 0x0000 to 0xFFFF                */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER4n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER4n B Data bits. The range is 0x0000 to 0xFFFF                */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000010) TIMER4n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER4n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000014) TIMER4n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER4n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000018) TIMER4n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER4n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x0000001C) TIMER4n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLA       : 1;            /*!< [0..0] Configure TnOUTA Output When Disable                               */
      __IOM uint32_t LVLB       : 1;            /*!< [1..1] Configure TnOUTB Output When Disable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nAOE     : 1;            /*!< [4..4] TnOUTA Output Enable                                               */
      __IOM uint32_t T4nBOE     : 1;            /*!< [5..5] TnOUTB Output Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t POLA       : 1;            /*!< [8..8] TnOUTA Output Polarity Selection                                   */
      __IOM uint32_t POLB       : 1;            /*!< [9..9] TnOUTB Output Polarity Selection                                   */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000020) TIMER4n Output Delay Data Register                         */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER4n Output Delay Data                                          */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000024) TIMER4n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T4nAMIEN   : 2;            /*!< [1..0] TIMER4n A Match Interrupt Enable                                   */
      __IOM uint32_t T4nBMIEN   : 2;            /*!< [3..2] TIMER4n B Match Interrupt Enable                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMIEN   : 1;            /*!< [8..8] TIMER4n Period Match Interrupt Enable                              */
      __IOM uint32_t T4nBTIEN   : 1;            /*!< [9..9] TIMER4n Bottom Interrupt Enable                                    */
      __IOM uint32_t T4nCIEN    : 1;            /*!< [10..10] TIMER4n Capture Interrupt Enable                                 */
      __IOM uint32_t T4nFRCIEN  : 1;            /*!< [11..11] TIMER4n Output Force Level Interrupt Enable                      */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x00000028) TIMER4n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T4nAMIFLAG : 1;            /*!< [0..0] TIMER4n A Match Interrupt Flag                                     */
      __IOM uint32_t T4nBMIFLAG : 1;            /*!< [1..1] TIMER4n B Match Interrupt Flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nPMIFLAG : 1;            /*!< [4..4] TIMER4n Period Match Interrupt Flag                                */
      __IOM uint32_t T4nBTIFLAG : 1;            /*!< [5..5] TIMER4n Bottom Interrupt Flag                                      */
      __IOM uint32_t T4nCIFLAG  : 1;            /*!< [6..6] TIMER4n Capture Interrupt Flag                                     */
      __IOM uint32_t T4nFRCIFLAG : 1;           /*!< [7..7] TIMER4n Output Force Level Interrupt Flag                          */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x0000002C) TIMER4n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T4nAMTG    : 2;            /*!< [1..0] Select TIMER4n A Match for ADC Trigger Signal Generator.           */
      __IOM uint32_t T4nBMTG    : 2;            /*!< [3..2] Select TIMER4n B Match for ADC Trigger Signal Generator.           */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMTG    : 1;            /*!< [8..8] Select TIMER4n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T4nBTTG    : 1;            /*!< [9..9] Select TIMER4n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
} TIMER42_Type;                                 /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER43                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 43 (TIMER43)
  */

typedef struct {                                /*!< (@ 0x40002880) TIMER43 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER4n Control Register                                   */
    
    struct {
      __IOM uint32_t T4nCLR     : 1;            /*!< [0..0] TIMER4n Counter and Prescaler Clear                                */
      __IOM uint32_t T4nPAU     : 1;            /*!< [1..1] TIMER4n Counter Temporary Pause Control                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nINPOL   : 2;            /*!< [5..4] TIMER4n Capture/'Force level' Polarity Selection                   */
      __IOM uint32_t UPDT       : 2;            /*!< [7..6] Data Reload Time Selection                                         */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t T4nOPAIR   : 1;            /*!< [10..10] TIMER4n Output Pair Selection                                    */
      __IOM uint32_t T4nECE     : 1;            /*!< [11..11] TIMER4n External Clock Edge Selection                            */
      __IOM uint32_t T4nMS      : 2;            /*!< [13..12] TIMER4n Operation Mode Selection                                 */
      __IOM uint32_t T4nCLK     : 1;            /*!< [14..14] TIMER4n Clock Selection                                          */
      __IOM uint32_t T4nEN      : 1;            /*!< [15..15] TIMER4n Operation Enable                                         */
      __IOM uint32_t CNTSH      : 2;            /*!< [17..16] Timer Counter Sharing Selection                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CNTSHEN    : 1;            /*!< [19..19] Timer Counter Sharing Enable                                     */
      __IOM uint32_t T4nFRCS    : 2;            /*!< [21..20] TIMER4n Force Input Selection                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t T4nFRCEN   : 1;            /*!< [23..23] TIMER4n Output Force Level Enable                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER4n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER4n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER4n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER4n A Data bits. The range is 0x0000 to 0xFFFF                */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER4n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER4n B Data bits. The range is 0x0000 to 0xFFFF                */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000010) TIMER4n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER4n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000014) TIMER4n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER4n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000018) TIMER4n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER4n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x0000001C) TIMER4n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLA       : 1;            /*!< [0..0] Configure TnOUTA Output When Disable                               */
      __IOM uint32_t LVLB       : 1;            /*!< [1..1] Configure TnOUTB Output When Disable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nAOE     : 1;            /*!< [4..4] TnOUTA Output Enable                                               */
      __IOM uint32_t T4nBOE     : 1;            /*!< [5..5] TnOUTB Output Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t POLA       : 1;            /*!< [8..8] TnOUTA Output Polarity Selection                                   */
      __IOM uint32_t POLB       : 1;            /*!< [9..9] TnOUTB Output Polarity Selection                                   */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000020) TIMER4n Output Delay Data Register                         */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER4n Output Delay Data                                          */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000024) TIMER4n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T4nAMIEN   : 2;            /*!< [1..0] TIMER4n A Match Interrupt Enable                                   */
      __IOM uint32_t T4nBMIEN   : 2;            /*!< [3..2] TIMER4n B Match Interrupt Enable                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMIEN   : 1;            /*!< [8..8] TIMER4n Period Match Interrupt Enable                              */
      __IOM uint32_t T4nBTIEN   : 1;            /*!< [9..9] TIMER4n Bottom Interrupt Enable                                    */
      __IOM uint32_t T4nCIEN    : 1;            /*!< [10..10] TIMER4n Capture Interrupt Enable                                 */
      __IOM uint32_t T4nFRCIEN  : 1;            /*!< [11..11] TIMER4n Output Force Level Interrupt Enable                      */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x00000028) TIMER4n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T4nAMIFLAG : 1;            /*!< [0..0] TIMER4n A Match Interrupt Flag                                     */
      __IOM uint32_t T4nBMIFLAG : 1;            /*!< [1..1] TIMER4n B Match Interrupt Flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t T4nPMIFLAG : 1;            /*!< [4..4] TIMER4n Period Match Interrupt Flag                                */
      __IOM uint32_t T4nBTIFLAG : 1;            /*!< [5..5] TIMER4n Bottom Interrupt Flag                                      */
      __IOM uint32_t T4nCIFLAG  : 1;            /*!< [6..6] TIMER4n Capture Interrupt Flag                                     */
      __IOM uint32_t T4nFRCIFLAG : 1;           /*!< [7..7] TIMER4n Output Force Level Interrupt Flag                          */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x0000002C) TIMER4n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T4nAMTG    : 2;            /*!< [1..0] Select TIMER4n A Match for ADC Trigger Signal Generator.           */
      __IOM uint32_t T4nBMTG    : 2;            /*!< [3..2] Select TIMER4n B Match for ADC Trigger Signal Generator.           */
      __IM  uint32_t            : 4;
      __IOM uint32_t T4nPMTG    : 1;            /*!< [8..8] Select TIMER4n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T4nBTTG    : 1;            /*!< [9..9] Select TIMER4n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
} TIMER43_Type;                                 /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER5n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 5n (TIMER5n)
  */

typedef struct {                                /*!< (@ 0x52000000) TIMER5n Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER5n Control Register                                   */
    
    struct {
      __IOM uint32_t T5nCLR     : 1;            /*!< [0..0] TIMER5n Counter and Prescaler Clear                                */
      __IOM uint32_t T5nCLIFLAG : 1;            /*!< [1..1] TIMER5n Counter Clear Input Interrupt Flag                         */
      __IOM uint32_t T5nCIFLAG  : 1;            /*!< [2..2] TIMER5n Capture Interrupt Flag                                     */
      __IOM uint32_t T5nMIFLAG  : 1;            /*!< [3..3] TIMER5n Match Interrupt Flag                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t T5nCLIEN   : 1;            /*!< [5..5] TIMER5n Counter Clear Interrupt Enable                             */
      __IOM uint32_t T5nCIEN    : 1;            /*!< [6..6] TIMER5n Capture Interrupt Enable                                   */
      __IOM uint32_t T5nMIEN    : 1;            /*!< [7..7] TIMER5n Match Interrupt Enable                                     */
      __IOM uint32_t T5nPAU     : 1;            /*!< [8..8] TIMER5n Counter Temporary Pause Control                            */
      __IOM uint32_t T5nOPOL    : 1;            /*!< [9..9] T5nOUT Polarity Selection                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t T5nECE     : 1;            /*!< [11..11] TIMER5n External Clock Edge Selection                            */
      __IOM uint32_t T5nMS      : 2;            /*!< [13..12] TIMER5n Operation Mode Selection                                 */
      __IOM uint32_t T5nCLK     : 1;            /*!< [14..14] TIMER5n Clock Selection                                          */
      __IOM uint32_t T5nEN      : 1;            /*!< [15..15] TIMER5n Operation Enable                                         */
      __IOM uint32_t T5nINPOL   : 2;            /*!< [17..16] TIMER5n Capture/'Counter Clear Input' Polarity Selection         */
      __IOM uint32_t T5nINSEL   : 2;            /*!< [19..18] TIMER5n Capture Signal Selection                                 */
      __IOM uint32_t T5nCLEN    : 1;            /*!< [20..20] TIMER5n Counter Clear Input Enable                               */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER5n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER5n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER5n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER5n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER5n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER5n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER5n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 8;            /*!< [7..0] TIMER5n Prescaler Data                                             */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER5n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER5n Counter                                                   */
    } CNT_b;
  } ;
} TIMER5n_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER50                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 50 (TIMER50)
  */

typedef struct {                                /*!< (@ 0x40002B00) TIMER50 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER5n Control Register                                   */
    
    struct {
      __IOM uint32_t T5nCLR     : 1;            /*!< [0..0] TIMER5n Counter and Prescaler Clear                                */
      __IOM uint32_t T5nCLIFLAG : 1;            /*!< [1..1] TIMER5n Counter Clear Input Interrupt Flag                         */
      __IOM uint32_t T5nCIFLAG  : 1;            /*!< [2..2] TIMER5n Capture Interrupt Flag                                     */
      __IOM uint32_t T5nMIFLAG  : 1;            /*!< [3..3] TIMER5n Match Interrupt Flag                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t T5nCLIEN   : 1;            /*!< [5..5] TIMER5n Counter Clear Interrupt Enable                             */
      __IOM uint32_t T5nCIEN    : 1;            /*!< [6..6] TIMER5n Capture Interrupt Enable                                   */
      __IOM uint32_t T5nMIEN    : 1;            /*!< [7..7] TIMER5n Match Interrupt Enable                                     */
      __IOM uint32_t T5nPAU     : 1;            /*!< [8..8] TIMER5n Counter Temporary Pause Control                            */
      __IOM uint32_t T5nOPOL    : 1;            /*!< [9..9] T5nOUT Polarity Selection                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t T5nECE     : 1;            /*!< [11..11] TIMER5n External Clock Edge Selection                            */
      __IOM uint32_t T5nMS      : 2;            /*!< [13..12] TIMER5n Operation Mode Selection                                 */
      __IOM uint32_t T5nCLK     : 1;            /*!< [14..14] TIMER5n Clock Selection                                          */
      __IOM uint32_t T5nEN      : 1;            /*!< [15..15] TIMER5n Operation Enable                                         */
      __IOM uint32_t T5nINPOL   : 2;            /*!< [17..16] TIMER5n Capture/'Counter Clear Input' Polarity Selection         */
      __IOM uint32_t T5nINSEL   : 2;            /*!< [19..18] TIMER5n Capture Signal Selection                                 */
      __IOM uint32_t T5nCLEN    : 1;            /*!< [20..20] TIMER5n Counter Clear Input Enable                               */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER5n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER5n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER5n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER5n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER5n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER5n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER5n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 8;            /*!< [7..0] TIMER5n Prescaler Data                                             */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER5n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER5n Counter                                                   */
    } CNT_b;
  } ;
} TIMER50_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief High Speed 12 Bit A/D Converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40003000) ADC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) A/D Converter Control Register                             */
    
    struct {
      __IOM uint32_t ADST       : 1;            /*!< [0..0] ADC Conversion Start                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t MDSEL      : 2;            /*!< [4..3] ADC Conversion Mode Selection                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADRDY      : 1;            /*!< [7..7] ADC Conversion Ready                                               */
      __IOM uint32_t ETRGP      : 2;            /*!< [9..8] ADC External Trigger Input Polarity Selection                      */
      __IOM uint32_t TRIG       : 3;            /*!< [12..10] ADC Trigger Signal Selection                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADCEN      : 1;            /*!< [15..15] ADC Module Enable                                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t OVSCR;                       /*!< (@ 0x00000004) A/D Converter Oversampling Control Register                */
    
    struct {
      __IOM uint32_t OVSHT      : 4;            /*!< [3..0] Oversampling Data Shift                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t OVSMPR     : 3;            /*!< [7..5] Oversampling Ratio Selection                                       */
      __IM  uint32_t            : 7;
      __IOM uint32_t OVSMPEN    : 1;            /*!< [15..15] Oversampling Enable                                              */
    } OVSCR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000008) A/D Converter Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t EOSIFLAG   : 1;            /*!< [0..0] ADC End of Sequence Interrupt Flag                                 */
      __IOM uint32_t EOCIFLAG   : 1;            /*!< [1..1] ADC End of Conversion Interrupt Flag                               */
      __IOM uint32_t OVRUNIFLAG : 1;            /*!< [2..2] ADC Data Overrun Interrupt Flag                                    */
      __IOM uint32_t STBIFLAG   : 1;            /*!< [3..3] ADC Stabilization Interrupt Flag                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t EOSIEN     : 1;            /*!< [8..8] ADC End of Sequence Interrupt Enable                               */
      __IOM uint32_t EOCIEN     : 1;            /*!< [9..9] ADC End of Conversion Interrupt Enable                             */
      __IOM uint32_t OVRUNIEN   : 1;            /*!< [10..10] ADC Data Overrun Interrupt Enable                                */
      __IOM uint32_t STBIEN     : 1;            /*!< [11..11] ADC Stabilization Interrupt Enable                               */
      __IM  uint32_t            : 4;
      __IM  uint32_t LASTCH     : 5;            /*!< [20..16] ADC Last Conversion Channel Numbe                                */
    } IESR_b;
  } ;
  
  union {
    __IM  uint32_t DR;                          /*!< (@ 0x0000000C) A/D Converter Data Register                                */
    
    struct {
      __IM  uint32_t ADDATA     : 16;           /*!< [15..0] A/D Converter Result Data                                         */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) A/D Converter Prescaler Data Register                      */
    
    struct {
      __IOM uint32_t PRED       : 4;            /*!< [3..0] A/D Converter Prescaler Data                                       */
    } PREDR_b;
  } ;
  
  union {
    __IOM uint32_t SAMR;                        /*!< (@ 0x00000014) A/D Converter Sampling Time Register                       */
    
    struct {
      __IOM uint32_t SAMCK      : 5;            /*!< [4..0] Sampling Cycles for Sample/Hold Circuit                            */
    } SAMR_b;
  } ;
  
  union {
    __IOM uint32_t CHSELR;                      /*!< (@ 0x00000018) A/D Converter Channel Selection Register                   */
    
    struct {
      __IOM uint32_t AN0        : 1;            /*!< [0..0] AN0 Channel Selection                                              */
      __IOM uint32_t AN1        : 1;            /*!< [1..1] AN1 Channel Selection                                              */
      __IOM uint32_t AN2        : 1;            /*!< [2..2] AN2 Channel Selection                                              */
      __IOM uint32_t AN3        : 1;            /*!< [3..3] AN3 Channel Selection                                              */
      __IOM uint32_t AN4        : 1;            /*!< [4..4] AN4 Channel Selection                                              */
      __IOM uint32_t AN5        : 1;            /*!< [5..5] AN5 Channel Selection                                              */
      __IOM uint32_t AN6        : 1;            /*!< [6..6] AN6 Channel Selection                                              */
      __IOM uint32_t AN7        : 1;            /*!< [7..7] AN7 Channel Selection                                              */
      __IOM uint32_t AN8        : 1;            /*!< [8..8] AN8 Channel Selection                                              */
      __IOM uint32_t AN9        : 1;            /*!< [9..9] AN9 Channel Selection                                              */
      __IOM uint32_t AN10       : 1;            /*!< [10..10] AN1 Channel Selection                                            */
      __IOM uint32_t AN11       : 1;            /*!< [11..11] AN11 Channel Selection                                           */
      __IOM uint32_t AN12       : 1;            /*!< [12..12] AN12 Channel Selection                                           */
      __IOM uint32_t AN13       : 1;            /*!< [13..13] AN13 Channel Selection                                           */
      __IOM uint32_t AN14       : 1;            /*!< [14..14] AN14 Channel Selection                                           */
      __IOM uint32_t AN15       : 1;            /*!< [15..15] AN15 Channel Selection                                           */
      __IOM uint32_t AN16       : 1;            /*!< [16..16] AN16(AVSS) Channel Selection                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t AN18       : 1;            /*!< [18..18] AN18(AVDD) Channel Selection                                     */
      __IOM uint32_t AN19       : 1;            /*!< [19..19] AN19(BGR) Channel Selection                                      */
    } CHSELR_b;
  } ;
} ADC_Type;                                     /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           CMPn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator n (CMPn)
  */

typedef struct {                                /*!< (@ 0x53000000) CMPn Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Comparator n Control Register                              */
    
    struct {
      __IOM uint32_t NFCKn      : 3;            /*!< [2..0] Comparator n Noise Filter Sampling Clock Selection                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMPnPOL    : 2;            /*!< [5..4] Comparator n Interrupt Polarity Selection                          */
      __IOM uint32_t CMPnSPD    : 1;            /*!< [6..6] Comparator n Speed Selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t HYSnEN     : 1;            /*!< [8..8] Comparator n Hysteresis Enable                                     */
      __IOM uint32_t CMPnPOS    : 3;            /*!< [11..9] Comparator n Positive Input Selection                             */
      __IOM uint32_t CMPnNEG    : 3;            /*!< [14..12] Comparator n Negative Input Selection                            */
      __IOM uint32_t CMPnEN     : 1;            /*!< [15..15] Comparator n Enable                                              */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) Comparator n Status Register                               */
    
    struct {
      __IM  uint32_t CMPnST     : 1;            /*!< [0..0] Comparator n Output Status                                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMPnIFLAG  : 1;            /*!< [4..4] Comparator n Interrupt Flag                                        */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t RCR;                         /*!< (@ 0x00000008) Comparator n Reference Control Register                    */
    
    struct {
      __IOM uint32_t CMPnREF    : 3;            /*!< [2..0] Comparator n Reference Voltage Level Selection                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t REFnEN     : 1;            /*!< [7..7] Comparator n Internal Reference Enable                             */
    } RCR_b;
  } ;
} CMPn_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator 0 (CMP0)
  */

typedef struct {                                /*!< (@ 0x40005600) CMP0 Structure                                             */
  
  union {
    union {
      __IOM uint32_t CR;                        /*!< (@ 0x00000000) Comparator n Control Register                              */
      
      struct {
        __IOM uint32_t NFCKn    : 3;            /*!< [2..0] Comparator n Noise Filter Sampling Clock Selection                 */
        __IM  uint32_t          : 1;
        __IOM uint32_t CMPnPOL  : 2;            /*!< [5..4] Comparator n Interrupt Polarity Selection                          */
        __IOM uint32_t CMPnSPD  : 1;            /*!< [6..6] Comparator n Speed Selection                                       */
        __IM  uint32_t          : 1;
        __IOM uint32_t HYSnEN   : 1;            /*!< [8..8] Comparator n Hysteresis Enable                                     */
        __IOM uint32_t CMPnPOS  : 3;            /*!< [11..9] Comparator n Positive Input Selection                             */
        __IOM uint32_t CMPnNEG  : 3;            /*!< [14..12] Comparator n Negative Input Selection                            */
        __IOM uint32_t CMPnEN   : 1;            /*!< [15..15] Comparator n Enable                                              */
      } CR_b;
    } ;
    
    union {
      __IOM uint32_t CMP0_CR;                   /*!< (@ 0x00000000) Comparator 0 Control Register                              */
      
      struct {
        __IOM uint32_t NFCKn    : 3;            /*!< [2..0] Comparator n Noise Filter Sampling Clock Selection                 */
        __IM  uint32_t          : 1;
        __IOM uint32_t CMPnPOL  : 2;            /*!< [5..4] Comparator n Interrupt Polarity Selection                          */
        __IOM uint32_t CMPnSPD  : 1;            /*!< [6..6] Comparator n Speed Selection                                       */
        __IM  uint32_t          : 1;
        __IOM uint32_t HYSnEN   : 1;            /*!< [8..8] Comparator n Hysteresis Enable                                     */
        __IOM uint32_t CMPnPOS  : 3;            /*!< [11..9] Comparator n Positive Input Selection                             */
        __IOM uint32_t CMPnNEG  : 3;            /*!< [14..12] Comparator n Negative Input Selection                            */
        __IOM uint32_t CMPnEN   : 1;            /*!< [15..15] Comparator n Enable                                              */
      } CMP0_CR_b;
    } ;
  };
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) Comparator n Status Register                               */
    
    struct {
      __IM  uint32_t CMPnST     : 1;            /*!< [0..0] Comparator n Output Status                                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMPnIFLAG  : 1;            /*!< [4..4] Comparator n Interrupt Flag                                        */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t RCR;                         /*!< (@ 0x00000008) Comparator n Reference Control Register                    */
    
    struct {
      __IOM uint32_t CMPnREF    : 3;            /*!< [2..0] Comparator n Reference Voltage Level Selection                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t REFnEN     : 1;            /*!< [7..7] Comparator n Internal Reference Enable                             */
    } RCR_b;
  } ;
} CMP0_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           CMP1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator 1 (CMP1)
  */

typedef struct {                                /*!< (@ 0x40005680) CMP1 Structure                                             */
  
  union {
    union {
      __IOM uint32_t CR;                        /*!< (@ 0x00000000) Comparator n Control Register                              */
      
      struct {
        __IOM uint32_t NFCKn    : 3;            /*!< [2..0] Comparator n Noise Filter Sampling Clock Selection                 */
        __IM  uint32_t          : 1;
        __IOM uint32_t CMPnPOL  : 2;            /*!< [5..4] Comparator n Interrupt Polarity Selection                          */
        __IOM uint32_t CMPnSPD  : 1;            /*!< [6..6] Comparator n Speed Selection                                       */
        __IM  uint32_t          : 1;
        __IOM uint32_t HYSnEN   : 1;            /*!< [8..8] Comparator n Hysteresis Enable                                     */
        __IOM uint32_t CMPnPOS  : 3;            /*!< [11..9] Comparator n Positive Input Selection                             */
        __IOM uint32_t CMPnNEG  : 3;            /*!< [14..12] Comparator n Negative Input Selection                            */
        __IOM uint32_t CMPnEN   : 1;            /*!< [15..15] Comparator n Enable                                              */
      } CR_b;
    } ;
    
    union {
      __IOM uint32_t CMP1_CR;                   /*!< (@ 0x00000000) Comparator 1 Control Register                              */
      
      struct {
        __IOM uint32_t NFCKn    : 3;            /*!< [2..0] Comparator n Noise Filter Sampling Clock Selection                 */
        __IM  uint32_t          : 1;
        __IOM uint32_t CMPnPOL  : 2;            /*!< [5..4] Comparator n Interrupt Polarity Selection                          */
        __IOM uint32_t CMPnSPD  : 1;            /*!< [6..6] Comparator n Speed Selection                                       */
        __IM  uint32_t          : 1;
        __IOM uint32_t HYSnEN   : 1;            /*!< [8..8] Comparator n Hysteresis Enable                                     */
        __IOM uint32_t CMPnPOS  : 3;            /*!< [11..9] Comparator n Positive Input Selection                             */
        __IOM uint32_t CMPnNEG  : 3;            /*!< [14..12] Comparator n Negative Input Selection                            */
        __IOM uint32_t CMPnEN   : 1;            /*!< [15..15] Comparator n Enable                                              */
      } CMP1_CR_b;
    } ;
  };
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) Comparator n Status Register                               */
    
    struct {
      __IM  uint32_t CMPnST     : 1;            /*!< [0..0] Comparator n Output Status                                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMPnIFLAG  : 1;            /*!< [4..4] Comparator n Interrupt Flag                                        */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t RCR;                         /*!< (@ 0x00000008) Comparator n Reference Control Register                    */
    
    struct {
      __IOM uint32_t CMPnREF    : 3;            /*!< [2..0] Comparator n Reference Voltage Level Selection                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t REFnEN     : 1;            /*!< [7..7] Comparator n Internal Reference Enable                             */
    } RCR_b;
  } ;
} CMP1_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 1n (UART + SPI) (USART1n)
  */

typedef struct {                                /*!< (@ 0x54000000) USART1n Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode
                                                     (only UART mode)                                                          */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI port function exchange control bit (only SPI mode)             */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS pin operation (only SPI mode)             */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK output                                                                */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] 1-wire Half-Duplex Communication on Asynchronous Mode
                                                     or Loop Back for Test on SPI and Asynchronous Mode                        */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI or Synchronous mode and
                                                     controls the direction of SCK pin                                         */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block by supplying                                */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) USART1n Control Register 3                                 */
    
    struct {
      __IOM uint32_t BRDIVn     : 2;            /*!< [1..0] Baud Rate Clock Dividing Selection for Receive Time Out
                                                     bits (only asynchronous mode)                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOnIFLAG  : 1;            /*!< [3..3] Receive Time Out Interrupt Flag                                    */
      __IOM uint32_t RCDnIFLAG  : 1;            /*!< [4..4] Receive Character detection Interrupt Flag                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOIEn     : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IOM uint32_t RCDIEn     : 1;            /*!< [7..7] Receive Character Detection Interrupt Enable                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOENn     : 1;            /*!< [9..9] Receive Time Out Function Enable                                   */
      __IOM uint32_t RCDENn     : 1;            /*!< [10..10] Receive Character Detection Function Enable                      */
    } CR3_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] Parity Error                                                       */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] Frame Error                                                        */
      __IOM uint32_t DORn       : 1;            /*!< [2..2] Data Overrun                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IOM uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000014) USART1n Receive Data Register                              */
    
    struct {
      __IM  uint32_t RDATA      : 9;            /*!< [8..0] Receive Data                                                       */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x00000018) USART1n Transmit Data Register                             */
    
    struct {
      __IOM uint32_t TDATA      : 9;            /*!< [8..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x0000001C) USART1n Receive Time Out Data Register                     */
    
    struct {
      __IOM uint32_t RTOD       : 8;            /*!< [7..0] USART1n Receive Time Out Data                                      */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t RCDR;                        /*!< (@ 0x00000020) USART1n Receive Character Detection Data Register          */
    
    struct {
      __IOM uint32_t RCDD       : 8;            /*!< [7..0] USART1n Receive Character Detection Data                           */
    } RCDR_b;
  } ;
} USART1n_Type;                                 /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 10 (UART + SPI) (USART10)
  */

typedef struct {                                /*!< (@ 0x40003800) USART10 Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode
                                                     (only UART mode)                                                          */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI port function exchange control bit (only SPI mode)             */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS pin operation (only SPI mode)             */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK output                                                                */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] 1-wire Half-Duplex Communication on Asynchronous Mode
                                                     or Loop Back for Test on SPI and Asynchronous Mode                        */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI or Synchronous mode and
                                                     controls the direction of SCK pin                                         */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block by supplying                                */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) USART1n Control Register 3                                 */
    
    struct {
      __IOM uint32_t BRDIVn     : 2;            /*!< [1..0] Baud Rate Clock Dividing Selection for Receive Time Out
                                                     bits (only asynchronous mode)                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOnIFLAG  : 1;            /*!< [3..3] Receive Time Out Interrupt Flag                                    */
      __IOM uint32_t RCDnIFLAG  : 1;            /*!< [4..4] Receive Character detection Interrupt Flag                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOIEn     : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IOM uint32_t RCDIEn     : 1;            /*!< [7..7] Receive Character Detection Interrupt Enable                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOENn     : 1;            /*!< [9..9] Receive Time Out Function Enable                                   */
      __IOM uint32_t RCDENn     : 1;            /*!< [10..10] Receive Character Detection Function Enable                      */
    } CR3_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] Parity Error                                                       */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] Frame Error                                                        */
      __IOM uint32_t DORn       : 1;            /*!< [2..2] Data Overrun                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IOM uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000014) USART1n Receive Data Register                              */
    
    struct {
      __IM  uint32_t RDATA      : 9;            /*!< [8..0] Receive Data                                                       */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x00000018) USART1n Transmit Data Register                             */
    
    struct {
      __IOM uint32_t TDATA      : 9;            /*!< [8..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x0000001C) USART1n Receive Time Out Data Register                     */
    
    struct {
      __IOM uint32_t RTOD       : 8;            /*!< [7..0] USART1n Receive Time Out Data                                      */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t RCDR;                        /*!< (@ 0x00000020) USART1n Receive Character Detection Data Register          */
    
    struct {
      __IOM uint32_t RCDD       : 8;            /*!< [7..0] USART1n Receive Character Detection Data                           */
    } RCDR_b;
  } ;
} USART10_Type;                                 /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART n (UARTn)
  */

typedef struct {                                /*!< (@ 0x55000000) UARTn Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Holding Empty                                             */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Empty                                                     */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value. Baud rate = fUARTnCLK/(16
                                                     x BDR[15:0] x 2)                                                          */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi sampling enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UARTn_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART 0 (UART0)
  */

typedef struct {                                /*!< (@ 0x40004000) UART0 Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Holding Empty                                             */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Empty                                                     */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value. Baud rate = fUARTnCLK/(16
                                                     x BDR[15:0] x 2)                                                          */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi sampling enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UART0_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART 1 (UART1)
  */

typedef struct {                                /*!< (@ 0x40004100) UART1 Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Holding Empty                                             */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Empty                                                     */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value. Baud rate = fUARTnCLK/(16
                                                     x BDR[15:0] x 2)                                                          */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi sampling enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UART1_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          LPUART                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Low Power UART (LPUART)
  */

typedef struct {                                /*!< (@ 0x40005C00) LPUART Structure                                           */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) LPUART Control Register 1                                  */
    
    struct {
      __IOM uint32_t LPUEN      : 1;            /*!< [0..0] Low Power UART Enable                                              */
      __IOM uint32_t WAKEN      : 1;            /*!< [1..1] Wake-Up Function bit in Deep Sleep Mode                            */
      __IOM uint32_t RXE        : 1;            /*!< [2..2] Enable the receiver unit.                                          */
      __IOM uint32_t TXE        : 1;            /*!< [3..3] Enable the transmitter unit.                                       */
      __IOM uint32_t HDCOM      : 1;            /*!< [4..4] 1-wire Half-Duplex Communication                                   */
      __IOM uint32_t OVRS       : 2;            /*!< [6..5] Oversampling Selection                                             */
      __IOM uint32_t STOPB      : 1;            /*!< [7..7] Stop                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLEN       : 2;            /*!< [10..9] Data Length Selection                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t PSEL       : 1;            /*!< [12..12] Parity Selection                                                 */
      __IOM uint32_t STKPEN     : 1;            /*!< [13..13] Stick Parity Enable                                              */
      __IOM uint32_t PEN        : 1;            /*!< [14..14] Parity Enable                                                    */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) LPUART Control Register 2                                  */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOEN      : 1;            /*!< [3..3] Receive Time Out Function Enable                                   */
      __IOM uint32_t RCDEN      : 1;            /*!< [4..4] Receive Character Detection Function Enable                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t DEPEN      : 1;            /*!< [6..6] DE Pin Function Enable                                             */
      __IOM uint32_t DEPOL      : 1;            /*!< [7..7] DE Pin Polarity Selection                                          */
      __IOM uint32_t DEALFT     : 5;            /*!< [12..8] DE Pin Active Level Finish Time                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DEALST     : 5;            /*!< [20..16] DE Pin Active Level Start Time                                   */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000010) LPUART Interrupt Enable Register                           */
    
    struct {
      __IOM uint32_t RXCIEN     : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Enable                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIEN     : 1;            /*!< [2..2] Transmit Complete Interrupt Enable                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBDIEN     : 1;            /*!< [4..4] Start Bit Detection Interrupt Enable bit in Deep Sleep
                                                     Mode                                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOIEN     : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IOM uint32_t RCDIEN     : 1;            /*!< [7..7] Receive Character Detection Interrupt Enable                       */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t IFSR;                        /*!< (@ 0x00000014) LPUART Interrupt Flag and Status Register                  */
    
    struct {
      __IOM uint32_t RXCIFLAG   : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Flag                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIFLAG   : 1;            /*!< [2..2] Transmit Complete Interrupt Flag                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t SBDIFLAG   : 1;            /*!< [4..4] Start Bit Detection Interrupt Flag                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOIFLAG   : 1;            /*!< [6..6] Receive Time Out Interrupt Flag                                    */
      __IOM uint32_t RCDIFLAG   : 1;            /*!< [7..7] Receive Character detection Interrupt Flag                         */
      __IM  uint32_t            : 4;
      __IM  uint32_t RXBUSY     : 1;            /*!< [12..12] RXD Line Busy                                                    */
      __IOM uint32_t PE         : 1;            /*!< [13..13] Parity Error                                                     */
      __IOM uint32_t FE         : 1;            /*!< [14..14] Frame Error                                                      */
      __IOM uint32_t DOR        : 1;            /*!< [15..15] Data Overrun                                                     */
    } IFSR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000018) LPUART Receive Data Register                               */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] Receive Data                                                       */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000001C) LPUART Transmit Data Register                              */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) LPUART Baud Rate Data Register                             */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] These bits are used to generate baud rate                         */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BCMP;                        /*!< (@ 0x00000024) LPUART Baud Rate Compensation Register                     */
    
    struct {
      __IOM uint32_t BCMP0      : 1;            /*!< [0..0] Baud Rate Compensation 0                                           */
      __IOM uint32_t BCMP1      : 1;            /*!< [1..1] Baud Rate Compensation 1                                           */
      __IOM uint32_t BCMP2      : 1;            /*!< [2..2] Baud Rate Compensation 2                                           */
      __IOM uint32_t BCMP3      : 1;            /*!< [3..3] Baud Rate Compensation 3                                           */
      __IOM uint32_t BCMP4      : 1;            /*!< [4..4] Baud Rate Compensation 4                                           */
      __IOM uint32_t BCMP5      : 1;            /*!< [5..5] Baud Rate Compensation 5                                           */
      __IOM uint32_t BCMP6      : 1;            /*!< [6..6] Baud Rate Compensation 6                                           */
      __IOM uint32_t BCMP7      : 1;            /*!< [7..7] Baud Rate Compensation 7                                           */
      __IOM uint32_t BCMP8      : 1;            /*!< [8..8] Baud Rate Compensation 8                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t BCMPS      : 1;            /*!< [15..15] Baud Rate Compensation Sign                                      */
    } BCMP_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x00000028) LPUART Receive Time Out Data Register                      */
    
    struct {
      __IOM uint32_t RTOD       : 24;           /*!< [23..0] LPUART Receive Time Out Data                                      */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t RCDR;                        /*!< (@ 0x0000002C) LPUART Receive Character Detection Data Register           */
    
    struct {
      __IOM uint32_t RCDD       : 8;            /*!< [7..0] LPUART Receive Character Detection Data                            */
    } RCDR_b;
  } ;
  
  union {
    __IOM uint32_t DLYDR;                       /*!< (@ 0x00000030) LPUART Tx Delay Time Data Register                         */
    
    struct {
      __IOM uint32_t DLYD       : 8;            /*!< [7..0] LPUART Tx Delay Data                                               */
    } DLYDR_b;
  } ;
} LPUART_Type;                                  /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            SCn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SC n (SCI + UART) (SCn)
  */

typedef struct {                                /*!< (@ 0x56000000) SCn Structure                                              */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) SCn Control Register 1                                     */
    
    struct {
      __IOM uint32_t SCInEN     : 1;            /*!< [0..0] Smartcard Interface Block Enable                                   */
      __IOM uint32_t RTOENn     : 1;            /*!< [1..1] Receive Time Out Function Enable                                   */
      __IOM uint32_t RXEn       : 1;            /*!< [2..2] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [3..3] Enable the transmitter unit.                                       */
      __IOM uint32_t OVRSn      : 1;            /*!< [4..4] Oversampling Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t STOPBn     : 1;            /*!< [7..7] Stop bit length                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLENn      : 2;            /*!< [10..9] Data Length Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t PSELn      : 1;            /*!< [13..13] Parity Selection                                                 */
      __IOM uint32_t PENn       : 1;            /*!< [14..14] Parity Enable                                                    */
      __IOM uint32_t SCnMD      : 1;            /*!< [15..15] Smartcard Interface Mode Selection                               */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) SCn Control Register 2 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t SCnCLKG    : 4;            /*!< [3..0] This bit-field is used to generate smartcard clock                 */
      __IOM uint32_t SCnCLKEN   : 1;            /*!< [4..4] Smartcard Clock Generation Enable                                  */
      __IOM uint32_t SCnCLKLV   : 1;            /*!< [5..5] SCnCLK Pin Level Setting                                           */
      __IOM uint32_t SCnDATALV  : 1;            /*!< [6..6] SCnDATA Pin Level Setting                                          */
      __IOM uint32_t SCnRSTLV   : 1;            /*!< [7..7] SCnRST Pin Level Setting                                           */
      __IOM uint32_t SCnPWRLV   : 1;            /*!< [8..8] SCnPWR Pin Level Setting                                           */
      __IM  uint32_t SCnINST    : 1;            /*!< [9..9] SCnIN Pin Status                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DACTENn    : 1;            /*!< [13..13] Auto Deactivation Enable                                         */
      __IOM uint32_t WRENn      : 1;            /*!< [14..14] Auto Warm Reset Enable                                           */
      __IOM uint32_t ACTENn     : 1;            /*!< [15..15] Auto Activation Enable                                           */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) SCn Control Register 3 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t RXBLENn    : 8;            /*!< [7..0] Received Block Length                                              */
      __IOM uint32_t RXCNTENn   : 1;            /*!< [8..8] Received byte Count Enable                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t SCnINPOL   : 2;            /*!< [14..13] SCnIN Pin Input Polarity Selection                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLYRETRYn  : 1;            /*!< [16..16] Delay Time Before Retry Selection                                */
      __IOM uint32_t RETRYn     : 3;            /*!< [19..17] The number of retry. RETRYn[2:0]+1                               */
      __IOM uint32_t RETRYENn   : 1;            /*!< [20..20] Tx/Rx Error Signal Generation/Detection Retry Enable             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CONSELn    : 1;            /*!< [22..22] Convention Selection                                             */
      __IOM uint32_t ACONDETn   : 1;            /*!< [23..23] Auto Convention Detection                                        */
    } CR3_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000010) SCn Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t RXCIENn    : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Enable                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIENn    : 1;            /*!< [2..2] Transmit Complete Interrupt Enable                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIENn    : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IM  uint32_t            : 9;
      __IOM uint32_t BLEDIENn   : 1;            /*!< [16..16] Block Length Count End Interrupt Enable                          */
      __IOM uint32_t SCINIENn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Enable                            */
      __IOM uint32_t TRYERIENn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Enable                            */
      __IOM uint32_t CONEDIENn  : 1;            /*!< [19..19] Convention Detection End Interrupt Enable                        */
      __IOM uint32_t CONERIENn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Enable                      */
      __IOM uint32_t SEDIENn    : 1;            /*!< [21..21] Sequence End Interrupt Enable                                    */
      __IOM uint32_t SERIENn    : 1;            /*!< [22..22] Sequence Error Interrupt Enable                                  */
      __IOM uint32_t RSTAIENn   : 1;            /*!< [23..23] Reset Assertion Interrupt Enable                                 */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t IFSR;                        /*!< (@ 0x00000014) SCn Interrupt Flag and Status Register                     */
    
    struct {
      __IOM uint32_t RXCIFLAGn  : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Flag                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIFLAGn  : 1;            /*!< [2..2] Transmit Complete Interrupt Flag                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIFLAGn  : 1;            /*!< [6..6] Receive Time Out Interrupt Flag                                    */
      __IM  uint32_t            : 5;
      __IM  uint32_t RXBUSYn    : 1;            /*!< [12..12] RXD Line Busy                                                    */
      __IOM uint32_t PEn        : 1;            /*!< [13..13] Parity Error                                                     */
      __IOM uint32_t FEn        : 1;            /*!< [14..14] Frame Error                                                      */
      __IOM uint32_t DORn       : 1;            /*!< [15..15] Data Overrun                                                     */
      __IOM uint32_t BLEDIFGn   : 1;            /*!< [16..16] Block Length Count End Interrupt Flag                            */
      __IOM uint32_t SCINIFGn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Flag                              */
      __IOM uint32_t TRYERIFGn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Flag                              */
      __IOM uint32_t CONEDIFGn  : 1;            /*!< [19..19] Convention Detection End Interrupt Flag                          */
      __IOM uint32_t CONERIFGn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Flag                        */
      __IOM uint32_t SEDIFGn    : 1;            /*!< [21..21] Sequence End Interrupt Flag                                      */
      __IOM uint32_t SERIFGn    : 1;            /*!< [22..22] Sequence Error Interrupt Flag                                    */
      __IOM uint32_t RSTAIFGn   : 1;            /*!< [23..23] Reset Assertion Interrupt Flag                                   */
    } IFSR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000018) SCn Receive Data Register                                  */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] Receive Data                                                       */
      __IM  uint32_t PARB       : 1;            /*!< [8..8] Receive Parity                                                     */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000001C) SCn Transmit Data Register                                 */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) SCn Baud Rate Data Register                                */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] These bits are used to generate baud rate                         */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BCMP;                        /*!< (@ 0x00000024) SCn Baud Rate Compensation Register                        */
    
    struct {
      __IOM uint32_t BCMP0      : 1;            /*!< [0..0] Baud Rate Compensation 0                                           */
      __IOM uint32_t BCMP1      : 1;            /*!< [1..1] Baud Rate Compensation 1                                           */
      __IOM uint32_t BCMP2      : 1;            /*!< [2..2] Baud Rate Compensation 2                                           */
      __IOM uint32_t BCMP3      : 1;            /*!< [3..3] Baud Rate Compensation 3                                           */
      __IOM uint32_t BCMP4      : 1;            /*!< [4..4] Baud Rate Compensation 4                                           */
      __IOM uint32_t BCMP5      : 1;            /*!< [5..5] Baud Rate Compensation 5                                           */
      __IOM uint32_t BCMP6      : 1;            /*!< [6..6] Baud Rate Compensation 6                                           */
      __IOM uint32_t BCMP7      : 1;            /*!< [7..7] Baud Rate Compensation 7                                           */
      __IOM uint32_t BCMP8      : 1;            /*!< [8..8] Baud Rate Compensation 8                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t BCMPS      : 1;            /*!< [15..15] Baud Rate Compensation Sign                                      */
    } BCMP_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x00000028) SCn Receive Time Out Data Register                         */
    
    struct {
      __IOM uint32_t RTOD       : 24;           /*!< [23..0] SCn Receive Time Out Data                                         */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t EGTR;                        /*!< (@ 0x0000002C) SCn Tx Extra Guard Time Register                           */
    
    struct {
      __IOM uint32_t EGT        : 8;            /*!< [7..0] SCn Tx Extra Guard Time                                            */
    } EGTR_b;
  } ;
  
  union {
    __IOM uint32_t T3DR;                        /*!< (@ 0x00000030) SCn T3 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T3D        : 16;           /*!< [15..0] T3 Duration Data bits. T3D[15:0] + 1                              */
    } T3DR_b;
  } ;
  
  union {
    __IOM uint32_t T4DR;                        /*!< (@ 0x00000034) SCn T4 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T4D        : 16;           /*!< [15..0] T4 Duration Data bits. T4D[15:0] + 1                              */
    } T4DR_b;
  } ;
} SCn_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            SC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SC 0 (SCI + UART) (SC0)
  */

typedef struct {                                /*!< (@ 0x40005300) SC0 Structure                                              */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) SCn Control Register 1                                     */
    
    struct {
      __IOM uint32_t SCInEN     : 1;            /*!< [0..0] Smartcard Interface Block Enable                                   */
      __IOM uint32_t RTOENn     : 1;            /*!< [1..1] Receive Time Out Function Enable                                   */
      __IOM uint32_t RXEn       : 1;            /*!< [2..2] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [3..3] Enable the transmitter unit.                                       */
      __IOM uint32_t OVRSn      : 1;            /*!< [4..4] Oversampling Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t STOPBn     : 1;            /*!< [7..7] Stop bit length                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLENn      : 2;            /*!< [10..9] Data Length Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t PSELn      : 1;            /*!< [13..13] Parity Selection                                                 */
      __IOM uint32_t PENn       : 1;            /*!< [14..14] Parity Enable                                                    */
      __IOM uint32_t SCnMD      : 1;            /*!< [15..15] Smartcard Interface Mode Selection                               */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) SCn Control Register 2 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t SCnCLKG    : 4;            /*!< [3..0] This bit-field is used to generate smartcard clock                 */
      __IOM uint32_t SCnCLKEN   : 1;            /*!< [4..4] Smartcard Clock Generation Enable                                  */
      __IOM uint32_t SCnCLKLV   : 1;            /*!< [5..5] SCnCLK Pin Level Setting                                           */
      __IOM uint32_t SCnDATALV  : 1;            /*!< [6..6] SCnDATA Pin Level Setting                                          */
      __IOM uint32_t SCnRSTLV   : 1;            /*!< [7..7] SCnRST Pin Level Setting                                           */
      __IOM uint32_t SCnPWRLV   : 1;            /*!< [8..8] SCnPWR Pin Level Setting                                           */
      __IM  uint32_t SCnINST    : 1;            /*!< [9..9] SCnIN Pin Status                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DACTENn    : 1;            /*!< [13..13] Auto Deactivation Enable                                         */
      __IOM uint32_t WRENn      : 1;            /*!< [14..14] Auto Warm Reset Enable                                           */
      __IOM uint32_t ACTENn     : 1;            /*!< [15..15] Auto Activation Enable                                           */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) SCn Control Register 3 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t RXBLENn    : 8;            /*!< [7..0] Received Block Length                                              */
      __IOM uint32_t RXCNTENn   : 1;            /*!< [8..8] Received byte Count Enable                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t SCnINPOL   : 2;            /*!< [14..13] SCnIN Pin Input Polarity Selection                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLYRETRYn  : 1;            /*!< [16..16] Delay Time Before Retry Selection                                */
      __IOM uint32_t RETRYn     : 3;            /*!< [19..17] The number of retry. RETRYn[2:0]+1                               */
      __IOM uint32_t RETRYENn   : 1;            /*!< [20..20] Tx/Rx Error Signal Generation/Detection Retry Enable             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CONSELn    : 1;            /*!< [22..22] Convention Selection                                             */
      __IOM uint32_t ACONDETn   : 1;            /*!< [23..23] Auto Convention Detection                                        */
    } CR3_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000010) SCn Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t RXCIENn    : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Enable                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIENn    : 1;            /*!< [2..2] Transmit Complete Interrupt Enable                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIENn    : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IM  uint32_t            : 9;
      __IOM uint32_t BLEDIENn   : 1;            /*!< [16..16] Block Length Count End Interrupt Enable                          */
      __IOM uint32_t SCINIENn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Enable                            */
      __IOM uint32_t TRYERIENn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Enable                            */
      __IOM uint32_t CONEDIENn  : 1;            /*!< [19..19] Convention Detection End Interrupt Enable                        */
      __IOM uint32_t CONERIENn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Enable                      */
      __IOM uint32_t SEDIENn    : 1;            /*!< [21..21] Sequence End Interrupt Enable                                    */
      __IOM uint32_t SERIENn    : 1;            /*!< [22..22] Sequence Error Interrupt Enable                                  */
      __IOM uint32_t RSTAIENn   : 1;            /*!< [23..23] Reset Assertion Interrupt Enable                                 */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t IFSR;                        /*!< (@ 0x00000014) SCn Interrupt Flag and Status Register                     */
    
    struct {
      __IOM uint32_t RXCIFLAGn  : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Flag                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIFLAGn  : 1;            /*!< [2..2] Transmit Complete Interrupt Flag                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIFLAGn  : 1;            /*!< [6..6] Receive Time Out Interrupt Flag                                    */
      __IM  uint32_t            : 5;
      __IM  uint32_t RXBUSYn    : 1;            /*!< [12..12] RXD Line Busy                                                    */
      __IOM uint32_t PEn        : 1;            /*!< [13..13] Parity Error                                                     */
      __IOM uint32_t FEn        : 1;            /*!< [14..14] Frame Error                                                      */
      __IOM uint32_t DORn       : 1;            /*!< [15..15] Data Overrun                                                     */
      __IOM uint32_t BLEDIFGn   : 1;            /*!< [16..16] Block Length Count End Interrupt Flag                            */
      __IOM uint32_t SCINIFGn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Flag                              */
      __IOM uint32_t TRYERIFGn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Flag                              */
      __IOM uint32_t CONEDIFGn  : 1;            /*!< [19..19] Convention Detection End Interrupt Flag                          */
      __IOM uint32_t CONERIFGn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Flag                        */
      __IOM uint32_t SEDIFGn    : 1;            /*!< [21..21] Sequence End Interrupt Flag                                      */
      __IOM uint32_t SERIFGn    : 1;            /*!< [22..22] Sequence Error Interrupt Flag                                    */
      __IOM uint32_t RSTAIFGn   : 1;            /*!< [23..23] Reset Assertion Interrupt Flag                                   */
    } IFSR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000018) SCn Receive Data Register                                  */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] Receive Data                                                       */
      __IM  uint32_t PARB       : 1;            /*!< [8..8] Receive Parity                                                     */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000001C) SCn Transmit Data Register                                 */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) SCn Baud Rate Data Register                                */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] These bits are used to generate baud rate                         */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BCMP;                        /*!< (@ 0x00000024) SCn Baud Rate Compensation Register                        */
    
    struct {
      __IOM uint32_t BCMP0      : 1;            /*!< [0..0] Baud Rate Compensation 0                                           */
      __IOM uint32_t BCMP1      : 1;            /*!< [1..1] Baud Rate Compensation 1                                           */
      __IOM uint32_t BCMP2      : 1;            /*!< [2..2] Baud Rate Compensation 2                                           */
      __IOM uint32_t BCMP3      : 1;            /*!< [3..3] Baud Rate Compensation 3                                           */
      __IOM uint32_t BCMP4      : 1;            /*!< [4..4] Baud Rate Compensation 4                                           */
      __IOM uint32_t BCMP5      : 1;            /*!< [5..5] Baud Rate Compensation 5                                           */
      __IOM uint32_t BCMP6      : 1;            /*!< [6..6] Baud Rate Compensation 6                                           */
      __IOM uint32_t BCMP7      : 1;            /*!< [7..7] Baud Rate Compensation 7                                           */
      __IOM uint32_t BCMP8      : 1;            /*!< [8..8] Baud Rate Compensation 8                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t BCMPS      : 1;            /*!< [15..15] Baud Rate Compensation Sign                                      */
    } BCMP_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x00000028) SCn Receive Time Out Data Register                         */
    
    struct {
      __IOM uint32_t RTOD       : 24;           /*!< [23..0] SCn Receive Time Out Data                                         */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t EGTR;                        /*!< (@ 0x0000002C) SCn Tx Extra Guard Time Register                           */
    
    struct {
      __IOM uint32_t EGT        : 8;            /*!< [7..0] SCn Tx Extra Guard Time                                            */
    } EGTR_b;
  } ;
  
  union {
    __IOM uint32_t T3DR;                        /*!< (@ 0x00000030) SCn T3 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T3D        : 16;           /*!< [15..0] T3 Duration Data bits. T3D[15:0] + 1                              */
    } T3DR_b;
  } ;
  
  union {
    __IOM uint32_t T4DR;                        /*!< (@ 0x00000034) SCn T4 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T4D        : 16;           /*!< [15..0] T4 Duration Data bits. T4D[15:0] + 1                              */
    } T4DR_b;
  } ;
} SC0_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            SC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SC 1 (SCI + UART) (SC1)
  */

typedef struct {                                /*!< (@ 0x40005380) SC1 Structure                                              */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) SCn Control Register 1                                     */
    
    struct {
      __IOM uint32_t SCInEN     : 1;            /*!< [0..0] Smartcard Interface Block Enable                                   */
      __IOM uint32_t RTOENn     : 1;            /*!< [1..1] Receive Time Out Function Enable                                   */
      __IOM uint32_t RXEn       : 1;            /*!< [2..2] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [3..3] Enable the transmitter unit.                                       */
      __IOM uint32_t OVRSn      : 1;            /*!< [4..4] Oversampling Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t STOPBn     : 1;            /*!< [7..7] Stop bit length                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLENn      : 2;            /*!< [10..9] Data Length Selection                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t PSELn      : 1;            /*!< [13..13] Parity Selection                                                 */
      __IOM uint32_t PENn       : 1;            /*!< [14..14] Parity Enable                                                    */
      __IOM uint32_t SCnMD      : 1;            /*!< [15..15] Smartcard Interface Mode Selection                               */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) SCn Control Register 2 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t SCnCLKG    : 4;            /*!< [3..0] This bit-field is used to generate smartcard clock                 */
      __IOM uint32_t SCnCLKEN   : 1;            /*!< [4..4] Smartcard Clock Generation Enable                                  */
      __IOM uint32_t SCnCLKLV   : 1;            /*!< [5..5] SCnCLK Pin Level Setting                                           */
      __IOM uint32_t SCnDATALV  : 1;            /*!< [6..6] SCnDATA Pin Level Setting                                          */
      __IOM uint32_t SCnRSTLV   : 1;            /*!< [7..7] SCnRST Pin Level Setting                                           */
      __IOM uint32_t SCnPWRLV   : 1;            /*!< [8..8] SCnPWR Pin Level Setting                                           */
      __IM  uint32_t SCnINST    : 1;            /*!< [9..9] SCnIN Pin Status                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DACTENn    : 1;            /*!< [13..13] Auto Deactivation Enable                                         */
      __IOM uint32_t WRENn      : 1;            /*!< [14..14] Auto Warm Reset Enable                                           */
      __IOM uint32_t ACTENn     : 1;            /*!< [15..15] Auto Activation Enable                                           */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) SCn Control Register 3 (only used for Smardcard
                                                                    Interface Mode)                                            */
    
    struct {
      __IOM uint32_t RXBLENn    : 8;            /*!< [7..0] Received Block Length                                              */
      __IOM uint32_t RXCNTENn   : 1;            /*!< [8..8] Received byte Count Enable                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t SCnINPOL   : 2;            /*!< [14..13] SCnIN Pin Input Polarity Selection                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLYRETRYn  : 1;            /*!< [16..16] Delay Time Before Retry Selection                                */
      __IOM uint32_t RETRYn     : 3;            /*!< [19..17] The number of retry. RETRYn[2:0]+1                               */
      __IOM uint32_t RETRYENn   : 1;            /*!< [20..20] Tx/Rx Error Signal Generation/Detection Retry Enable             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CONSELn    : 1;            /*!< [22..22] Convention Selection                                             */
      __IOM uint32_t ACONDETn   : 1;            /*!< [23..23] Auto Convention Detection                                        */
    } CR3_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000010) SCn Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t RXCIENn    : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Enable                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIENn    : 1;            /*!< [2..2] Transmit Complete Interrupt Enable                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIENn    : 1;            /*!< [6..6] Receive Time Out Interrupt Enable                                  */
      __IM  uint32_t            : 9;
      __IOM uint32_t BLEDIENn   : 1;            /*!< [16..16] Block Length Count End Interrupt Enable                          */
      __IOM uint32_t SCINIENn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Enable                            */
      __IOM uint32_t TRYERIENn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Enable                            */
      __IOM uint32_t CONEDIENn  : 1;            /*!< [19..19] Convention Detection End Interrupt Enable                        */
      __IOM uint32_t CONERIENn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Enable                      */
      __IOM uint32_t SEDIENn    : 1;            /*!< [21..21] Sequence End Interrupt Enable                                    */
      __IOM uint32_t SERIENn    : 1;            /*!< [22..22] Sequence Error Interrupt Enable                                  */
      __IOM uint32_t RSTAIENn   : 1;            /*!< [23..23] Reset Assertion Interrupt Enable                                 */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t IFSR;                        /*!< (@ 0x00000014) SCn Interrupt Flag and Status Register                     */
    
    struct {
      __IOM uint32_t RXCIFLAGn  : 1;            /*!< [0..0] Receive Data Register Not Empty Interrupt Flag                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXCIFLAGn  : 1;            /*!< [2..2] Transmit Complete Interrupt Flag                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTOIFLAGn  : 1;            /*!< [6..6] Receive Time Out Interrupt Flag                                    */
      __IM  uint32_t            : 5;
      __IM  uint32_t RXBUSYn    : 1;            /*!< [12..12] RXD Line Busy                                                    */
      __IOM uint32_t PEn        : 1;            /*!< [13..13] Parity Error                                                     */
      __IOM uint32_t FEn        : 1;            /*!< [14..14] Frame Error                                                      */
      __IOM uint32_t DORn       : 1;            /*!< [15..15] Data Overrun                                                     */
      __IOM uint32_t BLEDIFGn   : 1;            /*!< [16..16] Block Length Count End Interrupt Flag                            */
      __IOM uint32_t SCINIFGn   : 1;            /*!< [17..17] SCnIN Pin Valid Edge Interrupt Flag                              */
      __IOM uint32_t TRYERIFGn  : 1;            /*!< [18..18] Transmit Retry Error Interrupt Flag                              */
      __IOM uint32_t CONEDIFGn  : 1;            /*!< [19..19] Convention Detection End Interrupt Flag                          */
      __IOM uint32_t CONERIFGn  : 1;            /*!< [20..20] Convention Detection Error Interrupt Flag                        */
      __IOM uint32_t SEDIFGn    : 1;            /*!< [21..21] Sequence End Interrupt Flag                                      */
      __IOM uint32_t SERIFGn    : 1;            /*!< [22..22] Sequence Error Interrupt Flag                                    */
      __IOM uint32_t RSTAIFGn   : 1;            /*!< [23..23] Reset Assertion Interrupt Flag                                   */
    } IFSR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000018) SCn Receive Data Register                                  */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] Receive Data                                                       */
      __IM  uint32_t PARB       : 1;            /*!< [8..8] Receive Parity                                                     */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000001C) SCn Transmit Data Register                                 */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] Transmit Data                                                      */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) SCn Baud Rate Data Register                                */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] These bits are used to generate baud rate                         */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BCMP;                        /*!< (@ 0x00000024) SCn Baud Rate Compensation Register                        */
    
    struct {
      __IOM uint32_t BCMP0      : 1;            /*!< [0..0] Baud Rate Compensation 0                                           */
      __IOM uint32_t BCMP1      : 1;            /*!< [1..1] Baud Rate Compensation 1                                           */
      __IOM uint32_t BCMP2      : 1;            /*!< [2..2] Baud Rate Compensation 2                                           */
      __IOM uint32_t BCMP3      : 1;            /*!< [3..3] Baud Rate Compensation 3                                           */
      __IOM uint32_t BCMP4      : 1;            /*!< [4..4] Baud Rate Compensation 4                                           */
      __IOM uint32_t BCMP5      : 1;            /*!< [5..5] Baud Rate Compensation 5                                           */
      __IOM uint32_t BCMP6      : 1;            /*!< [6..6] Baud Rate Compensation 6                                           */
      __IOM uint32_t BCMP7      : 1;            /*!< [7..7] Baud Rate Compensation 7                                           */
      __IOM uint32_t BCMP8      : 1;            /*!< [8..8] Baud Rate Compensation 8                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t BCMPS      : 1;            /*!< [15..15] Baud Rate Compensation Sign                                      */
    } BCMP_b;
  } ;
  
  union {
    __IOM uint32_t RTODR;                       /*!< (@ 0x00000028) SCn Receive Time Out Data Register                         */
    
    struct {
      __IOM uint32_t RTOD       : 24;           /*!< [23..0] SCn Receive Time Out Data                                         */
    } RTODR_b;
  } ;
  
  union {
    __IOM uint32_t EGTR;                        /*!< (@ 0x0000002C) SCn Tx Extra Guard Time Register                           */
    
    struct {
      __IOM uint32_t EGT        : 8;            /*!< [7..0] SCn Tx Extra Guard Time                                            */
    } EGTR_b;
  } ;
  
  union {
    __IOM uint32_t T3DR;                        /*!< (@ 0x00000030) SCn T3 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T3D        : 16;           /*!< [15..0] T3 Duration Data bits. T3D[15:0] + 1                              */
    } T3DR_b;
  } ;
  
  union {
    __IOM uint32_t T4DR;                        /*!< (@ 0x00000034) SCn T4 Duration Data Register                              */
    
    struct {
      __IOM uint32_t T4D        : 16;           /*!< [15..0] T4 Duration Data bits. T4D[15:0] + 1                              */
    } T4DR_b;
  } ;
} SC1_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI n (SPIn)
  */

typedef struct {                                /*!< (@ 0x57000000) SPIn Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) SPIn Control Register                                      */
    
    struct {
      __IOM uint32_t CPHAn      : 1;            /*!< [0..0] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK                                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [1..1] Selects the clock polarity of SCK                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInIEN    : 1;            /*!< [3..3] SPIn Interrupt Enable                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInMS     : 1;            /*!< [5..5] Master/Slave Selection                                             */
      __IOM uint32_t FLSBn      : 1;            /*!< [6..6] Data Transmission Sequence Selection                               */
      __IOM uint32_t SPInEN     : 1;            /*!< [7..7] SPIn Operation Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) SPIn Status Register                                       */
    
    struct {
      __IOM uint32_t SSnEN      : 1;            /*!< [0..0] SSn Pin Operation Control                                          */
      __IOM uint32_t FXCHn      : 1;            /*!< [1..1] SPIn Pin Function Exchange Control                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t SSnHIGH    : 1;            /*!< [4..4] This bit is set when the SSn pin goes high level during
                                                     the pin is the corresponding function                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPInIFLAG  : 1;            /*!< [7..7] SPIn Interrupt Flag                                                */
    } SR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000008) SPIn Receive Data Register                                 */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] SPIn Receive Data                                                  */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000000C) SPIn Transmit Data Register                                */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] SPIn Transmit Data                                                 */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) SPIn Prescaler Data Register                               */
    
    struct {
      __IOM uint32_t PRED       : 10;           /*!< [9..0] The value in this register is used to generate an SCK
                                                     clock                                                                     */
    } PREDR_b;
  } ;
} SPIn_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI 0 (SPI0)
  */

typedef struct {                                /*!< (@ 0x40005800) SPI0 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) SPIn Control Register                                      */
    
    struct {
      __IOM uint32_t CPHAn      : 1;            /*!< [0..0] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK                                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [1..1] Selects the clock polarity of SCK                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInIEN    : 1;            /*!< [3..3] SPIn Interrupt Enable                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInMS     : 1;            /*!< [5..5] Master/Slave Selection                                             */
      __IOM uint32_t FLSBn      : 1;            /*!< [6..6] Data Transmission Sequence Selection                               */
      __IOM uint32_t SPInEN     : 1;            /*!< [7..7] SPIn Operation Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) SPIn Status Register                                       */
    
    struct {
      __IOM uint32_t SSnEN      : 1;            /*!< [0..0] SSn Pin Operation Control                                          */
      __IOM uint32_t FXCHn      : 1;            /*!< [1..1] SPIn Pin Function Exchange Control                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t SSnHIGH    : 1;            /*!< [4..4] This bit is set when the SSn pin goes high level during
                                                     the pin is the corresponding function                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPInIFLAG  : 1;            /*!< [7..7] SPIn Interrupt Flag                                                */
    } SR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000008) SPIn Receive Data Register                                 */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] SPIn Receive Data                                                  */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000000C) SPIn Transmit Data Register                                */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] SPIn Transmit Data                                                 */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) SPIn Prescaler Data Register                               */
    
    struct {
      __IOM uint32_t PRED       : 10;           /*!< [9..0] The value in this register is used to generate an SCK
                                                     clock                                                                     */
    } PREDR_b;
  } ;
} SPI0_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI 1 (SPI1)
  */

typedef struct {                                /*!< (@ 0x40005880) SPI1 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) SPIn Control Register                                      */
    
    struct {
      __IOM uint32_t CPHAn      : 1;            /*!< [0..0] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK                                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [1..1] Selects the clock polarity of SCK                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInIEN    : 1;            /*!< [3..3] SPIn Interrupt Enable                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t SPInMS     : 1;            /*!< [5..5] Master/Slave Selection                                             */
      __IOM uint32_t FLSBn      : 1;            /*!< [6..6] Data Transmission Sequence Selection                               */
      __IOM uint32_t SPInEN     : 1;            /*!< [7..7] SPIn Operation Control                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) SPIn Status Register                                       */
    
    struct {
      __IOM uint32_t SSnEN      : 1;            /*!< [0..0] SSn Pin Operation Control                                          */
      __IOM uint32_t FXCHn      : 1;            /*!< [1..1] SPIn Pin Function Exchange Control                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t SSnHIGH    : 1;            /*!< [4..4] This bit is set when the SSn pin goes high level during
                                                     the pin is the corresponding function                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPInIFLAG  : 1;            /*!< [7..7] SPIn Interrupt Flag                                                */
    } SR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000008) SPIn Receive Data Register                                 */
    
    struct {
      __IM  uint32_t RDATA      : 8;            /*!< [7..0] SPIn Receive Data                                                  */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x0000000C) SPIn Transmit Data Register                                */
    
    struct {
      __IOM uint32_t TDATA      : 8;            /*!< [7..0] SPIn Transmit Data                                                 */
    } TDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) SPIn Prescaler Data Register                               */
    
    struct {
      __IOM uint32_t PRED       : 10;           /*!< [9..0] The value in this register is used to generate an SCK
                                                     clock                                                                     */
    } PREDR_b;
  } ;
} SPI1_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C n (I2Cn)
  */

typedef struct {                                /*!< (@ 0x58000000) I2Cn Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation When I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation When I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] I2CnSDHR Register Control                                          */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave                                                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     0 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 0 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The I2CnDR Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2Cn_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C 0 (I2C0)
  */

typedef struct {                                /*!< (@ 0x40004800) I2C0 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation When I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation When I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] I2CnSDHR Register Control                                          */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave                                                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     0 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 0 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The I2CnDR Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2C0_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C 1 (I2C1)
  */

typedef struct {                                /*!< (@ 0x40004900) I2C1 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation When I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation When I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] I2CnSDHR Register Control                                          */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave                                                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     0 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 0 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The I2CnDR Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2C1_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD Driver (LCD)
  */

typedef struct {                                /*!< (@ 0x40005000) LCD Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) LCD Driver Control Register                                */
    
    struct {
      __IOM uint32_t DISP       : 1;            /*!< [0..0] LCD Display Control                                                */
      __IOM uint32_t LCLK       : 2;            /*!< [2..1] LCD Clock Selection (When fLCD = 32.768kHz)                        */
      __IOM uint32_t DBS        : 3;            /*!< [5..3] LCD Duty and Bias Selection                                        */
      __IOM uint32_t IRSEL      : 2;            /*!< [7..6] Internal LCD Bias Dividing Resistor Selection                      */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t BCCR;                        /*!< (@ 0x00000004) LCD Automatic Bias and Contrast Control Register           */
    
    struct {
      __IOM uint32_t VLCD       : 4;            /*!< [3..0] VLC0 Voltage Control when the contrast is enabled                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t LCTEN      : 1;            /*!< [5..5] LCD Driver Contrast Control                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t BMSEL      : 3;            /*!< [10..8] 'Bias Mode A' Time Selection                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t LCDABC     : 1;            /*!< [12..12] LCD Automatic Bias Control                                       */
    } BCCR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  __IOM uint8_t   DR0;                          /*!< (@ 0x00000010) LCD Display Data Register 0                                */
  __IOM uint8_t   DR1;                          /*!< (@ 0x00000011) LCD Display Data Register 1                                */
  __IOM uint8_t   DR2;                          /*!< (@ 0x00000012) LCD Display Data Register 2                                */
  __IOM uint8_t   DR3;                          /*!< (@ 0x00000013) LCD Display Data Register 3                                */
  __IOM uint8_t   DR4;                          /*!< (@ 0x00000014) LCD Display Data Register 4                                */
  __IOM uint8_t   DR5;                          /*!< (@ 0x00000015) LCD Display Data Register 5                                */
  __IOM uint8_t   DR6;                          /*!< (@ 0x00000016) LCD Display Data Register 6                                */
  __IOM uint8_t   DR7;                          /*!< (@ 0x00000017) LCD Display Data Register 7                                */
  __IOM uint8_t   DR8;                          /*!< (@ 0x00000018) LCD Display Data Register 8                                */
  __IOM uint8_t   DR9;                          /*!< (@ 0x00000019) LCD Display Data Register 9                                */
  __IOM uint8_t   DR10;                         /*!< (@ 0x0000001A) LCD Display Data Register 10                               */
  __IOM uint8_t   DR11;                         /*!< (@ 0x0000001B) LCD Display Data Register 11                               */
  __IOM uint8_t   DR12;                         /*!< (@ 0x0000001C) LCD Display Data Register 12                               */
  __IOM uint8_t   DR13;                         /*!< (@ 0x0000001D) LCD Display Data Register 13                               */
  __IOM uint8_t   DR14;                         /*!< (@ 0x0000001E) LCD Display Data Register 14                               */
  __IOM uint8_t   DR15;                         /*!< (@ 0x0000001F) LCD Display Data Register 15                               */
  __IOM uint8_t   DR16;                         /*!< (@ 0x00000020) LCD Display Data Register 16                               */
  __IOM uint8_t   DR17;                         /*!< (@ 0x00000021) LCD Display Data Register 17                               */
  __IOM uint8_t   DR18;                         /*!< (@ 0x00000022) LCD Display Data Register 18                               */
  __IOM uint8_t   DR19;                         /*!< (@ 0x00000023) LCD Display Data Register 19                               */
  __IOM uint8_t   DR20;                         /*!< (@ 0x00000024) LCD Display Data Register 20                               */
  __IOM uint8_t   DR21;                         /*!< (@ 0x00000025) LCD Display Data Register 21                               */
  __IOM uint8_t   DR22;                         /*!< (@ 0x00000026) LCD Display Data Register 22                               */
  __IOM uint8_t   DR23;                         /*!< (@ 0x00000027) LCD Display Data Register 23                               */
  __IOM uint8_t   DR24;                         /*!< (@ 0x00000028) LCD Display Data Register 24                               */
  __IOM uint8_t   DR25;                         /*!< (@ 0x00000029) LCD Display Data Register 25                               */
  __IOM uint8_t   DR26;                         /*!< (@ 0x0000002A) LCD Display Data Register 26                               */
  __IOM uint8_t   DR27;                         /*!< (@ 0x0000002B) LCD Display Data Register 27                               */
  __IOM uint8_t   DR28;                         /*!< (@ 0x0000002C) LCD Display Data Register 28                               */
  __IOM uint8_t   DR29;                         /*!< (@ 0x0000002D) LCD Display Data Register 29                               */
  __IOM uint8_t   DR30;                         /*!< (@ 0x0000002E) LCD Display Data Register 30                               */
  __IOM uint8_t   DR31;                         /*!< (@ 0x0000002F) LCD Display Data Register 31                               */
  __IOM uint8_t   DR32;                         /*!< (@ 0x00000030) LCD Display Data Register 32                               */
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
} LCD_Type;                                     /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cyclic Redundancy Check and Checksum (CRC)
  */

typedef struct {                                /*!< (@ 0x30001000) CRC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) CRC/Checksum Control Register                              */
    
    struct {
      __IOM uint32_t CRCRUN     : 1;            /*!< [0..0] CRC/Checksum Start/Stop Control                                    */
      __IOM uint32_t FIRSTBS    : 1;            /*!< [1..1] First Shifted-in Selection (CRC only)                              */
      __IOM uint32_t SARINC     : 1;            /*!< [2..2] CRC/Checksum Start Address Auto Increment Control (User
                                                     mode only)                                                                */
      __IOM uint32_t POLYS      : 2;            /*!< [4..3] Polynomial Selection (CRC only)                                    */
      __IOM uint32_t MDSEL      : 1;            /*!< [5..5] CRC/Checksum Selection                                             */
      __IOM uint32_t RLTCLR     : 1;            /*!< [6..6] CRC/Checksum Result Data Register (CRC_RLT) Initialization         */
      __IOM uint32_t MODS       : 1;            /*!< [7..7] User/Auto Mode Selection                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t INCOMP     : 1;            /*!< [10..10] Input Data Complement                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t INSIZE     : 2;            /*!< [15..14] Input Data Size Selection                                        */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IN;                          /*!< (@ 0x00000004) CRC/Checksum Input Data Register                           */
    
    struct {
      __IOM uint32_t INDATA     : 32;           /*!< [31..0] CRC Input Data                                                    */
    } IN_b;
  } ;
  
  union {
    __IM  uint32_t RLT;                         /*!< (@ 0x00000008) CRC/Checksum Result Data Register                          */
    
    struct {
      __IM  uint32_t RLTDATA    : 32;           /*!< [31..0] CRC Result Data                                                   */
    } RLT_b;
  } ;
  
  union {
    __IOM uint32_t INIT;                        /*!< (@ 0x0000000C) CRC/Checksum Initial Data Register                         */
    
    struct {
      __IOM uint32_t INIDATA    : 32;           /*!< [31..0] CRC Initial Data                                                  */
    } INIT_b;
  } ;
  
  union {
    __IOM uint32_t SADR;                        /*!< (@ 0x00000010) CRC/Checksum Start Address Register                        */
    
    struct {
      __IOM uint32_t SADR       : 32;           /*!< [31..0] CRC Start Address                                                 */
    } SADR_b;
  } ;
  
  union {
    __IOM uint32_t EADR;                        /*!< (@ 0x00000014) CRC/Checksum End Address Register                          */
    
    struct {
      __IOM uint32_t EADR       : 32;           /*!< [31..0] CRC End Address                                                   */
    } EADR_b;
  } ;
} CRC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMACn                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel n (DMACn)
  */

typedef struct {                                /*!< (@ 0x59000000) DMACn Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMACn_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMAC0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel 0 (DMAC0)
  */

typedef struct {                                /*!< (@ 0x40005D00) DMAC0 Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMAC0_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMAC1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel 1 (DMAC1)
  */

typedef struct {                                /*!< (@ 0x40005D20) DMAC1 Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMAC1_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMAC2                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel 2 (DMAC2)
  */

typedef struct {                                /*!< (@ 0x40005D40) DMAC2 Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMAC2_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMAC3                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel 3 (DMAC3)
  */

typedef struct {                                /*!< (@ 0x40005D60) DMAC3 Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMAC3_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMAC4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Channel 4 (DMAC4)
  */

typedef struct {                                /*!< (@ 0x40005D80) DMAC4 Structure                                            */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) DMA Channel n Control Register                             */
    
    struct {
      __IOM uint32_t CHnEN      : 1;            /*!< [0..0] DMA Channel Enable                                                 */
      __IOM uint32_t DIR        : 1;            /*!< [1..1] Transfer Direction                                                 */
      __IOM uint32_t SIZE       : 2;            /*!< [3..2] Transfer Size Selection                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t PERSEL     : 5;            /*!< [12..8] Peripheral Selection                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERFGSTP    : 1;            /*!< [15..15] Error Flag Stop                                                  */
      __IOM uint32_t TRANSCNT   : 12;           /*!< [27..16] The number of times to transfer                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IESR;                        /*!< (@ 0x00000004) DMA Channel n Interrupt Enable and Status Register         */
    
    struct {
      __IOM uint32_t TRCIFGn    : 1;            /*!< [0..0] Transfer Complete Interrupt Flag                                   */
      __IOM uint32_t TRERIFGn   : 1;            /*!< [1..1] Transfer Error Interrupt Flag                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRCIENn    : 1;            /*!< [4..4] Transfer Complete Interrupt Enable                                 */
      __IOM uint32_t TRERIENn   : 1;            /*!< [5..5] Transfer Error Interrupt Enable                                    */
    } IESR_b;
  } ;
  
  union {
    __IOM uint32_t PAR;                         /*!< (@ 0x00000008) DMA Channel n Peripheral Address Register                  */
    
    struct {
      __IOM uint32_t POADR      : 16;           /*!< [15..0] Peripheral Offset Address                                         */
      __IOM uint32_t PBADR      : 16;           /*!< [31..16] Peripheral Base Address                                          */
    } PAR_b;
  } ;
  
  union {
    __IOM uint32_t MAR;                         /*!< (@ 0x0000000C) DMA Channel n Memory Address Register                      */
    
    struct {
      __IOM uint32_t MAR        : 32;           /*!< [31..0] Memory Address                                                    */
    } MAR_b;
  } ;
} DMAC4_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 0: System Related Trimming Value (COA0)
  */

typedef struct {                                /*!< (@ 0x1FFFF000) COA0 Structure                                             */
  __IM  uint32_t  TRIM00;                       /*!< (@ 0x00000000) System Related Trim Value 00                               */
  __IM  uint32_t  TRIM01;                       /*!< (@ 0x00000004) System Related Trim Value 01                               */
  __IM  uint32_t  TRIM02;                       /*!< (@ 0x00000008) System Related Trim Value 02                               */
  __IM  uint32_t  TRIM03;                       /*!< (@ 0x0000000C) System Related Trim Value 03                               */
  __IM  uint32_t  TRIM04;                       /*!< (@ 0x00000010) System Related Trim Value 04                               */
  __IM  uint32_t  TRIM05;                       /*!< (@ 0x00000014) System Related Trim Value 05                               */
  __IM  uint32_t  TRIM06;                       /*!< (@ 0x00000018) System Related Trim Value 06                               */
  __IM  uint32_t  TRIM07;                       /*!< (@ 0x0000001C) System Related Trim Value 07                               */
  __IM  uint32_t  TRIM08;                       /*!< (@ 0x00000020) System Related Trim Value 08                               */
  __IM  uint32_t  TRIM09;                       /*!< (@ 0x00000024) System Related Trim Value 09                               */
  __IM  uint32_t  TRIM10;                       /*!< (@ 0x00000028) System Related Trim Value 10                               */
  __IM  uint32_t  TRIM11;                       /*!< (@ 0x0000002C) System Related Trim Value 11                               */
  __IM  uint32_t  TRIM12;                       /*!< (@ 0x00000030) System Related Trim Value 12                               */
  __IM  uint32_t  TRIM13;                       /*!< (@ 0x00000034) System Related Trim Value 13                               */
  __IM  uint32_t  TRIM14;                       /*!< (@ 0x00000038) System Related Trim Value 14                               */
  __IM  uint32_t  TRIM15;                       /*!< (@ 0x0000003C) System Related Trim Value 15                               */
  __IM  uint32_t  TRIM16;                       /*!< (@ 0x00000040) System Related Trim Value 16                               */
  __IM  uint32_t  TRIM17;                       /*!< (@ 0x00000044) System Related Trim Value 17                               */
  __IM  uint32_t  TRIM18;                       /*!< (@ 0x00000048) System Related Trim Value 18                               */
  __IM  uint32_t  TRIM19;                       /*!< (@ 0x0000004C) System Related Trim Value 19                               */
  
  union {
    __IM  uint32_t CONF_MF1CNFIG;               /*!< (@ 0x00000050) Manufacture Information 1                                  */
    
    struct {
      __IM  uint32_t XYCDN      : 32;           /*!< [31..0] X and Y Coordinates                                               */
    } CONF_MF1CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF2CNFIG;               /*!< (@ 0x00000054) Manufacture Information 2                                  */
    
    struct {
      __IM  uint32_t WAFNO      : 8;            /*!< [7..0] Wafer Number                                                       */
      __IM  uint32_t LOTNO      : 24;           /*!< [31..8] Lot Number [23:0]                                                 */
    } CONF_MF2CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF3CNFIG;               /*!< (@ 0x00000058) Manufacture Information 3                                  */
    
    struct {
      __IM  uint32_t LOTNO      : 32;           /*!< [31..0] Lot Number [55:24]                                                */
    } CONF_MF3CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF4CNFIG;               /*!< (@ 0x0000005C) Manufacture Information 4                                  */
    
    struct {
      __IM  uint32_t LOTNO      : 32;           /*!< [31..0] Lot Number [87:56]                                                */
    } CONF_MF4CNFIG_b;
  } ;
  __IM  uint32_t  TRIM24;                       /*!< (@ 0x00000060) System Related Trim Value 24                               */
  __IM  uint32_t  TRIM25;                       /*!< (@ 0x00000064) System Related Trim Value 25                               */
  __IM  uint32_t  TRIM26;                       /*!< (@ 0x00000068) System Related Trim Value 26                               */
  __IM  uint32_t  TRIM27;                       /*!< (@ 0x0000006C) System Related Trim Value 27                               */
  __IM  uint32_t  TRIM28;                       /*!< (@ 0x00000070) System Related Trim Value 28                               */
  __IM  uint32_t  TRIM29;                       /*!< (@ 0x00000074) System Related Trim Value 29                               */
  __IM  uint32_t  TRIM30;                       /*!< (@ 0x00000078) System Related Trim Value 30                               */
  __IM  uint32_t  TRIM31;                       /*!< (@ 0x0000007C) System Related Trim Value 31                               */
} COA0_Type;                                    /*!< Size = 128 (0x80)                                                         */



/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 1: User Option (COA1)
  */

typedef struct {                                /*!< (@ 0x1FFFF200) COA1 Structure                                             */
  
  union {
    __IM  uint32_t RPCNFIG;                     /*!< (@ 0x00000000) Configuration for Read Protection                          */
    
    struct {
      __IM  uint32_t READP      : 2;            /*!< [1..0] Read Protection for Flash Memory Area                              */
      __IM  uint32_t            : 2;
      __IM  uint32_t WTIDKY     : 28;           /*!< [31..4] Write Identification Key (0x69c8a27)                              */
    } RPCNFIG_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IM  uint32_t WDTCNFIG;                    /*!< (@ 0x0000000C) Configuration for Watch-Dog Timer                          */
    
    struct {
      __IM  uint32_t WCNTMF     : 1;            /*!< [0..0] Watch-Dog Timer Counter Enable Master Configuration                */
      __IM  uint32_t WRSTMF     : 1;            /*!< [1..1] Watch-Dog Timer Reset Enable Master Configuration                  */
      __IM  uint32_t WCLKMF     : 1;            /*!< [2..2] Watch-Dog Timer Clock Selection Master Configuration               */
      __IM  uint32_t            : 1;
      __IM  uint32_t WRCMF      : 12;           /*!< [15..4] Watch-Dog Timer RC Oscillator Master Configuration                */
    } WDTCNFIG_b;
  } ;
  
  union {
    __IM  uint32_t LVRCNFIG;                    /*!< (@ 0x00000010) Configuration for Low Voltage Reset                        */
    
    struct {
      __IM  uint32_t LVRVS      : 3;            /*!< [2..0] LVR Voltage Selection                                              */
      __IM  uint32_t            : 5;
      __IM  uint32_t LVRENM     : 8;            /*!< [15..8] LVR Reset Operation Control Master Configuration                  */
    } LVRCNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CNFIGWTP1;                   /*!< (@ 0x00000014) Erase/Write Protection for Configure Option Page
                                                                    1/2/3                                                      */
    
    struct {
      __IM  uint32_t CP1WP      : 1;            /*!< [0..0] Configure Option Page 1 Erase/Write Protection                     */
      __IM  uint32_t CP2WP      : 1;            /*!< [1..1] Configure Option Page 2 Erase/Write Protection                     */
      __IM  uint32_t CP3WP      : 1;            /*!< [2..2] Configure Option Page 3 Erase/Write Protection                     */
    } CNFIGWTP1_b;
  } ;
  __IM  uint32_t  RESERVED1[10];
  
  union {
    __IM  uint32_t FMWTP1;                      /*!< (@ 0x00000040) Erase/Write Protection for Flash Memory                    */
    
    struct {
      __IM  uint32_t SWTP0      : 1;            /*!< [0..0] Flash Memory Erase/Write Protection 0                              */
      __IM  uint32_t SWTP1      : 1;            /*!< [1..1] Flash Memory Erase/Write Protection 1                              */
      __IM  uint32_t SWTP2      : 1;            /*!< [2..2] Flash Memory Erase/Write Protection 2                              */
      __IM  uint32_t SWTP3      : 1;            /*!< [3..3] Flash Memory Erase/Write Protection 3                              */
      __IM  uint32_t SWTP4      : 1;            /*!< [4..4] Flash Memory Erase/Write Protection 4                              */
      __IM  uint32_t SWTP5      : 1;            /*!< [5..5] Flash Memory Erase/Write Protection 5                              */
      __IM  uint32_t SWTP6      : 1;            /*!< [6..6] Flash Memory Erase/Write Protection 6                              */
      __IM  uint32_t SWTP7      : 1;            /*!< [7..7] Flash Memory Erase/Write Protection 7                              */
      __IM  uint32_t SWTP8      : 1;            /*!< [8..8] Flash Memory Erase/Write Protection 8                              */
      __IM  uint32_t SWTP9      : 1;            /*!< [9..9] Flash Memory Erase/Write Protection 9                              */
      __IM  uint32_t SWTP10     : 1;            /*!< [10..10] Flash Memory Erase/Write Protection 10                           */
      __IM  uint32_t SWTP11     : 1;            /*!< [11..11] Flash Memory Erase/Write Protection 11                           */
      __IM  uint32_t SWTP12     : 1;            /*!< [12..12] Flash Memory Erase/Write Protection 12                           */
      __IM  uint32_t SWTP13     : 1;            /*!< [13..13] Flash Memory Erase/Write Protection 13                           */
      __IM  uint32_t SWTP14     : 1;            /*!< [14..14] Flash Memory Erase/Write Protection 14                           */
      __IM  uint32_t SWTP15     : 1;            /*!< [15..15] Flash Memory Erase/Write Protection 15                           */
      __IM  uint32_t SWTP16     : 1;            /*!< [16..16] Flash Memory Erase/Write Protection 16                           */
      __IM  uint32_t SWTP17     : 1;            /*!< [17..17] Flash Memory Erase/Write Protection 17                           */
      __IM  uint32_t SWTP18     : 1;            /*!< [18..18] Flash Memory Erase/Write Protection 18                           */
      __IM  uint32_t SWTP19     : 1;            /*!< [19..19] Flash Memory Erase/Write Protection 19                           */
      __IM  uint32_t SWTP20     : 1;            /*!< [20..20] Flash Memory Erase/Write Protection 20                           */
      __IM  uint32_t SWTP21     : 1;            /*!< [21..21] Flash Memory Erase/Write Protection 21                           */
      __IM  uint32_t SWTP22     : 1;            /*!< [22..22] Flash Memory Erase/Write Protection 22                           */
      __IM  uint32_t SWTP23     : 1;            /*!< [23..23] Flash Memory Erase/Write Protection 23                           */
      __IM  uint32_t SWTP24     : 1;            /*!< [24..24] Flash Memory Erase/Write Protection 24                           */
      __IM  uint32_t SWTP25     : 1;            /*!< [25..25] Flash Memory Erase/Write Protection 25                           */
      __IM  uint32_t SWTP26     : 1;            /*!< [26..26] Flash Memory Erase/Write Protection 26                           */
      __IM  uint32_t SWTP27     : 1;            /*!< [27..27] Flash Memory Erase/Write Protection 27                           */
      __IM  uint32_t SWTP28     : 1;            /*!< [28..28] Flash Memory Erase/Write Protection 28                           */
      __IM  uint32_t SWTP29     : 1;            /*!< [29..29] Flash Memory Erase/Write Protection 29                           */
      __IM  uint32_t SWTP30     : 1;            /*!< [30..30] Flash Memory Erase/Write Protection 30                           */
      __IM  uint32_t SWTP31     : 1;            /*!< [31..31] Flash Memory Erase/Write Protection 31                           */
    } FMWTP1_b;
  } ;
} COA1_Type;                                    /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 2: User Data Area 0 (COA2)
  */

typedef struct {                                /*!< (@ 0x1FFFF400) COA2 Structure                                             */
  __IM  uint32_t  UDATA00;                      /*!< (@ 0x00000000) User Data 00                                               */
  __IM  uint32_t  UDATA01;                      /*!< (@ 0x00000004) User Data 01                                               */
  __IM  uint32_t  UDATA02;                      /*!< (@ 0x00000008) User Data 02                                               */
  __IM  uint32_t  UDATA03;                      /*!< (@ 0x0000000C) User Data 03                                               */
  __IM  uint32_t  UDATA04;                      /*!< (@ 0x00000010) User Data 04                                               */
  __IM  uint32_t  UDATA05;                      /*!< (@ 0x00000014) User Data 05                                               */
  __IM  uint32_t  UDATA06;                      /*!< (@ 0x00000018) User Data 06                                               */
  __IM  uint32_t  UDATA07;                      /*!< (@ 0x0000001C) User Data 07                                               */
  __IM  uint32_t  UDATA08;                      /*!< (@ 0x00000020) User Data 08                                               */
  __IM  uint32_t  UDATA09;                      /*!< (@ 0x00000024) User Data 09                                               */
  __IM  uint32_t  UDATA10;                      /*!< (@ 0x00000028) User Data 10                                               */
  __IM  uint32_t  UDATA11;                      /*!< (@ 0x0000002C) User Data 11                                               */
  __IM  uint32_t  UDATA12;                      /*!< (@ 0x00000030) User Data 12                                               */
  __IM  uint32_t  UDATA13;                      /*!< (@ 0x00000034) User Data 13                                               */
  __IM  uint32_t  UDATA14;                      /*!< (@ 0x00000038) User Data 14                                               */
  __IM  uint32_t  UDATA15;                      /*!< (@ 0x0000003C) User Data 15                                               */
  __IM  uint32_t  UDATA16;                      /*!< (@ 0x00000040) User Data 16                                               */
  __IM  uint32_t  UDATA17;                      /*!< (@ 0x00000044) User Data 17                                               */
  __IM  uint32_t  UDATA18;                      /*!< (@ 0x00000048) User Data 18                                               */
  __IM  uint32_t  UDATA19;                      /*!< (@ 0x0000004C) User Data 19                                               */
  __IM  uint32_t  UDATA20;                      /*!< (@ 0x00000050) User Data 20                                               */
  __IM  uint32_t  UDATA21;                      /*!< (@ 0x00000054) User Data 21                                               */
  __IM  uint32_t  UDATA22;                      /*!< (@ 0x00000058) User Data 22                                               */
  __IM  uint32_t  UDATA23;                      /*!< (@ 0x0000005C) User Data 23                                               */
  __IM  uint32_t  UDATA24;                      /*!< (@ 0x00000060) User Data 24                                               */
  __IM  uint32_t  UDATA25;                      /*!< (@ 0x00000064) User Data 25                                               */
  __IM  uint32_t  UDATA26;                      /*!< (@ 0x00000068) User Data 26                                               */
  __IM  uint32_t  UDATA27;                      /*!< (@ 0x0000006C) User Data 27                                               */
  __IM  uint32_t  UDATA28;                      /*!< (@ 0x00000070) User Data 28                                               */
  __IM  uint32_t  UDATA29;                      /*!< (@ 0x00000074) User Data 29                                               */
  __IM  uint32_t  UDATA30;                      /*!< (@ 0x00000078) User Data 30                                               */
  __IM  uint32_t  UDATA31;                      /*!< (@ 0x0000007C) User Data 31                                               */
} COA2_Type;                                    /*!< Size = 128 (0x80)                                                         */



/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 3: User Data Area 1 (COA3)
  */

typedef struct {                                /*!< (@ 0x1FFFF600) COA3 Structure                                             */
  __IM  uint32_t  UDATA00;                      /*!< (@ 0x00000000) User Data 00                                               */
  __IM  uint32_t  UDATA01;                      /*!< (@ 0x00000004) User Data 01                                               */
  __IM  uint32_t  UDATA02;                      /*!< (@ 0x00000008) User Data 02                                               */
  __IM  uint32_t  UDATA03;                      /*!< (@ 0x0000000C) User Data 03                                               */
  __IM  uint32_t  UDATA04;                      /*!< (@ 0x00000010) User Data 04                                               */
  __IM  uint32_t  UDATA05;                      /*!< (@ 0x00000014) User Data 05                                               */
  __IM  uint32_t  UDATA06;                      /*!< (@ 0x00000018) User Data 06                                               */
  __IM  uint32_t  UDATA07;                      /*!< (@ 0x0000001C) User Data 07                                               */
  __IM  uint32_t  UDATA08;                      /*!< (@ 0x00000020) User Data 08                                               */
  __IM  uint32_t  UDATA09;                      /*!< (@ 0x00000024) User Data 09                                               */
  __IM  uint32_t  UDATA10;                      /*!< (@ 0x00000028) User Data 10                                               */
  __IM  uint32_t  UDATA11;                      /*!< (@ 0x0000002C) User Data 11                                               */
  __IM  uint32_t  UDATA12;                      /*!< (@ 0x00000030) User Data 12                                               */
  __IM  uint32_t  UDATA13;                      /*!< (@ 0x00000034) User Data 13                                               */
  __IM  uint32_t  UDATA14;                      /*!< (@ 0x00000038) User Data 14                                               */
  __IM  uint32_t  UDATA15;                      /*!< (@ 0x0000003C) User Data 15                                               */
  __IM  uint32_t  UDATA16;                      /*!< (@ 0x00000040) User Data 16                                               */
  __IM  uint32_t  UDATA17;                      /*!< (@ 0x00000044) User Data 17                                               */
  __IM  uint32_t  UDATA18;                      /*!< (@ 0x00000048) User Data 18                                               */
  __IM  uint32_t  UDATA19;                      /*!< (@ 0x0000004C) User Data 19                                               */
  __IM  uint32_t  UDATA20;                      /*!< (@ 0x00000050) User Data 20                                               */
  __IM  uint32_t  UDATA21;                      /*!< (@ 0x00000054) User Data 21                                               */
  __IM  uint32_t  UDATA22;                      /*!< (@ 0x00000058) User Data 22                                               */
  __IM  uint32_t  UDATA23;                      /*!< (@ 0x0000005C) User Data 23                                               */
  __IM  uint32_t  UDATA24;                      /*!< (@ 0x00000060) User Data 24                                               */
  __IM  uint32_t  UDATA25;                      /*!< (@ 0x00000064) User Data 25                                               */
  __IM  uint32_t  UDATA26;                      /*!< (@ 0x00000068) User Data 26                                               */
  __IM  uint32_t  UDATA27;                      /*!< (@ 0x0000006C) User Data 27                                               */
  __IM  uint32_t  UDATA28;                      /*!< (@ 0x00000070) User Data 28                                               */
  __IM  uint32_t  UDATA29;                      /*!< (@ 0x00000074) User Data 29                                               */
  __IM  uint32_t  UDATA30;                      /*!< (@ 0x00000078) User Data 30                                               */
  __IM  uint32_t  UDATA31;                      /*!< (@ 0x0000007C) User Data 31                                               */
} COA3_Type;                                    /*!< Size = 128 (0x80)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define INTC_BASE                   0x40001000UL
#define SCUCC_BASE                  0x4000F000UL
#define SCUCG_BASE                  0x40001800UL
#define SCULV_BASE                  0x40005100UL
#define Pn_BASE                     0x50000000UL
#define PA_BASE                     0x30000000UL
#define PB_BASE                     0x30000100UL
#define PC_BASE                     0x30000200UL
#define PD_BASE                     0x30000300UL
#define PE_BASE                     0x30000400UL
#define PF_BASE                     0x30000500UL
#define PMU_BASE                    0x40001900UL
#define FMC_BASE                    0x40001B00UL
#define WDT_BASE                    0x40001A00UL
#define RTCC_BASE                   0x40005200UL
#define TIMER4n_BASE                0x51000000UL
#define TIMER40_BASE                0x40002700UL
#define TIMER41_BASE                0x40002780UL
#define TIMER42_BASE                0x40002800UL
#define TIMER43_BASE                0x40002880UL
#define TIMER5n_BASE                0x52000000UL
#define TIMER50_BASE                0x40002B00UL
#define ADC_BASE                    0x40003000UL
#define CMPn_BASE                   0x53000000UL
#define CMP0_BASE                   0x40005600UL
#define CMP1_BASE                   0x40005680UL
#define USART1n_BASE                0x54000000UL
#define USART10_BASE                0x40003800UL
#define UARTn_BASE                  0x55000000UL
#define UART0_BASE                  0x40004000UL
#define UART1_BASE                  0x40004100UL
#define LPUART_BASE                 0x40005C00UL
#define SCn_BASE                    0x56000000UL
#define SC0_BASE                    0x40005300UL
#define SC1_BASE                    0x40005380UL
#define SPIn_BASE                   0x57000000UL
#define SPI0_BASE                   0x40005800UL
#define SPI1_BASE                   0x40005880UL
#define I2Cn_BASE                   0x58000000UL
#define I2C0_BASE                   0x40004800UL
#define I2C1_BASE                   0x40004900UL
#define LCD_BASE                    0x40005000UL
#define CRC_BASE                    0x30001000UL
#define DMACn_BASE                  0x59000000UL
#define DMAC0_BASE                  0x40005D00UL
#define DMAC1_BASE                  0x40005D20UL
#define DMAC2_BASE                  0x40005D40UL
#define DMAC3_BASE                  0x40005D60UL
#define DMAC4_BASE                  0x40005D80UL
#define COA0_BASE                   0x1FFFF000UL
#define COA1_BASE                   0x1FFFF200UL
#define COA2_BASE                   0x1FFFF400UL
#define COA3_BASE                   0x1FFFF600UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define INTC                        ((INTC_Type*)              INTC_BASE)
#define SCUCC                       ((SCUCC_Type*)             SCUCC_BASE)
#define SCUCG                       ((SCUCG_Type*)             SCUCG_BASE)
#define SCULV                       ((SCULV_Type*)             SCULV_BASE)
#define Pn                          ((Pn_Type*)                Pn_BASE)
#define PA                          ((PA_Type*)                PA_BASE)
#define PB                          ((PB_Type*)                PB_BASE)
#define PC                          ((PC_Type*)                PC_BASE)
#define PD                          ((PD_Type*)                PD_BASE)
#define PE                          ((PE_Type*)                PE_BASE)
#define PF                          ((PF_Type*)                PF_BASE)
#define PMU                         ((PMU_Type*)               PMU_BASE)
#define FMC                         ((FMC_Type*)               FMC_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define RTCC                        ((RTCC_Type*)              RTCC_BASE)
#define TIMER4n                     ((TIMER4n_Type*)           TIMER4n_BASE)
#define TIMER40                     ((TIMER40_Type*)           TIMER40_BASE)
#define TIMER41                     ((TIMER41_Type*)           TIMER41_BASE)
#define TIMER42                     ((TIMER42_Type*)           TIMER42_BASE)
#define TIMER43                     ((TIMER43_Type*)           TIMER43_BASE)
#define TIMER5n                     ((TIMER5n_Type*)           TIMER5n_BASE)
#define TIMER50                     ((TIMER50_Type*)           TIMER50_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define CMPn                        ((CMPn_Type*)              CMPn_BASE)
#define CMP0                        ((CMP0_Type*)              CMP0_BASE)
#define CMP1                        ((CMP1_Type*)              CMP1_BASE)
#define USART1n                     ((USART1n_Type*)           USART1n_BASE)
#define USART10                     ((USART10_Type*)           USART10_BASE)
#define UARTn                       ((UARTn_Type*)             UARTn_BASE)
#define UART0                       ((UART0_Type*)             UART0_BASE)
#define UART1                       ((UART1_Type*)             UART1_BASE)
#define LPUART                      ((LPUART_Type*)            LPUART_BASE)
#define SCn                         ((SCn_Type*)               SCn_BASE)
#define SC0                         ((SC0_Type*)               SC0_BASE)
#define SC1                         ((SC1_Type*)               SC1_BASE)
#define SPIn                        ((SPIn_Type*)              SPIn_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define I2Cn                        ((I2Cn_Type*)              I2Cn_BASE)
#define I2C0                        ((I2C0_Type*)              I2C0_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define LCD                         ((LCD_Type*)               LCD_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define DMACn                       ((DMACn_Type*)             DMACn_BASE)
#define DMAC0                       ((DMAC0_Type*)             DMAC0_BASE)
#define DMAC1                       ((DMAC1_Type*)             DMAC1_BASE)
#define DMAC2                       ((DMAC2_Type*)             DMAC2_BASE)
#define DMAC3                       ((DMAC3_Type*)             DMAC3_BASE)
#define DMAC4                       ((DMAC4_Type*)             DMAC4_BASE)
#define COA0                        ((COA0_Type*)              COA0_BASE)
#define COA1                        ((COA1_Type*)              COA1_BASE)
#define COA2                        ((COA2_Type*)              COA2_BASE)
#define COA3                        ((COA3_Type*)              COA3_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  PATRIG  ========================================================= */
#define INTC_PATRIG_ITRIG9_Pos            (9UL)                     /*!< INTC PATRIG: ITRIG9 (Bit 9)                           */
#define INTC_PATRIG_ITRIG9_Msk            (0x200UL)                 /*!< INTC PATRIG: ITRIG9 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG8_Pos            (8UL)                     /*!< INTC PATRIG: ITRIG8 (Bit 8)                           */
#define INTC_PATRIG_ITRIG8_Msk            (0x100UL)                 /*!< INTC PATRIG: ITRIG8 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG7_Pos            (7UL)                     /*!< INTC PATRIG: ITRIG7 (Bit 7)                           */
#define INTC_PATRIG_ITRIG7_Msk            (0x80UL)                  /*!< INTC PATRIG: ITRIG7 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG6_Pos            (6UL)                     /*!< INTC PATRIG: ITRIG6 (Bit 6)                           */
#define INTC_PATRIG_ITRIG6_Msk            (0x40UL)                  /*!< INTC PATRIG: ITRIG6 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG5_Pos            (5UL)                     /*!< INTC PATRIG: ITRIG5 (Bit 5)                           */
#define INTC_PATRIG_ITRIG5_Msk            (0x20UL)                  /*!< INTC PATRIG: ITRIG5 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PATRIG: ITRIG4 (Bit 4)                           */
#define INTC_PATRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PATRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PATRIG: ITRIG3 (Bit 3)                           */
#define INTC_PATRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PATRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PATRIG: ITRIG2 (Bit 2)                           */
#define INTC_PATRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PATRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PATRIG: ITRIG1 (Bit 1)                           */
#define INTC_PATRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PATRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PATRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PATRIG: ITRIG0 (Bit 0)                           */
#define INTC_PATRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PATRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PBTRIG  ========================================================= */
#define INTC_PBTRIG_ITRIG12_Pos           (12UL)                    /*!< INTC PBTRIG: ITRIG12 (Bit 12)                         */
#define INTC_PBTRIG_ITRIG12_Msk           (0x1000UL)                /*!< INTC PBTRIG: ITRIG12 (Bitfield-Mask: 0x01)            */
#define INTC_PBTRIG_ITRIG11_Pos           (11UL)                    /*!< INTC PBTRIG: ITRIG11 (Bit 11)                         */
#define INTC_PBTRIG_ITRIG11_Msk           (0x800UL)                 /*!< INTC PBTRIG: ITRIG11 (Bitfield-Mask: 0x01)            */
#define INTC_PBTRIG_ITRIG10_Pos           (10UL)                    /*!< INTC PBTRIG: ITRIG10 (Bit 10)                         */
#define INTC_PBTRIG_ITRIG10_Msk           (0x400UL)                 /*!< INTC PBTRIG: ITRIG10 (Bitfield-Mask: 0x01)            */
#define INTC_PBTRIG_ITRIG9_Pos            (9UL)                     /*!< INTC PBTRIG: ITRIG9 (Bit 9)                           */
#define INTC_PBTRIG_ITRIG9_Msk            (0x200UL)                 /*!< INTC PBTRIG: ITRIG9 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG8_Pos            (8UL)                     /*!< INTC PBTRIG: ITRIG8 (Bit 8)                           */
#define INTC_PBTRIG_ITRIG8_Msk            (0x100UL)                 /*!< INTC PBTRIG: ITRIG8 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG7_Pos            (7UL)                     /*!< INTC PBTRIG: ITRIG7 (Bit 7)                           */
#define INTC_PBTRIG_ITRIG7_Msk            (0x80UL)                  /*!< INTC PBTRIG: ITRIG7 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG6_Pos            (6UL)                     /*!< INTC PBTRIG: ITRIG6 (Bit 6)                           */
#define INTC_PBTRIG_ITRIG6_Msk            (0x40UL)                  /*!< INTC PBTRIG: ITRIG6 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG5_Pos            (5UL)                     /*!< INTC PBTRIG: ITRIG5 (Bit 5)                           */
#define INTC_PBTRIG_ITRIG5_Msk            (0x20UL)                  /*!< INTC PBTRIG: ITRIG5 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PBTRIG: ITRIG4 (Bit 4)                           */
#define INTC_PBTRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PBTRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PBTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PBTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PBTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PBTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PBTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PBTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PBTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PBTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PBTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PBTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PBTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PBTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PCTRIG  ========================================================= */
#define INTC_PCTRIG_ITRIG11_Pos           (11UL)                    /*!< INTC PCTRIG: ITRIG11 (Bit 11)                         */
#define INTC_PCTRIG_ITRIG11_Msk           (0x800UL)                 /*!< INTC PCTRIG: ITRIG11 (Bitfield-Mask: 0x01)            */
#define INTC_PCTRIG_ITRIG10_Pos           (10UL)                    /*!< INTC PCTRIG: ITRIG10 (Bit 10)                         */
#define INTC_PCTRIG_ITRIG10_Msk           (0x400UL)                 /*!< INTC PCTRIG: ITRIG10 (Bitfield-Mask: 0x01)            */
#define INTC_PCTRIG_ITRIG9_Pos            (9UL)                     /*!< INTC PCTRIG: ITRIG9 (Bit 9)                           */
#define INTC_PCTRIG_ITRIG9_Msk            (0x200UL)                 /*!< INTC PCTRIG: ITRIG9 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG8_Pos            (8UL)                     /*!< INTC PCTRIG: ITRIG8 (Bit 8)                           */
#define INTC_PCTRIG_ITRIG8_Msk            (0x100UL)                 /*!< INTC PCTRIG: ITRIG8 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG7_Pos            (7UL)                     /*!< INTC PCTRIG: ITRIG7 (Bit 7)                           */
#define INTC_PCTRIG_ITRIG7_Msk            (0x80UL)                  /*!< INTC PCTRIG: ITRIG7 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG6_Pos            (6UL)                     /*!< INTC PCTRIG: ITRIG6 (Bit 6)                           */
#define INTC_PCTRIG_ITRIG6_Msk            (0x40UL)                  /*!< INTC PCTRIG: ITRIG6 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG5_Pos            (5UL)                     /*!< INTC PCTRIG: ITRIG5 (Bit 5)                           */
#define INTC_PCTRIG_ITRIG5_Msk            (0x20UL)                  /*!< INTC PCTRIG: ITRIG5 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PCTRIG: ITRIG4 (Bit 4)                           */
#define INTC_PCTRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PCTRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PCTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PCTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PCTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PCTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PCTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PCTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PCTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PCTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PCTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PCTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PCTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PCTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PDTRIG  ========================================================= */
#define INTC_PDTRIG_ITRIG7_Pos            (7UL)                     /*!< INTC PDTRIG: ITRIG7 (Bit 7)                           */
#define INTC_PDTRIG_ITRIG7_Msk            (0x80UL)                  /*!< INTC PDTRIG: ITRIG7 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG6_Pos            (6UL)                     /*!< INTC PDTRIG: ITRIG6 (Bit 6)                           */
#define INTC_PDTRIG_ITRIG6_Msk            (0x40UL)                  /*!< INTC PDTRIG: ITRIG6 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG5_Pos            (5UL)                     /*!< INTC PDTRIG: ITRIG5 (Bit 5)                           */
#define INTC_PDTRIG_ITRIG5_Msk            (0x20UL)                  /*!< INTC PDTRIG: ITRIG5 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PDTRIG: ITRIG4 (Bit 4)                           */
#define INTC_PDTRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PDTRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PDTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PDTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PDTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PDTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PDTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PDTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PDTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PDTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PDTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PDTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PDTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PDTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PDTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PETRIG  ========================================================= */
#define INTC_PETRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PETRIG: ITRIG4 (Bit 4)                           */
#define INTC_PETRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PETRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PETRIG: ITRIG3 (Bit 3)                           */
#define INTC_PETRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PETRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PETRIG: ITRIG2 (Bit 2)                           */
#define INTC_PETRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PETRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PETRIG: ITRIG1 (Bit 1)                           */
#define INTC_PETRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PETRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PETRIG: ITRIG0 (Bit 0)                           */
#define INTC_PETRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PETRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PFTRIG  ========================================================= */
#define INTC_PFTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PFTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PFTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PFTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PFTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PFTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PFTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PFTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PFTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PFTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PFTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PFTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PFTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PFTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PFTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PFTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* =========================================================  PACR  ========================================================== */
#define INTC_PACR_INTCTL9_Pos             (18UL)                    /*!< INTC PACR: INTCTL9 (Bit 18)                           */
#define INTC_PACR_INTCTL9_Msk             (0xc0000UL)               /*!< INTC PACR: INTCTL9 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL8_Pos             (16UL)                    /*!< INTC PACR: INTCTL8 (Bit 16)                           */
#define INTC_PACR_INTCTL8_Msk             (0x30000UL)               /*!< INTC PACR: INTCTL8 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL7_Pos             (14UL)                    /*!< INTC PACR: INTCTL7 (Bit 14)                           */
#define INTC_PACR_INTCTL7_Msk             (0xc000UL)                /*!< INTC PACR: INTCTL7 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL6_Pos             (12UL)                    /*!< INTC PACR: INTCTL6 (Bit 12)                           */
#define INTC_PACR_INTCTL6_Msk             (0x3000UL)                /*!< INTC PACR: INTCTL6 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL5_Pos             (10UL)                    /*!< INTC PACR: INTCTL5 (Bit 10)                           */
#define INTC_PACR_INTCTL5_Msk             (0xc00UL)                 /*!< INTC PACR: INTCTL5 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL4_Pos             (8UL)                     /*!< INTC PACR: INTCTL4 (Bit 8)                            */
#define INTC_PACR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PACR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL3_Pos             (6UL)                     /*!< INTC PACR: INTCTL3 (Bit 6)                            */
#define INTC_PACR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PACR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL2_Pos             (4UL)                     /*!< INTC PACR: INTCTL2 (Bit 4)                            */
#define INTC_PACR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PACR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL1_Pos             (2UL)                     /*!< INTC PACR: INTCTL1 (Bit 2)                            */
#define INTC_PACR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PACR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PACR_INTCTL0_Pos             (0UL)                     /*!< INTC PACR: INTCTL0 (Bit 0)                            */
#define INTC_PACR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PACR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PBCR  ========================================================== */
#define INTC_PBCR_INTCTL12_Pos            (24UL)                    /*!< INTC PBCR: INTCTL12 (Bit 24)                          */
#define INTC_PBCR_INTCTL12_Msk            (0x3000000UL)             /*!< INTC PBCR: INTCTL12 (Bitfield-Mask: 0x03)             */
#define INTC_PBCR_INTCTL11_Pos            (22UL)                    /*!< INTC PBCR: INTCTL11 (Bit 22)                          */
#define INTC_PBCR_INTCTL11_Msk            (0xc00000UL)              /*!< INTC PBCR: INTCTL11 (Bitfield-Mask: 0x03)             */
#define INTC_PBCR_INTCTL10_Pos            (20UL)                    /*!< INTC PBCR: INTCTL10 (Bit 20)                          */
#define INTC_PBCR_INTCTL10_Msk            (0x300000UL)              /*!< INTC PBCR: INTCTL10 (Bitfield-Mask: 0x03)             */
#define INTC_PBCR_INTCTL9_Pos             (18UL)                    /*!< INTC PBCR: INTCTL9 (Bit 18)                           */
#define INTC_PBCR_INTCTL9_Msk             (0xc0000UL)               /*!< INTC PBCR: INTCTL9 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL8_Pos             (16UL)                    /*!< INTC PBCR: INTCTL8 (Bit 16)                           */
#define INTC_PBCR_INTCTL8_Msk             (0x30000UL)               /*!< INTC PBCR: INTCTL8 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL7_Pos             (14UL)                    /*!< INTC PBCR: INTCTL7 (Bit 14)                           */
#define INTC_PBCR_INTCTL7_Msk             (0xc000UL)                /*!< INTC PBCR: INTCTL7 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL6_Pos             (12UL)                    /*!< INTC PBCR: INTCTL6 (Bit 12)                           */
#define INTC_PBCR_INTCTL6_Msk             (0x3000UL)                /*!< INTC PBCR: INTCTL6 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL5_Pos             (10UL)                    /*!< INTC PBCR: INTCTL5 (Bit 10)                           */
#define INTC_PBCR_INTCTL5_Msk             (0xc00UL)                 /*!< INTC PBCR: INTCTL5 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL4_Pos             (8UL)                     /*!< INTC PBCR: INTCTL4 (Bit 8)                            */
#define INTC_PBCR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PBCR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL3_Pos             (6UL)                     /*!< INTC PBCR: INTCTL3 (Bit 6)                            */
#define INTC_PBCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PBCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL2_Pos             (4UL)                     /*!< INTC PBCR: INTCTL2 (Bit 4)                            */
#define INTC_PBCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PBCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL1_Pos             (2UL)                     /*!< INTC PBCR: INTCTL1 (Bit 2)                            */
#define INTC_PBCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PBCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL0_Pos             (0UL)                     /*!< INTC PBCR: INTCTL0 (Bit 0)                            */
#define INTC_PBCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PBCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PCCR  ========================================================== */
#define INTC_PCCR_INTCTL11_Pos            (22UL)                    /*!< INTC PCCR: INTCTL11 (Bit 22)                          */
#define INTC_PCCR_INTCTL11_Msk            (0xc00000UL)              /*!< INTC PCCR: INTCTL11 (Bitfield-Mask: 0x03)             */
#define INTC_PCCR_INTCTL10_Pos            (20UL)                    /*!< INTC PCCR: INTCTL10 (Bit 20)                          */
#define INTC_PCCR_INTCTL10_Msk            (0x300000UL)              /*!< INTC PCCR: INTCTL10 (Bitfield-Mask: 0x03)             */
#define INTC_PCCR_INTCTL9_Pos             (18UL)                    /*!< INTC PCCR: INTCTL9 (Bit 18)                           */
#define INTC_PCCR_INTCTL9_Msk             (0xc0000UL)               /*!< INTC PCCR: INTCTL9 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL8_Pos             (16UL)                    /*!< INTC PCCR: INTCTL8 (Bit 16)                           */
#define INTC_PCCR_INTCTL8_Msk             (0x30000UL)               /*!< INTC PCCR: INTCTL8 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL7_Pos             (14UL)                    /*!< INTC PCCR: INTCTL7 (Bit 14)                           */
#define INTC_PCCR_INTCTL7_Msk             (0xc000UL)                /*!< INTC PCCR: INTCTL7 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL6_Pos             (12UL)                    /*!< INTC PCCR: INTCTL6 (Bit 12)                           */
#define INTC_PCCR_INTCTL6_Msk             (0x3000UL)                /*!< INTC PCCR: INTCTL6 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL5_Pos             (10UL)                    /*!< INTC PCCR: INTCTL5 (Bit 10)                           */
#define INTC_PCCR_INTCTL5_Msk             (0xc00UL)                 /*!< INTC PCCR: INTCTL5 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL4_Pos             (8UL)                     /*!< INTC PCCR: INTCTL4 (Bit 8)                            */
#define INTC_PCCR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PCCR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL3_Pos             (6UL)                     /*!< INTC PCCR: INTCTL3 (Bit 6)                            */
#define INTC_PCCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PCCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL2_Pos             (4UL)                     /*!< INTC PCCR: INTCTL2 (Bit 4)                            */
#define INTC_PCCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PCCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL1_Pos             (2UL)                     /*!< INTC PCCR: INTCTL1 (Bit 2)                            */
#define INTC_PCCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PCCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL0_Pos             (0UL)                     /*!< INTC PCCR: INTCTL0 (Bit 0)                            */
#define INTC_PCCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PCCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PDCR  ========================================================== */
#define INTC_PDCR_INTCTL7_Pos             (14UL)                    /*!< INTC PDCR: INTCTL7 (Bit 14)                           */
#define INTC_PDCR_INTCTL7_Msk             (0xc000UL)                /*!< INTC PDCR: INTCTL7 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL6_Pos             (12UL)                    /*!< INTC PDCR: INTCTL6 (Bit 12)                           */
#define INTC_PDCR_INTCTL6_Msk             (0x3000UL)                /*!< INTC PDCR: INTCTL6 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL5_Pos             (10UL)                    /*!< INTC PDCR: INTCTL5 (Bit 10)                           */
#define INTC_PDCR_INTCTL5_Msk             (0xc00UL)                 /*!< INTC PDCR: INTCTL5 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL4_Pos             (8UL)                     /*!< INTC PDCR: INTCTL4 (Bit 8)                            */
#define INTC_PDCR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PDCR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL3_Pos             (6UL)                     /*!< INTC PDCR: INTCTL3 (Bit 6)                            */
#define INTC_PDCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PDCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL2_Pos             (4UL)                     /*!< INTC PDCR: INTCTL2 (Bit 4)                            */
#define INTC_PDCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PDCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL1_Pos             (2UL)                     /*!< INTC PDCR: INTCTL1 (Bit 2)                            */
#define INTC_PDCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PDCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PDCR_INTCTL0_Pos             (0UL)                     /*!< INTC PDCR: INTCTL0 (Bit 0)                            */
#define INTC_PDCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PDCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PECR  ========================================================== */
#define INTC_PECR_INTCTL4_Pos             (8UL)                     /*!< INTC PECR: INTCTL4 (Bit 8)                            */
#define INTC_PECR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PECR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL3_Pos             (6UL)                     /*!< INTC PECR: INTCTL3 (Bit 6)                            */
#define INTC_PECR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PECR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL2_Pos             (4UL)                     /*!< INTC PECR: INTCTL2 (Bit 4)                            */
#define INTC_PECR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PECR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL1_Pos             (2UL)                     /*!< INTC PECR: INTCTL1 (Bit 2)                            */
#define INTC_PECR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PECR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL0_Pos             (0UL)                     /*!< INTC PECR: INTCTL0 (Bit 0)                            */
#define INTC_PECR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PECR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PFCR  ========================================================== */
#define INTC_PFCR_INTCTL3_Pos             (6UL)                     /*!< INTC PFCR: INTCTL3 (Bit 6)                            */
#define INTC_PFCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PFCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PFCR_INTCTL2_Pos             (4UL)                     /*!< INTC PFCR: INTCTL2 (Bit 4)                            */
#define INTC_PFCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PFCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PFCR_INTCTL1_Pos             (2UL)                     /*!< INTC PFCR: INTCTL1 (Bit 2)                            */
#define INTC_PFCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PFCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PFCR_INTCTL0_Pos             (0UL)                     /*!< INTC PFCR: INTCTL0 (Bit 0)                            */
#define INTC_PFCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PFCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* ========================================================  PAFLAG  ========================================================= */
#define INTC_PAFLAG_FLAG9_Pos             (9UL)                     /*!< INTC PAFLAG: FLAG9 (Bit 9)                            */
#define INTC_PAFLAG_FLAG9_Msk             (0x200UL)                 /*!< INTC PAFLAG: FLAG9 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG8_Pos             (8UL)                     /*!< INTC PAFLAG: FLAG8 (Bit 8)                            */
#define INTC_PAFLAG_FLAG8_Msk             (0x100UL)                 /*!< INTC PAFLAG: FLAG8 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG7_Pos             (7UL)                     /*!< INTC PAFLAG: FLAG7 (Bit 7)                            */
#define INTC_PAFLAG_FLAG7_Msk             (0x80UL)                  /*!< INTC PAFLAG: FLAG7 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG6_Pos             (6UL)                     /*!< INTC PAFLAG: FLAG6 (Bit 6)                            */
#define INTC_PAFLAG_FLAG6_Msk             (0x40UL)                  /*!< INTC PAFLAG: FLAG6 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG5_Pos             (5UL)                     /*!< INTC PAFLAG: FLAG5 (Bit 5)                            */
#define INTC_PAFLAG_FLAG5_Msk             (0x20UL)                  /*!< INTC PAFLAG: FLAG5 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PAFLAG: FLAG4 (Bit 4)                            */
#define INTC_PAFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PAFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PAFLAG: FLAG3 (Bit 3)                            */
#define INTC_PAFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PAFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PAFLAG: FLAG2 (Bit 2)                            */
#define INTC_PAFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PAFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PAFLAG: FLAG1 (Bit 1)                            */
#define INTC_PAFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PAFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PAFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PAFLAG: FLAG0 (Bit 0)                            */
#define INTC_PAFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PAFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PBFLAG  ========================================================= */
#define INTC_PBFLAG_FLAG12_Pos            (12UL)                    /*!< INTC PBFLAG: FLAG12 (Bit 12)                          */
#define INTC_PBFLAG_FLAG12_Msk            (0x1000UL)                /*!< INTC PBFLAG: FLAG12 (Bitfield-Mask: 0x01)             */
#define INTC_PBFLAG_FLAG11_Pos            (11UL)                    /*!< INTC PBFLAG: FLAG11 (Bit 11)                          */
#define INTC_PBFLAG_FLAG11_Msk            (0x800UL)                 /*!< INTC PBFLAG: FLAG11 (Bitfield-Mask: 0x01)             */
#define INTC_PBFLAG_FLAG10_Pos            (10UL)                    /*!< INTC PBFLAG: FLAG10 (Bit 10)                          */
#define INTC_PBFLAG_FLAG10_Msk            (0x400UL)                 /*!< INTC PBFLAG: FLAG10 (Bitfield-Mask: 0x01)             */
#define INTC_PBFLAG_FLAG9_Pos             (9UL)                     /*!< INTC PBFLAG: FLAG9 (Bit 9)                            */
#define INTC_PBFLAG_FLAG9_Msk             (0x200UL)                 /*!< INTC PBFLAG: FLAG9 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG8_Pos             (8UL)                     /*!< INTC PBFLAG: FLAG8 (Bit 8)                            */
#define INTC_PBFLAG_FLAG8_Msk             (0x100UL)                 /*!< INTC PBFLAG: FLAG8 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG7_Pos             (7UL)                     /*!< INTC PBFLAG: FLAG7 (Bit 7)                            */
#define INTC_PBFLAG_FLAG7_Msk             (0x80UL)                  /*!< INTC PBFLAG: FLAG7 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG6_Pos             (6UL)                     /*!< INTC PBFLAG: FLAG6 (Bit 6)                            */
#define INTC_PBFLAG_FLAG6_Msk             (0x40UL)                  /*!< INTC PBFLAG: FLAG6 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG5_Pos             (5UL)                     /*!< INTC PBFLAG: FLAG5 (Bit 5)                            */
#define INTC_PBFLAG_FLAG5_Msk             (0x20UL)                  /*!< INTC PBFLAG: FLAG5 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PBFLAG: FLAG4 (Bit 4)                            */
#define INTC_PBFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PBFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PBFLAG: FLAG3 (Bit 3)                            */
#define INTC_PBFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PBFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PBFLAG: FLAG2 (Bit 2)                            */
#define INTC_PBFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PBFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PBFLAG: FLAG1 (Bit 1)                            */
#define INTC_PBFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PBFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PBFLAG: FLAG0 (Bit 0)                            */
#define INTC_PBFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PBFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PCFLAG  ========================================================= */
#define INTC_PCFLAG_FLAG11_Pos            (11UL)                    /*!< INTC PCFLAG: FLAG11 (Bit 11)                          */
#define INTC_PCFLAG_FLAG11_Msk            (0x800UL)                 /*!< INTC PCFLAG: FLAG11 (Bitfield-Mask: 0x01)             */
#define INTC_PCFLAG_FLAG10_Pos            (10UL)                    /*!< INTC PCFLAG: FLAG10 (Bit 10)                          */
#define INTC_PCFLAG_FLAG10_Msk            (0x400UL)                 /*!< INTC PCFLAG: FLAG10 (Bitfield-Mask: 0x01)             */
#define INTC_PCFLAG_FLAG9_Pos             (9UL)                     /*!< INTC PCFLAG: FLAG9 (Bit 9)                            */
#define INTC_PCFLAG_FLAG9_Msk             (0x200UL)                 /*!< INTC PCFLAG: FLAG9 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG8_Pos             (8UL)                     /*!< INTC PCFLAG: FLAG8 (Bit 8)                            */
#define INTC_PCFLAG_FLAG8_Msk             (0x100UL)                 /*!< INTC PCFLAG: FLAG8 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG7_Pos             (7UL)                     /*!< INTC PCFLAG: FLAG7 (Bit 7)                            */
#define INTC_PCFLAG_FLAG7_Msk             (0x80UL)                  /*!< INTC PCFLAG: FLAG7 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG6_Pos             (6UL)                     /*!< INTC PCFLAG: FLAG6 (Bit 6)                            */
#define INTC_PCFLAG_FLAG6_Msk             (0x40UL)                  /*!< INTC PCFLAG: FLAG6 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG5_Pos             (5UL)                     /*!< INTC PCFLAG: FLAG5 (Bit 5)                            */
#define INTC_PCFLAG_FLAG5_Msk             (0x20UL)                  /*!< INTC PCFLAG: FLAG5 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PCFLAG: FLAG4 (Bit 4)                            */
#define INTC_PCFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PCFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PCFLAG: FLAG3 (Bit 3)                            */
#define INTC_PCFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PCFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PCFLAG: FLAG2 (Bit 2)                            */
#define INTC_PCFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PCFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PCFLAG: FLAG1 (Bit 1)                            */
#define INTC_PCFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PCFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PCFLAG: FLAG0 (Bit 0)                            */
#define INTC_PCFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PCFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PDFLAG  ========================================================= */
#define INTC_PDFLAG_FLAG7_Pos             (7UL)                     /*!< INTC PDFLAG: FLAG7 (Bit 7)                            */
#define INTC_PDFLAG_FLAG7_Msk             (0x80UL)                  /*!< INTC PDFLAG: FLAG7 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG6_Pos             (6UL)                     /*!< INTC PDFLAG: FLAG6 (Bit 6)                            */
#define INTC_PDFLAG_FLAG6_Msk             (0x40UL)                  /*!< INTC PDFLAG: FLAG6 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG5_Pos             (5UL)                     /*!< INTC PDFLAG: FLAG5 (Bit 5)                            */
#define INTC_PDFLAG_FLAG5_Msk             (0x20UL)                  /*!< INTC PDFLAG: FLAG5 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PDFLAG: FLAG4 (Bit 4)                            */
#define INTC_PDFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PDFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PDFLAG: FLAG3 (Bit 3)                            */
#define INTC_PDFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PDFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PDFLAG: FLAG2 (Bit 2)                            */
#define INTC_PDFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PDFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PDFLAG: FLAG1 (Bit 1)                            */
#define INTC_PDFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PDFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PDFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PDFLAG: FLAG0 (Bit 0)                            */
#define INTC_PDFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PDFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PEFLAG  ========================================================= */
#define INTC_PEFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PEFLAG: FLAG4 (Bit 4)                            */
#define INTC_PEFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PEFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PEFLAG: FLAG3 (Bit 3)                            */
#define INTC_PEFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PEFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PEFLAG: FLAG2 (Bit 2)                            */
#define INTC_PEFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PEFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PEFLAG: FLAG1 (Bit 1)                            */
#define INTC_PEFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PEFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PEFLAG: FLAG0 (Bit 0)                            */
#define INTC_PEFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PEFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PFFLAG  ========================================================= */
#define INTC_PFFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PFFLAG: FLAG3 (Bit 3)                            */
#define INTC_PFFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PFFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PFFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PFFLAG: FLAG2 (Bit 2)                            */
#define INTC_PFFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PFFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PFFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PFFLAG: FLAG1 (Bit 1)                            */
#define INTC_PFFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PFFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PFFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PFFLAG: FLAG0 (Bit 0)                            */
#define INTC_PFFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PFFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ======================================================  EINT0CONF1  ======================================================= */
#define INTC_EINT0CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT0CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT0CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT0CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT0CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT0CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT0CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT0CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT0CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT0CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT0CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT0CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT0CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT0CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT0CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT0CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT0CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT0CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT0CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT0CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT0CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT0CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT0CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT0CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT0CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT1CONF1  ======================================================= */
#define INTC_EINT1CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT1CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT1CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT1CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT1CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT1CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT1CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT1CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT1CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT1CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT1CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT1CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT1CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT1CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT1CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT1CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT1CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT1CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT1CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT1CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT1CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT1CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT1CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT1CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT1CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT2CONF1  ======================================================= */
#define INTC_EINT2CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT2CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT2CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT2CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT2CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT2CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT2CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT2CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT2CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT2CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT2CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT2CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT2CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT2CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT2CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT2CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT2CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT2CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT2CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT2CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT2CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT2CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT2CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT2CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT2CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT3CONF1  ======================================================= */
#define INTC_EINT3CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT3CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT3CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT3CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT3CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT3CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT3CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT3CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT3CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT3CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT3CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT3CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT3CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT3CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT3CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT3CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT3CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT3CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT3CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT3CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT3CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT3CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT3CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT3CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT3CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT0CONF2  ======================================================= */
#define INTC_EINT0CONF2_CONF12_Pos        (16UL)                    /*!< INTC EINT0CONF2: CONF12 (Bit 16)                      */
#define INTC_EINT0CONF2_CONF12_Msk        (0xf0000UL)               /*!< INTC EINT0CONF2: CONF12 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT0CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT0CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT0CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT0CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT0CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT0CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT0CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT0CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT0CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT0CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT0CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT0CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT0CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT0CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT0CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT1CONF2  ======================================================= */
#define INTC_EINT1CONF2_CONF12_Pos        (16UL)                    /*!< INTC EINT1CONF2: CONF12 (Bit 16)                      */
#define INTC_EINT1CONF2_CONF12_Msk        (0xf0000UL)               /*!< INTC EINT1CONF2: CONF12 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT1CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT1CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT1CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT1CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT1CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT1CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT1CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT1CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT1CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT1CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT1CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT1CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT1CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT1CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT1CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT2CONF2  ======================================================= */
#define INTC_EINT2CONF2_CONF12_Pos        (16UL)                    /*!< INTC EINT2CONF2: CONF12 (Bit 16)                      */
#define INTC_EINT2CONF2_CONF12_Msk        (0xf0000UL)               /*!< INTC EINT2CONF2: CONF12 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT2CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT2CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT2CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT2CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT2CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT2CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT2CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT2CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT2CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT2CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT2CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT2CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT2CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT2CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT2CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT3CONF2  ======================================================= */
#define INTC_EINT3CONF2_CONF12_Pos        (16UL)                    /*!< INTC EINT3CONF2: CONF12 (Bit 16)                      */
#define INTC_EINT3CONF2_CONF12_Msk        (0xf0000UL)               /*!< INTC EINT3CONF2: CONF12 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT3CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT3CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT3CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT3CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT3CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT3CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT3CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT3CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT3CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT3CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT3CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT3CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT3CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT3CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT3CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ==========================================================  MSK  ========================================================== */
#define INTC_MSK_IMSK31_DMAC4_Pos         (31UL)                    /*!< INTC MSK: IMSK31_DMAC4 (Bit 31)                       */
#define INTC_MSK_IMSK31_DMAC4_Msk         (0x80000000UL)            /*!< INTC MSK: IMSK31_DMAC4 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK30_DMAC3_Pos         (30UL)                    /*!< INTC MSK: IMSK30_DMAC3 (Bit 30)                       */
#define INTC_MSK_IMSK30_DMAC3_Msk         (0x40000000UL)            /*!< INTC MSK: IMSK30_DMAC3 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK29_DMAC2_Pos         (29UL)                    /*!< INTC MSK: IMSK29_DMAC2 (Bit 29)                       */
#define INTC_MSK_IMSK29_DMAC2_Msk         (0x20000000UL)            /*!< INTC MSK: IMSK29_DMAC2 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK28_RTCC_Pos          (28UL)                    /*!< INTC MSK: IMSK28_RTCC (Bit 28)                        */
#define INTC_MSK_IMSK28_RTCC_Msk          (0x10000000UL)            /*!< INTC MSK: IMSK28_RTCC (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK27_NULL_Pos          (27UL)                    /*!< INTC MSK: IMSK27_NULL (Bit 27)                        */
#define INTC_MSK_IMSK27_NULL_Msk          (0x8000000UL)             /*!< INTC MSK: IMSK27_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK26_NULL_Pos          (26UL)                    /*!< INTC MSK: IMSK26_NULL (Bit 26)                        */
#define INTC_MSK_IMSK26_NULL_Msk          (0x4000000UL)             /*!< INTC MSK: IMSK26_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK25_LPUART_Pos        (25UL)                    /*!< INTC MSK: IMSK25_LPUART (Bit 25)                      */
#define INTC_MSK_IMSK25_LPUART_Msk        (0x2000000UL)             /*!< INTC MSK: IMSK25_LPUART (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK24_DMAC1_Pos         (24UL)                    /*!< INTC MSK: IMSK24_DMAC1 (Bit 24)                       */
#define INTC_MSK_IMSK24_DMAC1_Msk         (0x1000000UL)             /*!< INTC MSK: IMSK24_DMAC1 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK23_DMAC0_Pos         (23UL)                    /*!< INTC MSK: IMSK23_DMAC0 (Bit 23)                       */
#define INTC_MSK_IMSK23_DMAC0_Msk         (0x800000UL)              /*!< INTC MSK: IMSK23_DMAC0 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK22_CMPn_Pos          (22UL)                    /*!< INTC MSK: IMSK22_CMPn (Bit 22)                        */
#define INTC_MSK_IMSK22_CMPn_Msk          (0x400000UL)              /*!< INTC MSK: IMSK22_CMPn (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK21_TIMER43_Pos       (21UL)                    /*!< INTC MSK: IMSK21_TIMER43 (Bit 21)                     */
#define INTC_MSK_IMSK21_TIMER43_Msk       (0x200000UL)              /*!< INTC MSK: IMSK21_TIMER43 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK20_UART1_Pos         (20UL)                    /*!< INTC MSK: IMSK20_UART1 (Bit 20)                       */
#define INTC_MSK_IMSK20_UART1_Msk         (0x100000UL)              /*!< INTC MSK: IMSK20_UART1 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK19_UART0_Pos         (19UL)                    /*!< INTC MSK: IMSK19_UART0 (Bit 19)                       */
#define INTC_MSK_IMSK19_UART0_Msk         (0x80000UL)               /*!< INTC MSK: IMSK19_UART0 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK18_ADC_Pos           (18UL)                    /*!< INTC MSK: IMSK18_ADC (Bit 18)                         */
#define INTC_MSK_IMSK18_ADC_Msk           (0x40000UL)               /*!< INTC MSK: IMSK18_ADC (Bitfield-Mask: 0x01)            */
#define INTC_MSK_IMSK17_SC1_Pos           (17UL)                    /*!< INTC MSK: IMSK17_SC1 (Bit 17)                         */
#define INTC_MSK_IMSK17_SC1_Msk           (0x20000UL)               /*!< INTC MSK: IMSK17_SC1 (Bitfield-Mask: 0x01)            */
#define INTC_MSK_IMSK16_SC0_Pos           (16UL)                    /*!< INTC MSK: IMSK16_SC0 (Bit 16)                         */
#define INTC_MSK_IMSK16_SC0_Msk           (0x10000UL)               /*!< INTC MSK: IMSK16_SC0 (Bitfield-Mask: 0x01)            */
#define INTC_MSK_IMSK15_TIMER50_Pos       (15UL)                    /*!< INTC MSK: IMSK15_TIMER50 (Bit 15)                     */
#define INTC_MSK_IMSK15_TIMER50_Msk       (0x8000UL)                /*!< INTC MSK: IMSK15_TIMER50 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK14_I2C1_Pos          (14UL)                    /*!< INTC MSK: IMSK14_I2C1 (Bit 14)                        */
#define INTC_MSK_IMSK14_I2C1_Msk          (0x4000UL)                /*!< INTC MSK: IMSK14_I2C1 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK13_SPI1_Pos          (13UL)                    /*!< INTC MSK: IMSK13_SPI1 (Bit 13)                        */
#define INTC_MSK_IMSK13_SPI1_Msk          (0x2000UL)                /*!< INTC MSK: IMSK13_SPI1 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK12_SPI0_Pos          (12UL)                    /*!< INTC MSK: IMSK12_SPI0 (Bit 12)                        */
#define INTC_MSK_IMSK12_SPI0_Msk          (0x1000UL)                /*!< INTC MSK: IMSK12_SPI0 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK11_USART10_Pos       (11UL)                    /*!< INTC MSK: IMSK11_USART10 (Bit 11)                     */
#define INTC_MSK_IMSK11_USART10_Msk       (0x800UL)                 /*!< INTC MSK: IMSK11_USART10 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK10_I2C0_Pos          (10UL)                    /*!< INTC MSK: IMSK10_I2C0 (Bit 10)                        */
#define INTC_MSK_IMSK10_I2C0_Msk          (0x400UL)                 /*!< INTC MSK: IMSK10_I2C0 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK9_TIMER42_Pos        (9UL)                     /*!< INTC MSK: IMSK9_TIMER42 (Bit 9)                       */
#define INTC_MSK_IMSK9_TIMER42_Msk        (0x200UL)                 /*!< INTC MSK: IMSK9_TIMER42 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK8_TIMER41_Pos        (8UL)                     /*!< INTC MSK: IMSK8_TIMER41 (Bit 8)                       */
#define INTC_MSK_IMSK8_TIMER41_Msk        (0x100UL)                 /*!< INTC MSK: IMSK8_TIMER41 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK7_TIMER40_Pos        (7UL)                     /*!< INTC MSK: IMSK7_TIMER40 (Bit 7)                       */
#define INTC_MSK_IMSK7_TIMER40_Msk        (0x80UL)                  /*!< INTC MSK: IMSK7_TIMER40 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK6_EINT3_Pos          (6UL)                     /*!< INTC MSK: IMSK6_EINT3 (Bit 6)                         */
#define INTC_MSK_IMSK6_EINT3_Msk          (0x40UL)                  /*!< INTC MSK: IMSK6_EINT3 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK5_EINT2_Pos          (5UL)                     /*!< INTC MSK: IMSK5_EINT2 (Bit 5)                         */
#define INTC_MSK_IMSK5_EINT2_Msk          (0x20UL)                  /*!< INTC MSK: IMSK5_EINT2 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK4_EINT1_Pos          (4UL)                     /*!< INTC MSK: IMSK4_EINT1 (Bit 4)                         */
#define INTC_MSK_IMSK4_EINT1_Msk          (0x10UL)                  /*!< INTC MSK: IMSK4_EINT1 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK3_EINT0_Pos          (3UL)                     /*!< INTC MSK: IMSK3_EINT0 (Bit 3)                         */
#define INTC_MSK_IMSK3_EINT0_Msk          (0x8UL)                   /*!< INTC MSK: IMSK3_EINT0 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK2_WDT_Pos            (2UL)                     /*!< INTC MSK: IMSK2_WDT (Bit 2)                           */
#define INTC_MSK_IMSK2_WDT_Msk            (0x4UL)                   /*!< INTC MSK: IMSK2_WDT (Bitfield-Mask: 0x01)             */
#define INTC_MSK_IMSK1_WUT_Pos            (1UL)                     /*!< INTC MSK: IMSK1_WUT (Bit 1)                           */
#define INTC_MSK_IMSK1_WUT_Msk            (0x2UL)                   /*!< INTC MSK: IMSK1_WUT (Bitfield-Mask: 0x01)             */
#define INTC_MSK_IMSK0_LVI_Pos            (0UL)                     /*!< INTC MSK: IMSK0_LVI (Bit 0)                           */
#define INTC_MSK_IMSK0_LVI_Msk            (0x1UL)                   /*!< INTC MSK: IMSK0_LVI (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  VENDORID  ======================================================== */
#define SCUCC_VENDORID_VENDID_Pos         (0UL)                     /*!< SCUCC VENDORID: VENDID (Bit 0)                        */
#define SCUCC_VENDORID_VENDID_Msk         (0xffffffffUL)            /*!< SCUCC VENDORID: VENDID (Bitfield-Mask: 0xffffffff)    */
/* ========================================================  CHIPID  ========================================================= */
#define SCUCC_CHIPID_CHIPID_Pos           (0UL)                     /*!< SCUCC CHIPID: CHIPID (Bit 0)                          */
#define SCUCC_CHIPID_CHIPID_Msk           (0xffffffffUL)            /*!< SCUCC CHIPID: CHIPID (Bitfield-Mask: 0xffffffff)      */
/* =========================================================  REVNR  ========================================================= */
#define SCUCC_REVNR_REVNO_Pos             (0UL)                     /*!< SCUCC REVNR: REVNO (Bit 0)                            */
#define SCUCC_REVNR_REVNO_Msk             (0xffUL)                  /*!< SCUCC REVNR: REVNO (Bitfield-Mask: 0xff)              */
/* ========================================================  PMREMAP  ======================================================== */
#define SCUCC_PMREMAP_WTIDKY_Pos          (16UL)                    /*!< SCUCC PMREMAP: WTIDKY (Bit 16)                        */
#define SCUCC_PMREMAP_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCC PMREMAP: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCC_PMREMAP_nPMREM_Pos          (8UL)                     /*!< SCUCC PMREMAP: nPMREM (Bit 8)                         */
#define SCUCC_PMREMAP_nPMREM_Msk          (0xff00UL)                /*!< SCUCC PMREMAP: nPMREM (Bitfield-Mask: 0xff)           */
#define SCUCC_PMREMAP_PMREM_Pos           (0UL)                     /*!< SCUCC PMREMAP: PMREM (Bit 0)                          */
#define SCUCC_PMREMAP_PMREM_Msk           (0xffUL)                  /*!< SCUCC PMREMAP: PMREM (Bitfield-Mask: 0xff)            */
/* ========================================================  BTPSCR  ========================================================= */
#define SCUCC_BTPSCR_BFIND_Pos            (5UL)                     /*!< SCUCC BTPSCR: BFIND (Bit 5)                           */
#define SCUCC_BTPSCR_BFIND_Msk            (0x60UL)                  /*!< SCUCC BTPSCR: BFIND (Bitfield-Mask: 0x03)             */
#define SCUCC_BTPSCR_BTPSTA_Pos           (0UL)                     /*!< SCUCC BTPSCR: BTPSTA (Bit 0)                          */
#define SCUCC_BTPSCR_BTPSTA_Msk           (0x1UL)                   /*!< SCUCC BTPSCR: BTPSTA (Bitfield-Mask: 0x01)            */
/* ========================================================  RSTSSR  ========================================================= */
#define SCUCC_RSTSSR_WAKUPSTA_Pos         (6UL)                     /*!< SCUCC RSTSSR: WAKUPSTA (Bit 6)                        */
#define SCUCC_RSTSSR_WAKUPSTA_Msk         (0x40UL)                  /*!< SCUCC RSTSSR: WAKUPSTA (Bitfield-Mask: 0x01)          */
#define SCUCC_RSTSSR_MONSTA_Pos           (5UL)                     /*!< SCUCC RSTSSR: MONSTA (Bit 5)                          */
#define SCUCC_RSTSSR_MONSTA_Msk           (0x20UL)                  /*!< SCUCC RSTSSR: MONSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_SWSTA_Pos            (4UL)                     /*!< SCUCC RSTSSR: SWSTA (Bit 4)                           */
#define SCUCC_RSTSSR_SWSTA_Msk            (0x10UL)                  /*!< SCUCC RSTSSR: SWSTA (Bitfield-Mask: 0x01)             */
#define SCUCC_RSTSSR_EXTSTA_Pos           (3UL)                     /*!< SCUCC RSTSSR: EXTSTA (Bit 3)                          */
#define SCUCC_RSTSSR_EXTSTA_Msk           (0x8UL)                   /*!< SCUCC RSTSSR: EXTSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_WDTSTA_Pos           (2UL)                     /*!< SCUCC RSTSSR: WDTSTA (Bit 2)                          */
#define SCUCC_RSTSSR_WDTSTA_Msk           (0x4UL)                   /*!< SCUCC RSTSSR: WDTSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_LVRSTA_Pos           (1UL)                     /*!< SCUCC RSTSSR: LVRSTA (Bit 1)                          */
#define SCUCC_RSTSSR_LVRSTA_Msk           (0x2UL)                   /*!< SCUCC RSTSSR: LVRSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_PORSTA_Pos           (0UL)                     /*!< SCUCC RSTSSR: PORSTA (Bit 0)                          */
#define SCUCC_RSTSSR_PORSTA_Msk           (0x1UL)                   /*!< SCUCC RSTSSR: PORSTA (Bitfield-Mask: 0x01)            */
/* ========================================================  NMISRCR  ======================================================== */
#define SCUCC_NMISRCR_NMICON_Pos          (7UL)                     /*!< SCUCC NMISRCR: NMICON (Bit 7)                         */
#define SCUCC_NMISRCR_NMICON_Msk          (0x80UL)                  /*!< SCUCC NMISRCR: NMICON (Bitfield-Mask: 0x01)           */
#define SCUCC_NMISRCR_MONINT_Pos          (6UL)                     /*!< SCUCC NMISRCR: MONINT (Bit 6)                         */
#define SCUCC_NMISRCR_MONINT_Msk          (0x40UL)                  /*!< SCUCC NMISRCR: MONINT (Bitfield-Mask: 0x01)           */
#define SCUCC_NMISRCR_NMISRC_Pos          (0UL)                     /*!< SCUCC NMISRCR: NMISRC (Bit 0)                         */
#define SCUCC_NMISRCR_NMISRC_Msk          (0x1fUL)                  /*!< SCUCC NMISRCR: NMISRC (Bitfield-Mask: 0x1f)           */
/* ========================================================  SWRSTR  ========================================================= */
#define SCUCC_SWRSTR_WTIDKY_Pos           (16UL)                    /*!< SCUCC SWRSTR: WTIDKY (Bit 16)                         */
#define SCUCC_SWRSTR_WTIDKY_Msk           (0xffff0000UL)            /*!< SCUCC SWRSTR: WTIDKY (Bitfield-Mask: 0xffff)          */
#define SCUCC_SWRSTR_SWRST_Pos            (0UL)                     /*!< SCUCC SWRSTR: SWRST (Bit 0)                           */
#define SCUCC_SWRSTR_SWRST_Msk            (0xffUL)                  /*!< SCUCC SWRSTR: SWRST (Bitfield-Mask: 0xff)             */
/* ========================================================  SRSTVR  ========================================================= */
#define SCUCC_SRSTVR_VALID_Pos            (0UL)                     /*!< SCUCC SRSTVR: VALID (Bit 0)                           */
#define SCUCC_SRSTVR_VALID_Msk            (0xffUL)                  /*!< SCUCC SRSTVR: VALID (Bitfield-Mask: 0xff)             */
/* =========================================================  WUTCR  ========================================================= */
#define SCUCC_WUTCR_WUTIEN_Pos            (7UL)                     /*!< SCUCC WUTCR: WUTIEN (Bit 7)                           */
#define SCUCC_WUTCR_WUTIEN_Msk            (0x80UL)                  /*!< SCUCC WUTCR: WUTIEN (Bitfield-Mask: 0x01)             */
#define SCUCC_WUTCR_CNTRLD_Pos            (1UL)                     /*!< SCUCC WUTCR: CNTRLD (Bit 1)                           */
#define SCUCC_WUTCR_CNTRLD_Msk            (0x2UL)                   /*!< SCUCC WUTCR: CNTRLD (Bitfield-Mask: 0x01)             */
#define SCUCC_WUTCR_WUTIFLAG_Pos          (0UL)                     /*!< SCUCC WUTCR: WUTIFLAG (Bit 0)                         */
#define SCUCC_WUTCR_WUTIFLAG_Msk          (0x1UL)                   /*!< SCUCC WUTCR: WUTIFLAG (Bitfield-Mask: 0x01)           */
/* =========================================================  WUTDR  ========================================================= */
#define SCUCC_WUTDR_WUTDATA_Pos           (0UL)                     /*!< SCUCC WUTDR: WUTDATA (Bit 0)                          */
#define SCUCC_WUTDR_WUTDATA_Msk           (0xffffffUL)              /*!< SCUCC WUTDR: WUTDATA (Bitfield-Mask: 0xffffff)        */
/* ========================================================  HIRCTRM  ======================================================== */
#define SCUCC_HIRCTRM_WTIDKY_Pos          (16UL)                    /*!< SCUCC HIRCTRM: WTIDKY (Bit 16)                        */
#define SCUCC_HIRCTRM_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCC HIRCTRM: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCC_HIRCTRM_nTRMH_Pos           (8UL)                     /*!< SCUCC HIRCTRM: nTRMH (Bit 8)                          */
#define SCUCC_HIRCTRM_nTRMH_Msk           (0xff00UL)                /*!< SCUCC HIRCTRM: nTRMH (Bitfield-Mask: 0xff)            */
#define SCUCC_HIRCTRM_CTRMH_Pos           (5UL)                     /*!< SCUCC HIRCTRM: CTRMH (Bit 5)                          */
#define SCUCC_HIRCTRM_CTRMH_Msk           (0xe0UL)                  /*!< SCUCC HIRCTRM: CTRMH (Bitfield-Mask: 0x07)            */
#define SCUCC_HIRCTRM_FTRMH_Pos           (0UL)                     /*!< SCUCC HIRCTRM: FTRMH (Bit 0)                          */
#define SCUCC_HIRCTRM_FTRMH_Msk           (0x1fUL)                  /*!< SCUCC HIRCTRM: FTRMH (Bitfield-Mask: 0x1f)            */
/* =======================================================  WDTRCTRM  ======================================================== */
#define SCUCC_WDTRCTRM_WTIDKY_Pos         (16UL)                    /*!< SCUCC WDTRCTRM: WTIDKY (Bit 16)                       */
#define SCUCC_WDTRCTRM_WTIDKY_Msk         (0xffff0000UL)            /*!< SCUCC WDTRCTRM: WTIDKY (Bitfield-Mask: 0xffff)        */
#define SCUCC_WDTRCTRM_nTRMW_Pos          (8UL)                     /*!< SCUCC WDTRCTRM: nTRMW (Bit 8)                         */
#define SCUCC_WDTRCTRM_nTRMW_Msk          (0xff00UL)                /*!< SCUCC WDTRCTRM: nTRMW (Bitfield-Mask: 0xff)           */
#define SCUCC_WDTRCTRM_CTRMW_Pos          (4UL)                     /*!< SCUCC WDTRCTRM: CTRMW (Bit 4)                         */
#define SCUCC_WDTRCTRM_CTRMW_Msk          (0xf0UL)                  /*!< SCUCC WDTRCTRM: CTRMW (Bitfield-Mask: 0x0f)           */
#define SCUCC_WDTRCTRM_FTRMW_Pos          (0UL)                     /*!< SCUCC WDTRCTRM: FTRMW (Bit 0)                         */
#define SCUCC_WDTRCTRM_FTRMW_Msk          (0x7UL)                   /*!< SCUCC WDTRCTRM: FTRMW (Bitfield-Mask: 0x07)           */


/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  SCCR  ========================================================== */
#define SCUCG_SCCR_WTIDKY_Pos             (16UL)                    /*!< SCUCG SCCR: WTIDKY (Bit 16)                           */
#define SCUCG_SCCR_WTIDKY_Msk             (0xffff0000UL)            /*!< SCUCG SCCR: WTIDKY (Bitfield-Mask: 0xffff)            */
#define SCUCG_SCCR_MCLKSEL_Pos            (0UL)                     /*!< SCUCG SCCR: MCLKSEL (Bit 0)                           */
#define SCUCG_SCCR_MCLKSEL_Msk            (0x3UL)                   /*!< SCUCG SCCR: MCLKSEL (Bitfield-Mask: 0x03)             */
/* ========================================================  CLKSRCR  ======================================================== */
#define SCUCG_CLKSRCR_WTIDKY_Pos          (16UL)                    /*!< SCUCG CLKSRCR: WTIDKY (Bit 16)                        */
#define SCUCG_CLKSRCR_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCG CLKSRCR: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCG_CLKSRCR_HIRCSEL_Pos         (12UL)                    /*!< SCUCG CLKSRCR: HIRCSEL (Bit 12)                       */
#define SCUCG_CLKSRCR_HIRCSEL_Msk         (0x3000UL)                /*!< SCUCG CLKSRCR: HIRCSEL (Bitfield-Mask: 0x03)          */
#define SCUCG_CLKSRCR_XMFRNG_Pos          (8UL)                     /*!< SCUCG CLKSRCR: XMFRNG (Bit 8)                         */
#define SCUCG_CLKSRCR_XMFRNG_Msk          (0x100UL)                 /*!< SCUCG CLKSRCR: XMFRNG (Bitfield-Mask: 0x01)           */
#define SCUCG_CLKSRCR_WDTRCEN_Pos         (3UL)                     /*!< SCUCG CLKSRCR: WDTRCEN (Bit 3)                        */
#define SCUCG_CLKSRCR_WDTRCEN_Msk         (0x8UL)                   /*!< SCUCG CLKSRCR: WDTRCEN (Bitfield-Mask: 0x01)          */
#define SCUCG_CLKSRCR_HIRCEN_Pos          (2UL)                     /*!< SCUCG CLKSRCR: HIRCEN (Bit 2)                         */
#define SCUCG_CLKSRCR_HIRCEN_Msk          (0x4UL)                   /*!< SCUCG CLKSRCR: HIRCEN (Bitfield-Mask: 0x01)           */
#define SCUCG_CLKSRCR_XMOSCEN_Pos         (1UL)                     /*!< SCUCG CLKSRCR: XMOSCEN (Bit 1)                        */
#define SCUCG_CLKSRCR_XMOSCEN_Msk         (0x2UL)                   /*!< SCUCG CLKSRCR: XMOSCEN (Bitfield-Mask: 0x01)          */
#define SCUCG_CLKSRCR_XSOSCEN_Pos         (0UL)                     /*!< SCUCG CLKSRCR: XSOSCEN (Bit 0)                        */
#define SCUCG_CLKSRCR_XSOSCEN_Msk         (0x1UL)                   /*!< SCUCG CLKSRCR: XSOSCEN (Bitfield-Mask: 0x01)          */
/* ========================================================  SCDIVR1  ======================================================== */
#define SCUCG_SCDIVR1_WLDIV_Pos           (4UL)                     /*!< SCUCG SCDIVR1: WLDIV (Bit 4)                          */
#define SCUCG_SCDIVR1_WLDIV_Msk           (0x70UL)                  /*!< SCUCG SCDIVR1: WLDIV (Bitfield-Mask: 0x07)            */
#define SCUCG_SCDIVR1_HDIV_Pos            (0UL)                     /*!< SCUCG SCDIVR1: HDIV (Bit 0)                           */
#define SCUCG_SCDIVR1_HDIV_Msk            (0x7UL)                   /*!< SCUCG SCDIVR1: HDIV (Bitfield-Mask: 0x07)             */
/* ========================================================  SCDIVR2  ======================================================== */
#define SCUCG_SCDIVR2_SYSTDIV_Pos         (4UL)                     /*!< SCUCG SCDIVR2: SYSTDIV (Bit 4)                        */
#define SCUCG_SCDIVR2_SYSTDIV_Msk         (0x30UL)                  /*!< SCUCG SCDIVR2: SYSTDIV (Bitfield-Mask: 0x03)          */
#define SCUCG_SCDIVR2_PDIV_Pos            (0UL)                     /*!< SCUCG SCDIVR2: PDIV (Bit 0)                           */
#define SCUCG_SCDIVR2_PDIV_Msk            (0x3UL)                   /*!< SCUCG SCDIVR2: PDIV (Bitfield-Mask: 0x03)             */
/* ========================================================  CLKOCR  ========================================================= */
#define SCUCG_CLKOCR_CLKOEN_Pos           (7UL)                     /*!< SCUCG CLKOCR: CLKOEN (Bit 7)                          */
#define SCUCG_CLKOCR_CLKOEN_Msk           (0x80UL)                  /*!< SCUCG CLKOCR: CLKOEN (Bitfield-Mask: 0x01)            */
#define SCUCG_CLKOCR_POLSEL_Pos           (6UL)                     /*!< SCUCG CLKOCR: POLSEL (Bit 6)                          */
#define SCUCG_CLKOCR_POLSEL_Msk           (0x40UL)                  /*!< SCUCG CLKOCR: POLSEL (Bitfield-Mask: 0x01)            */
#define SCUCG_CLKOCR_CLKODIV_Pos          (3UL)                     /*!< SCUCG CLKOCR: CLKODIV (Bit 3)                         */
#define SCUCG_CLKOCR_CLKODIV_Msk          (0x38UL)                  /*!< SCUCG CLKOCR: CLKODIV (Bitfield-Mask: 0x07)           */
#define SCUCG_CLKOCR_CLKOS_Pos            (0UL)                     /*!< SCUCG CLKOCR: CLKOS (Bit 0)                           */
#define SCUCG_CLKOCR_CLKOS_Msk            (0x7UL)                   /*!< SCUCG CLKOCR: CLKOS (Bitfield-Mask: 0x07)             */
/* ========================================================  CMONCR  ========================================================= */
#define SCUCG_CMONCR_MONEN_Pos            (7UL)                     /*!< SCUCG CMONCR: MONEN (Bit 7)                           */
#define SCUCG_CMONCR_MONEN_Msk            (0x80UL)                  /*!< SCUCG CMONCR: MONEN (Bitfield-Mask: 0x01)             */
#define SCUCG_CMONCR_MACTS_Pos            (5UL)                     /*!< SCUCG CMONCR: MACTS (Bit 5)                           */
#define SCUCG_CMONCR_MACTS_Msk            (0x60UL)                  /*!< SCUCG CMONCR: MACTS (Bitfield-Mask: 0x03)             */
#define SCUCG_CMONCR_MONFLAG_Pos          (3UL)                     /*!< SCUCG CMONCR: MONFLAG (Bit 3)                         */
#define SCUCG_CMONCR_MONFLAG_Msk          (0x8UL)                   /*!< SCUCG CMONCR: MONFLAG (Bitfield-Mask: 0x01)           */
#define SCUCG_CMONCR_NMINTFG_Pos          (2UL)                     /*!< SCUCG CMONCR: NMINTFG (Bit 2)                         */
#define SCUCG_CMONCR_NMINTFG_Msk          (0x4UL)                   /*!< SCUCG CMONCR: NMINTFG (Bitfield-Mask: 0x01)           */
#define SCUCG_CMONCR_MONCS_Pos            (0UL)                     /*!< SCUCG CMONCR: MONCS (Bit 0)                           */
#define SCUCG_CMONCR_MONCS_Msk            (0x3UL)                   /*!< SCUCG CMONCR: MONCS (Bitfield-Mask: 0x03)             */
/* =======================================================  PPCLKEN1  ======================================================== */
#define SCUCG_PPCLKEN1_T50CLKE_Pos        (30UL)                    /*!< SCUCG PPCLKEN1: T50CLKE (Bit 30)                      */
#define SCUCG_PPCLKEN1_T50CLKE_Msk        (0x40000000UL)            /*!< SCUCG PPCLKEN1: T50CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T43CLKE_Pos        (25UL)                    /*!< SCUCG PPCLKEN1: T43CLKE (Bit 25)                      */
#define SCUCG_PPCLKEN1_T43CLKE_Msk        (0x2000000UL)             /*!< SCUCG PPCLKEN1: T43CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T42CLKE_Pos        (24UL)                    /*!< SCUCG PPCLKEN1: T42CLKE (Bit 24)                      */
#define SCUCG_PPCLKEN1_T42CLKE_Msk        (0x1000000UL)             /*!< SCUCG PPCLKEN1: T42CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T41CLKE_Pos        (23UL)                    /*!< SCUCG PPCLKEN1: T41CLKE (Bit 23)                      */
#define SCUCG_PPCLKEN1_T41CLKE_Msk        (0x800000UL)              /*!< SCUCG PPCLKEN1: T41CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T40CLKE_Pos        (22UL)                    /*!< SCUCG PPCLKEN1: T40CLKE (Bit 22)                      */
#define SCUCG_PPCLKEN1_T40CLKE_Msk        (0x400000UL)              /*!< SCUCG PPCLKEN1: T40CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_PFCLKE_Pos         (5UL)                     /*!< SCUCG PPCLKEN1: PFCLKE (Bit 5)                        */
#define SCUCG_PPCLKEN1_PFCLKE_Msk         (0x20UL)                  /*!< SCUCG PPCLKEN1: PFCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PECLKE_Pos         (4UL)                     /*!< SCUCG PPCLKEN1: PECLKE (Bit 4)                        */
#define SCUCG_PPCLKEN1_PECLKE_Msk         (0x10UL)                  /*!< SCUCG PPCLKEN1: PECLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PDCLKE_Pos         (3UL)                     /*!< SCUCG PPCLKEN1: PDCLKE (Bit 3)                        */
#define SCUCG_PPCLKEN1_PDCLKE_Msk         (0x8UL)                   /*!< SCUCG PPCLKEN1: PDCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PCCLKE_Pos         (2UL)                     /*!< SCUCG PPCLKEN1: PCCLKE (Bit 2)                        */
#define SCUCG_PPCLKEN1_PCCLKE_Msk         (0x4UL)                   /*!< SCUCG PPCLKEN1: PCCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PBCLKE_Pos         (1UL)                     /*!< SCUCG PPCLKEN1: PBCLKE (Bit 1)                        */
#define SCUCG_PPCLKEN1_PBCLKE_Msk         (0x2UL)                   /*!< SCUCG PPCLKEN1: PBCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PACLKE_Pos         (0UL)                     /*!< SCUCG PPCLKEN1: PACLKE (Bit 0)                        */
#define SCUCG_PPCLKEN1_PACLKE_Msk         (0x1UL)                   /*!< SCUCG PPCLKEN1: PACLKE (Bitfield-Mask: 0x01)          */
/* =======================================================  PPCLKEN2  ======================================================== */
#define SCUCG_PPCLKEN2_DMACLKE_Pos        (31UL)                    /*!< SCUCG PPCLKEN2: DMACLKE (Bit 31)                      */
#define SCUCG_PPCLKEN2_DMACLKE_Msk        (0x80000000UL)            /*!< SCUCG PPCLKEN2: DMACLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_CMP1CLKE_Pos       (28UL)                    /*!< SCUCG PPCLKEN2: CMP1CLKE (Bit 28)                     */
#define SCUCG_PPCLKEN2_CMP1CLKE_Msk       (0x10000000UL)            /*!< SCUCG PPCLKEN2: CMP1CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_CMP0CLKE_Pos       (27UL)                    /*!< SCUCG PPCLKEN2: CMP0CLKE (Bit 27)                     */
#define SCUCG_PPCLKEN2_CMP0CLKE_Msk       (0x8000000UL)             /*!< SCUCG PPCLKEN2: CMP0CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_SC1CLKE_Pos        (25UL)                    /*!< SCUCG PPCLKEN2: SC1CLKE (Bit 25)                      */
#define SCUCG_PPCLKEN2_SC1CLKE_Msk        (0x2000000UL)             /*!< SCUCG PPCLKEN2: SC1CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_SC0CLKE_Pos        (24UL)                    /*!< SCUCG PPCLKEN2: SC0CLKE (Bit 24)                      */
#define SCUCG_PPCLKEN2_SC0CLKE_Msk        (0x1000000UL)             /*!< SCUCG PPCLKEN2: SC0CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_SPI1CLKE_Pos       (21UL)                    /*!< SCUCG PPCLKEN2: SPI1CLKE (Bit 21)                     */
#define SCUCG_PPCLKEN2_SPI1CLKE_Msk       (0x200000UL)              /*!< SCUCG PPCLKEN2: SPI1CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_SPI0CLKE_Pos       (20UL)                    /*!< SCUCG PPCLKEN2: SPI0CLKE (Bit 20)                     */
#define SCUCG_PPCLKEN2_SPI0CLKE_Msk       (0x100000UL)              /*!< SCUCG PPCLKEN2: SPI0CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_FMCLKE_Pos         (19UL)                    /*!< SCUCG PPCLKEN2: FMCLKE (Bit 19)                       */
#define SCUCG_PPCLKEN2_FMCLKE_Msk         (0x80000UL)               /*!< SCUCG PPCLKEN2: FMCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_LVICLKE_Pos        (18UL)                    /*!< SCUCG PPCLKEN2: LVICLKE (Bit 18)                      */
#define SCUCG_PPCLKEN2_LVICLKE_Msk        (0x40000UL)               /*!< SCUCG PPCLKEN2: LVICLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_WDTCLKE_Pos        (17UL)                    /*!< SCUCG PPCLKEN2: WDTCLKE (Bit 17)                      */
#define SCUCG_PPCLKEN2_WDTCLKE_Msk        (0x20000UL)               /*!< SCUCG PPCLKEN2: WDTCLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_LPUTCLKE_Pos       (15UL)                    /*!< SCUCG PPCLKEN2: LPUTCLKE (Bit 15)                     */
#define SCUCG_PPCLKEN2_LPUTCLKE_Msk       (0x8000UL)                /*!< SCUCG PPCLKEN2: LPUTCLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_LCDCLKE_Pos        (13UL)                    /*!< SCUCG PPCLKEN2: LCDCLKE (Bit 13)                      */
#define SCUCG_PPCLKEN2_LCDCLKE_Msk        (0x2000UL)                /*!< SCUCG PPCLKEN2: LCDCLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_CRCLKE_Pos         (12UL)                    /*!< SCUCG PPCLKEN2: CRCLKE (Bit 12)                       */
#define SCUCG_PPCLKEN2_CRCLKE_Msk         (0x1000UL)                /*!< SCUCG PPCLKEN2: CRCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_RTCCLKE_Pos        (11UL)                    /*!< SCUCG PPCLKEN2: RTCCLKE (Bit 11)                      */
#define SCUCG_PPCLKEN2_RTCCLKE_Msk        (0x800UL)                 /*!< SCUCG PPCLKEN2: RTCCLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_ADCLKE_Pos         (10UL)                    /*!< SCUCG PPCLKEN2: ADCLKE (Bit 10)                       */
#define SCUCG_PPCLKEN2_ADCLKE_Msk         (0x400UL)                 /*!< SCUCG PPCLKEN2: ADCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_I2C1CLKE_Pos       (7UL)                     /*!< SCUCG PPCLKEN2: I2C1CLKE (Bit 7)                      */
#define SCUCG_PPCLKEN2_I2C1CLKE_Msk       (0x80UL)                  /*!< SCUCG PPCLKEN2: I2C1CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_I2C0CLKE_Pos       (6UL)                     /*!< SCUCG PPCLKEN2: I2C0CLKE (Bit 6)                      */
#define SCUCG_PPCLKEN2_I2C0CLKE_Msk       (0x40UL)                  /*!< SCUCG PPCLKEN2: I2C0CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_UT1CLKE_Pos        (3UL)                     /*!< SCUCG PPCLKEN2: UT1CLKE (Bit 3)                       */
#define SCUCG_PPCLKEN2_UT1CLKE_Msk        (0x8UL)                   /*!< SCUCG PPCLKEN2: UT1CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_UT0CLKE_Pos        (2UL)                     /*!< SCUCG PPCLKEN2: UT0CLKE (Bit 2)                       */
#define SCUCG_PPCLKEN2_UT0CLKE_Msk        (0x4UL)                   /*!< SCUCG PPCLKEN2: UT0CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_UST10CLKE_Pos      (0UL)                     /*!< SCUCG PPCLKEN2: UST10CLKE (Bit 0)                     */
#define SCUCG_PPCLKEN2_UST10CLKE_Msk      (0x1UL)                   /*!< SCUCG PPCLKEN2: UST10CLKE (Bitfield-Mask: 0x01)       */
/* ========================================================  PPCLKSR  ======================================================== */
#define SCUCG_PPCLKSR_T50CLK_Pos          (24UL)                    /*!< SCUCG PPCLKSR: T50CLK (Bit 24)                        */
#define SCUCG_PPCLKSR_T50CLK_Msk          (0x3000000UL)             /*!< SCUCG PPCLKSR: T50CLK (Bitfield-Mask: 0x03)           */
#define SCUCG_PPCLKSR_LPUTCLK_Pos         (10UL)                    /*!< SCUCG PPCLKSR: LPUTCLK (Bit 10)                       */
#define SCUCG_PPCLKSR_LPUTCLK_Msk         (0xc00UL)                 /*!< SCUCG PPCLKSR: LPUTCLK (Bitfield-Mask: 0x03)          */
#define SCUCG_PPCLKSR_RTCCLK_Pos          (8UL)                     /*!< SCUCG PPCLKSR: RTCCLK (Bit 8)                         */
#define SCUCG_PPCLKSR_RTCCLK_Msk          (0x300UL)                 /*!< SCUCG PPCLKSR: RTCCLK (Bitfield-Mask: 0x03)           */
#define SCUCG_PPCLKSR_LCDCLK_Pos          (6UL)                     /*!< SCUCG PPCLKSR: LCDCLK (Bit 6)                         */
#define SCUCG_PPCLKSR_LCDCLK_Msk          (0xc0UL)                  /*!< SCUCG PPCLKSR: LCDCLK (Bitfield-Mask: 0x03)           */
#define SCUCG_PPCLKSR_WDTCLK_Pos          (0UL)                     /*!< SCUCG PPCLKSR: WDTCLK (Bit 0)                         */
#define SCUCG_PPCLKSR_WDTCLK_Msk          (0x1UL)                   /*!< SCUCG PPCLKSR: WDTCLK (Bitfield-Mask: 0x01)           */
/* ========================================================  PPRST1  ========================================================= */
#define SCUCG_PPRST1_T50RST_Pos           (30UL)                    /*!< SCUCG PPRST1: T50RST (Bit 30)                         */
#define SCUCG_PPRST1_T50RST_Msk           (0x40000000UL)            /*!< SCUCG PPRST1: T50RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T43RST_Pos           (25UL)                    /*!< SCUCG PPRST1: T43RST (Bit 25)                         */
#define SCUCG_PPRST1_T43RST_Msk           (0x2000000UL)             /*!< SCUCG PPRST1: T43RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T42RST_Pos           (24UL)                    /*!< SCUCG PPRST1: T42RST (Bit 24)                         */
#define SCUCG_PPRST1_T42RST_Msk           (0x1000000UL)             /*!< SCUCG PPRST1: T42RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T41RST_Pos           (23UL)                    /*!< SCUCG PPRST1: T41RST (Bit 23)                         */
#define SCUCG_PPRST1_T41RST_Msk           (0x800000UL)              /*!< SCUCG PPRST1: T41RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T40RST_Pos           (22UL)                    /*!< SCUCG PPRST1: T40RST (Bit 22)                         */
#define SCUCG_PPRST1_T40RST_Msk           (0x400000UL)              /*!< SCUCG PPRST1: T40RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_PFRST_Pos            (5UL)                     /*!< SCUCG PPRST1: PFRST (Bit 5)                           */
#define SCUCG_PPRST1_PFRST_Msk            (0x20UL)                  /*!< SCUCG PPRST1: PFRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PERST_Pos            (4UL)                     /*!< SCUCG PPRST1: PERST (Bit 4)                           */
#define SCUCG_PPRST1_PERST_Msk            (0x10UL)                  /*!< SCUCG PPRST1: PERST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PDRST_Pos            (3UL)                     /*!< SCUCG PPRST1: PDRST (Bit 3)                           */
#define SCUCG_PPRST1_PDRST_Msk            (0x8UL)                   /*!< SCUCG PPRST1: PDRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PCRST_Pos            (2UL)                     /*!< SCUCG PPRST1: PCRST (Bit 2)                           */
#define SCUCG_PPRST1_PCRST_Msk            (0x4UL)                   /*!< SCUCG PPRST1: PCRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PBRST_Pos            (1UL)                     /*!< SCUCG PPRST1: PBRST (Bit 1)                           */
#define SCUCG_PPRST1_PBRST_Msk            (0x2UL)                   /*!< SCUCG PPRST1: PBRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PARST_Pos            (0UL)                     /*!< SCUCG PPRST1: PARST (Bit 0)                           */
#define SCUCG_PPRST1_PARST_Msk            (0x1UL)                   /*!< SCUCG PPRST1: PARST (Bitfield-Mask: 0x01)             */
/* ========================================================  PPRST2  ========================================================= */
#define SCUCG_PPRST2_DMARST_Pos           (31UL)                    /*!< SCUCG PPRST2: DMARST (Bit 31)                         */
#define SCUCG_PPRST2_DMARST_Msk           (0x80000000UL)            /*!< SCUCG PPRST2: DMARST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_CMP1RST_Pos          (28UL)                    /*!< SCUCG PPRST2: CMP1RST (Bit 28)                        */
#define SCUCG_PPRST2_CMP1RST_Msk          (0x10000000UL)            /*!< SCUCG PPRST2: CMP1RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_CMP0RST_Pos          (27UL)                    /*!< SCUCG PPRST2: CMP0RST (Bit 27)                        */
#define SCUCG_PPRST2_CMP0RST_Msk          (0x8000000UL)             /*!< SCUCG PPRST2: CMP0RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_SC1RST_Pos           (25UL)                    /*!< SCUCG PPRST2: SC1RST (Bit 25)                         */
#define SCUCG_PPRST2_SC1RST_Msk           (0x2000000UL)             /*!< SCUCG PPRST2: SC1RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_SC0RST_Pos           (24UL)                    /*!< SCUCG PPRST2: SC0RST (Bit 24)                         */
#define SCUCG_PPRST2_SC0RST_Msk           (0x1000000UL)             /*!< SCUCG PPRST2: SC0RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_SPI1RST_Pos          (21UL)                    /*!< SCUCG PPRST2: SPI1RST (Bit 21)                        */
#define SCUCG_PPRST2_SPI1RST_Msk          (0x200000UL)              /*!< SCUCG PPRST2: SPI1RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_SPI0RST_Pos          (20UL)                    /*!< SCUCG PPRST2: SPI0RST (Bit 20)                        */
#define SCUCG_PPRST2_SPI0RST_Msk          (0x100000UL)              /*!< SCUCG PPRST2: SPI0RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_FMCRST_Pos           (19UL)                    /*!< SCUCG PPRST2: FMCRST (Bit 19)                         */
#define SCUCG_PPRST2_FMCRST_Msk           (0x80000UL)               /*!< SCUCG PPRST2: FMCRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_LVIRST_Pos           (18UL)                    /*!< SCUCG PPRST2: LVIRST (Bit 18)                         */
#define SCUCG_PPRST2_LVIRST_Msk           (0x40000UL)               /*!< SCUCG PPRST2: LVIRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_LPUTRST_Pos          (15UL)                    /*!< SCUCG PPRST2: LPUTRST (Bit 15)                        */
#define SCUCG_PPRST2_LPUTRST_Msk          (0x8000UL)                /*!< SCUCG PPRST2: LPUTRST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_LCDRST_Pos           (13UL)                    /*!< SCUCG PPRST2: LCDRST (Bit 13)                         */
#define SCUCG_PPRST2_LCDRST_Msk           (0x2000UL)                /*!< SCUCG PPRST2: LCDRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_CRRST_Pos            (12UL)                    /*!< SCUCG PPRST2: CRRST (Bit 12)                          */
#define SCUCG_PPRST2_CRRST_Msk            (0x1000UL)                /*!< SCUCG PPRST2: CRRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST2_RTCRST_Pos           (11UL)                    /*!< SCUCG PPRST2: RTCRST (Bit 11)                         */
#define SCUCG_PPRST2_RTCRST_Msk           (0x800UL)                 /*!< SCUCG PPRST2: RTCRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_ADRST_Pos            (10UL)                    /*!< SCUCG PPRST2: ADRST (Bit 10)                          */
#define SCUCG_PPRST2_ADRST_Msk            (0x400UL)                 /*!< SCUCG PPRST2: ADRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST2_I2C1RST_Pos          (7UL)                     /*!< SCUCG PPRST2: I2C1RST (Bit 7)                         */
#define SCUCG_PPRST2_I2C1RST_Msk          (0x80UL)                  /*!< SCUCG PPRST2: I2C1RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_I2C0RST_Pos          (6UL)                     /*!< SCUCG PPRST2: I2C0RST (Bit 6)                         */
#define SCUCG_PPRST2_I2C0RST_Msk          (0x40UL)                  /*!< SCUCG PPRST2: I2C0RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_UT1RST_Pos           (3UL)                     /*!< SCUCG PPRST2: UT1RST (Bit 3)                          */
#define SCUCG_PPRST2_UT1RST_Msk           (0x8UL)                   /*!< SCUCG PPRST2: UT1RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_UT0RST_Pos           (2UL)                     /*!< SCUCG PPRST2: UT0RST (Bit 2)                          */
#define SCUCG_PPRST2_UT0RST_Msk           (0x4UL)                   /*!< SCUCG PPRST2: UT0RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_UST10RST_Pos         (0UL)                     /*!< SCUCG PPRST2: UST10RST (Bit 0)                        */
#define SCUCG_PPRST2_UST10RST_Msk         (0x1UL)                   /*!< SCUCG PPRST2: UST10RST (Bitfield-Mask: 0x01)          */
/* =========================================================  XSOSC  ========================================================= */
#define SCUCG_XSOSC_ISET_I_Pos            (3UL)                     /*!< SCUCG XSOSC: ISET_I (Bit 3)                           */
#define SCUCG_XSOSC_ISET_I_Msk            (0x38UL)                  /*!< SCUCG XSOSC: ISET_I (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  LVICR  ========================================================= */
#define SCULV_LVICR_LVIEN_Pos             (7UL)                     /*!< SCULV LVICR: LVIEN (Bit 7)                            */
#define SCULV_LVICR_LVIEN_Msk             (0x80UL)                  /*!< SCULV LVICR: LVIEN (Bitfield-Mask: 0x01)              */
#define SCULV_LVICR_LVINTEN_Pos           (5UL)                     /*!< SCULV LVICR: LVINTEN (Bit 5)                          */
#define SCULV_LVICR_LVINTEN_Msk           (0x20UL)                  /*!< SCULV LVICR: LVINTEN (Bitfield-Mask: 0x01)            */
#define SCULV_LVICR_LVIFLAG_Pos           (4UL)                     /*!< SCULV LVICR: LVIFLAG (Bit 4)                          */
#define SCULV_LVICR_LVIFLAG_Msk           (0x10UL)                  /*!< SCULV LVICR: LVIFLAG (Bitfield-Mask: 0x01)            */
#define SCULV_LVICR_LVIVS_Pos             (0UL)                     /*!< SCULV LVICR: LVIVS (Bit 0)                            */
#define SCULV_LVICR_LVIVS_Msk             (0x7UL)                   /*!< SCULV LVICR: LVIVS (Bitfield-Mask: 0x07)              */
/* =========================================================  LVRCR  ========================================================= */
#define SCULV_LVRCR_LVREN_Pos             (0UL)                     /*!< SCULV LVRCR: LVREN (Bit 0)                            */
#define SCULV_LVRCR_LVREN_Msk             (0xffUL)                  /*!< SCULV LVRCR: LVREN (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define Pn_MOD_MODE12_Pos                 (24UL)                    /*!< Pn MOD: MODE12 (Bit 24)                               */
#define Pn_MOD_MODE12_Msk                 (0x3000000UL)             /*!< Pn MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE11_Pos                 (22UL)                    /*!< Pn MOD: MODE11 (Bit 22)                               */
#define Pn_MOD_MODE11_Msk                 (0xc00000UL)              /*!< Pn MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE10_Pos                 (20UL)                    /*!< Pn MOD: MODE10 (Bit 20)                               */
#define Pn_MOD_MODE10_Msk                 (0x300000UL)              /*!< Pn MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE9_Pos                  (18UL)                    /*!< Pn MOD: MODE9 (Bit 18)                                */
#define Pn_MOD_MODE9_Msk                  (0xc0000UL)               /*!< Pn MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE8_Pos                  (16UL)                    /*!< Pn MOD: MODE8 (Bit 16)                                */
#define Pn_MOD_MODE8_Msk                  (0x30000UL)               /*!< Pn MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE7_Pos                  (14UL)                    /*!< Pn MOD: MODE7 (Bit 14)                                */
#define Pn_MOD_MODE7_Msk                  (0xc000UL)                /*!< Pn MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE6_Pos                  (12UL)                    /*!< Pn MOD: MODE6 (Bit 12)                                */
#define Pn_MOD_MODE6_Msk                  (0x3000UL)                /*!< Pn MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE5_Pos                  (10UL)                    /*!< Pn MOD: MODE5 (Bit 10)                                */
#define Pn_MOD_MODE5_Msk                  (0xc00UL)                 /*!< Pn MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE4_Pos                  (8UL)                     /*!< Pn MOD: MODE4 (Bit 8)                                 */
#define Pn_MOD_MODE4_Msk                  (0x300UL)                 /*!< Pn MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE3_Pos                  (6UL)                     /*!< Pn MOD: MODE3 (Bit 6)                                 */
#define Pn_MOD_MODE3_Msk                  (0xc0UL)                  /*!< Pn MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE2_Pos                  (4UL)                     /*!< Pn MOD: MODE2 (Bit 4)                                 */
#define Pn_MOD_MODE2_Msk                  (0x30UL)                  /*!< Pn MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE1_Pos                  (2UL)                     /*!< Pn MOD: MODE1 (Bit 2)                                 */
#define Pn_MOD_MODE1_Msk                  (0xcUL)                   /*!< Pn MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE0_Pos                  (0UL)                     /*!< Pn MOD: MODE0 (Bit 0)                                 */
#define Pn_MOD_MODE0_Msk                  (0x3UL)                   /*!< Pn MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define Pn_TYP_TYP12_Pos                  (12UL)                    /*!< Pn TYP: TYP12 (Bit 12)                                */
#define Pn_TYP_TYP12_Msk                  (0x1000UL)                /*!< Pn TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP11_Pos                  (11UL)                    /*!< Pn TYP: TYP11 (Bit 11)                                */
#define Pn_TYP_TYP11_Msk                  (0x800UL)                 /*!< Pn TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP10_Pos                  (10UL)                    /*!< Pn TYP: TYP10 (Bit 10)                                */
#define Pn_TYP_TYP10_Msk                  (0x400UL)                 /*!< Pn TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP9_Pos                   (9UL)                     /*!< Pn TYP: TYP9 (Bit 9)                                  */
#define Pn_TYP_TYP9_Msk                   (0x200UL)                 /*!< Pn TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP8_Pos                   (8UL)                     /*!< Pn TYP: TYP8 (Bit 8)                                  */
#define Pn_TYP_TYP8_Msk                   (0x100UL)                 /*!< Pn TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP7_Pos                   (7UL)                     /*!< Pn TYP: TYP7 (Bit 7)                                  */
#define Pn_TYP_TYP7_Msk                   (0x80UL)                  /*!< Pn TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP6_Pos                   (6UL)                     /*!< Pn TYP: TYP6 (Bit 6)                                  */
#define Pn_TYP_TYP6_Msk                   (0x40UL)                  /*!< Pn TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP5_Pos                   (5UL)                     /*!< Pn TYP: TYP5 (Bit 5)                                  */
#define Pn_TYP_TYP5_Msk                   (0x20UL)                  /*!< Pn TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP4_Pos                   (4UL)                     /*!< Pn TYP: TYP4 (Bit 4)                                  */
#define Pn_TYP_TYP4_Msk                   (0x10UL)                  /*!< Pn TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP3_Pos                   (3UL)                     /*!< Pn TYP: TYP3 (Bit 3)                                  */
#define Pn_TYP_TYP3_Msk                   (0x8UL)                   /*!< Pn TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP2_Pos                   (2UL)                     /*!< Pn TYP: TYP2 (Bit 2)                                  */
#define Pn_TYP_TYP2_Msk                   (0x4UL)                   /*!< Pn TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP1_Pos                   (1UL)                     /*!< Pn TYP: TYP1 (Bit 1)                                  */
#define Pn_TYP_TYP1_Msk                   (0x2UL)                   /*!< Pn TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP0_Pos                   (0UL)                     /*!< Pn TYP: TYP0 (Bit 0)                                  */
#define Pn_TYP_TYP0_Msk                   (0x1UL)                   /*!< Pn TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define Pn_AFSR1_AFSR7_Pos                (28UL)                    /*!< Pn AFSR1: AFSR7 (Bit 28)                              */
#define Pn_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< Pn AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR6_Pos                (24UL)                    /*!< Pn AFSR1: AFSR6 (Bit 24)                              */
#define Pn_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< Pn AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR5_Pos                (20UL)                    /*!< Pn AFSR1: AFSR5 (Bit 20)                              */
#define Pn_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< Pn AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR4_Pos                (16UL)                    /*!< Pn AFSR1: AFSR4 (Bit 16)                              */
#define Pn_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< Pn AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR3_Pos                (12UL)                    /*!< Pn AFSR1: AFSR3 (Bit 12)                              */
#define Pn_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< Pn AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR2_Pos                (8UL)                     /*!< Pn AFSR1: AFSR2 (Bit 8)                               */
#define Pn_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< Pn AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR1_Pos                (4UL)                     /*!< Pn AFSR1: AFSR1 (Bit 4)                               */
#define Pn_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< Pn AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR0_Pos                (0UL)                     /*!< Pn AFSR1: AFSR0 (Bit 0)                               */
#define Pn_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< Pn AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define Pn_AFSR2_AFSR12_Pos               (16UL)                    /*!< Pn AFSR2: AFSR12 (Bit 16)                             */
#define Pn_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< Pn AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR11_Pos               (12UL)                    /*!< Pn AFSR2: AFSR11 (Bit 12)                             */
#define Pn_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< Pn AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR10_Pos               (8UL)                     /*!< Pn AFSR2: AFSR10 (Bit 8)                              */
#define Pn_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< Pn AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR9_Pos                (4UL)                     /*!< Pn AFSR2: AFSR9 (Bit 4)                               */
#define Pn_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< Pn AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR2_AFSR8_Pos                (0UL)                     /*!< Pn AFSR2: AFSR8 (Bit 0)                               */
#define Pn_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< Pn AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define Pn_PUPD_PUPD12_Pos                (24UL)                    /*!< Pn PUPD: PUPD12 (Bit 24)                              */
#define Pn_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< Pn PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD11_Pos                (22UL)                    /*!< Pn PUPD: PUPD11 (Bit 22)                              */
#define Pn_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< Pn PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD10_Pos                (20UL)                    /*!< Pn PUPD: PUPD10 (Bit 20)                              */
#define Pn_PUPD_PUPD10_Msk                (0x300000UL)              /*!< Pn PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD9_Pos                 (18UL)                    /*!< Pn PUPD: PUPD9 (Bit 18)                               */
#define Pn_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< Pn PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD8_Pos                 (16UL)                    /*!< Pn PUPD: PUPD8 (Bit 16)                               */
#define Pn_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< Pn PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD7_Pos                 (14UL)                    /*!< Pn PUPD: PUPD7 (Bit 14)                               */
#define Pn_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< Pn PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD6_Pos                 (12UL)                    /*!< Pn PUPD: PUPD6 (Bit 12)                               */
#define Pn_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< Pn PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD5_Pos                 (10UL)                    /*!< Pn PUPD: PUPD5 (Bit 10)                               */
#define Pn_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< Pn PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD4_Pos                 (8UL)                     /*!< Pn PUPD: PUPD4 (Bit 8)                                */
#define Pn_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< Pn PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD3_Pos                 (6UL)                     /*!< Pn PUPD: PUPD3 (Bit 6)                                */
#define Pn_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< Pn PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD2_Pos                 (4UL)                     /*!< Pn PUPD: PUPD2 (Bit 4)                                */
#define Pn_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< Pn PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD1_Pos                 (2UL)                     /*!< Pn PUPD: PUPD1 (Bit 2)                                */
#define Pn_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< Pn PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD0_Pos                 (0UL)                     /*!< Pn PUPD: PUPD0 (Bit 0)                                */
#define Pn_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< Pn PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define Pn_INDR_INDR12_Pos                (12UL)                    /*!< Pn INDR: INDR12 (Bit 12)                              */
#define Pn_INDR_INDR12_Msk                (0x1000UL)                /*!< Pn INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR11_Pos                (11UL)                    /*!< Pn INDR: INDR11 (Bit 11)                              */
#define Pn_INDR_INDR11_Msk                (0x800UL)                 /*!< Pn INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR10_Pos                (10UL)                    /*!< Pn INDR: INDR10 (Bit 10)                              */
#define Pn_INDR_INDR10_Msk                (0x400UL)                 /*!< Pn INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR9_Pos                 (9UL)                     /*!< Pn INDR: INDR9 (Bit 9)                                */
#define Pn_INDR_INDR9_Msk                 (0x200UL)                 /*!< Pn INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR8_Pos                 (8UL)                     /*!< Pn INDR: INDR8 (Bit 8)                                */
#define Pn_INDR_INDR8_Msk                 (0x100UL)                 /*!< Pn INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR7_Pos                 (7UL)                     /*!< Pn INDR: INDR7 (Bit 7)                                */
#define Pn_INDR_INDR7_Msk                 (0x80UL)                  /*!< Pn INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR6_Pos                 (6UL)                     /*!< Pn INDR: INDR6 (Bit 6)                                */
#define Pn_INDR_INDR6_Msk                 (0x40UL)                  /*!< Pn INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR5_Pos                 (5UL)                     /*!< Pn INDR: INDR5 (Bit 5)                                */
#define Pn_INDR_INDR5_Msk                 (0x20UL)                  /*!< Pn INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR4_Pos                 (4UL)                     /*!< Pn INDR: INDR4 (Bit 4)                                */
#define Pn_INDR_INDR4_Msk                 (0x10UL)                  /*!< Pn INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR3_Pos                 (3UL)                     /*!< Pn INDR: INDR3 (Bit 3)                                */
#define Pn_INDR_INDR3_Msk                 (0x8UL)                   /*!< Pn INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR2_Pos                 (2UL)                     /*!< Pn INDR: INDR2 (Bit 2)                                */
#define Pn_INDR_INDR2_Msk                 (0x4UL)                   /*!< Pn INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR1_Pos                 (1UL)                     /*!< Pn INDR: INDR1 (Bit 1)                                */
#define Pn_INDR_INDR1_Msk                 (0x2UL)                   /*!< Pn INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR0_Pos                 (0UL)                     /*!< Pn INDR: INDR0 (Bit 0)                                */
#define Pn_INDR_INDR0_Msk                 (0x1UL)                   /*!< Pn INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define Pn_OUTDR_OUTDR12_Pos              (12UL)                    /*!< Pn OUTDR: OUTDR12 (Bit 12)                            */
#define Pn_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< Pn OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR11_Pos              (11UL)                    /*!< Pn OUTDR: OUTDR11 (Bit 11)                            */
#define Pn_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< Pn OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR10_Pos              (10UL)                    /*!< Pn OUTDR: OUTDR10 (Bit 10)                            */
#define Pn_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< Pn OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR9_Pos               (9UL)                     /*!< Pn OUTDR: OUTDR9 (Bit 9)                              */
#define Pn_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< Pn OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR8_Pos               (8UL)                     /*!< Pn OUTDR: OUTDR8 (Bit 8)                              */
#define Pn_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< Pn OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR7_Pos               (7UL)                     /*!< Pn OUTDR: OUTDR7 (Bit 7)                              */
#define Pn_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< Pn OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR6_Pos               (6UL)                     /*!< Pn OUTDR: OUTDR6 (Bit 6)                              */
#define Pn_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< Pn OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR5_Pos               (5UL)                     /*!< Pn OUTDR: OUTDR5 (Bit 5)                              */
#define Pn_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< Pn OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR4_Pos               (4UL)                     /*!< Pn OUTDR: OUTDR4 (Bit 4)                              */
#define Pn_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< Pn OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR3_Pos               (3UL)                     /*!< Pn OUTDR: OUTDR3 (Bit 3)                              */
#define Pn_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< Pn OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR2_Pos               (2UL)                     /*!< Pn OUTDR: OUTDR2 (Bit 2)                              */
#define Pn_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< Pn OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR1_Pos               (1UL)                     /*!< Pn OUTDR: OUTDR1 (Bit 1)                              */
#define Pn_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< Pn OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR0_Pos               (0UL)                     /*!< Pn OUTDR: OUTDR0 (Bit 0)                              */
#define Pn_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< Pn OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define Pn_BSR_BSR12_Pos                  (12UL)                    /*!< Pn BSR: BSR12 (Bit 12)                                */
#define Pn_BSR_BSR12_Msk                  (0x1000UL)                /*!< Pn BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR11_Pos                  (11UL)                    /*!< Pn BSR: BSR11 (Bit 11)                                */
#define Pn_BSR_BSR11_Msk                  (0x800UL)                 /*!< Pn BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR10_Pos                  (10UL)                    /*!< Pn BSR: BSR10 (Bit 10)                                */
#define Pn_BSR_BSR10_Msk                  (0x400UL)                 /*!< Pn BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR9_Pos                   (9UL)                     /*!< Pn BSR: BSR9 (Bit 9)                                  */
#define Pn_BSR_BSR9_Msk                   (0x200UL)                 /*!< Pn BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR8_Pos                   (8UL)                     /*!< Pn BSR: BSR8 (Bit 8)                                  */
#define Pn_BSR_BSR8_Msk                   (0x100UL)                 /*!< Pn BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR7_Pos                   (7UL)                     /*!< Pn BSR: BSR7 (Bit 7)                                  */
#define Pn_BSR_BSR7_Msk                   (0x80UL)                  /*!< Pn BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR6_Pos                   (6UL)                     /*!< Pn BSR: BSR6 (Bit 6)                                  */
#define Pn_BSR_BSR6_Msk                   (0x40UL)                  /*!< Pn BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR5_Pos                   (5UL)                     /*!< Pn BSR: BSR5 (Bit 5)                                  */
#define Pn_BSR_BSR5_Msk                   (0x20UL)                  /*!< Pn BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR4_Pos                   (4UL)                     /*!< Pn BSR: BSR4 (Bit 4)                                  */
#define Pn_BSR_BSR4_Msk                   (0x10UL)                  /*!< Pn BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR3_Pos                   (3UL)                     /*!< Pn BSR: BSR3 (Bit 3)                                  */
#define Pn_BSR_BSR3_Msk                   (0x8UL)                   /*!< Pn BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR2_Pos                   (2UL)                     /*!< Pn BSR: BSR2 (Bit 2)                                  */
#define Pn_BSR_BSR2_Msk                   (0x4UL)                   /*!< Pn BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR1_Pos                   (1UL)                     /*!< Pn BSR: BSR1 (Bit 1)                                  */
#define Pn_BSR_BSR1_Msk                   (0x2UL)                   /*!< Pn BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR0_Pos                   (0UL)                     /*!< Pn BSR: BSR0 (Bit 0)                                  */
#define Pn_BSR_BSR0_Msk                   (0x1UL)                   /*!< Pn BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define Pn_BCR_BCR12_Pos                  (12UL)                    /*!< Pn BCR: BCR12 (Bit 12)                                */
#define Pn_BCR_BCR12_Msk                  (0x1000UL)                /*!< Pn BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR11_Pos                  (11UL)                    /*!< Pn BCR: BCR11 (Bit 11)                                */
#define Pn_BCR_BCR11_Msk                  (0x800UL)                 /*!< Pn BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR10_Pos                  (10UL)                    /*!< Pn BCR: BCR10 (Bit 10)                                */
#define Pn_BCR_BCR10_Msk                  (0x400UL)                 /*!< Pn BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR9_Pos                   (9UL)                     /*!< Pn BCR: BCR9 (Bit 9)                                  */
#define Pn_BCR_BCR9_Msk                   (0x200UL)                 /*!< Pn BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR8_Pos                   (8UL)                     /*!< Pn BCR: BCR8 (Bit 8)                                  */
#define Pn_BCR_BCR8_Msk                   (0x100UL)                 /*!< Pn BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR7_Pos                   (7UL)                     /*!< Pn BCR: BCR7 (Bit 7)                                  */
#define Pn_BCR_BCR7_Msk                   (0x80UL)                  /*!< Pn BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR6_Pos                   (6UL)                     /*!< Pn BCR: BCR6 (Bit 6)                                  */
#define Pn_BCR_BCR6_Msk                   (0x40UL)                  /*!< Pn BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR5_Pos                   (5UL)                     /*!< Pn BCR: BCR5 (Bit 5)                                  */
#define Pn_BCR_BCR5_Msk                   (0x20UL)                  /*!< Pn BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR4_Pos                   (4UL)                     /*!< Pn BCR: BCR4 (Bit 4)                                  */
#define Pn_BCR_BCR4_Msk                   (0x10UL)                  /*!< Pn BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR3_Pos                   (3UL)                     /*!< Pn BCR: BCR3 (Bit 3)                                  */
#define Pn_BCR_BCR3_Msk                   (0x8UL)                   /*!< Pn BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR2_Pos                   (2UL)                     /*!< Pn BCR: BCR2 (Bit 2)                                  */
#define Pn_BCR_BCR2_Msk                   (0x4UL)                   /*!< Pn BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR1_Pos                   (1UL)                     /*!< Pn BCR: BCR1 (Bit 1)                                  */
#define Pn_BCR_BCR1_Msk                   (0x2UL)                   /*!< Pn BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR0_Pos                   (0UL)                     /*!< Pn BCR: BCR0 (Bit 0)                                  */
#define Pn_BCR_BCR0_Msk                   (0x1UL)                   /*!< Pn BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define Pn_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< Pn OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define Pn_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< Pn OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< Pn OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define Pn_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< Pn OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< Pn OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define Pn_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< Pn OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< Pn OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define Pn_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< Pn OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< Pn OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define Pn_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< Pn OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< Pn OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define Pn_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< Pn OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< Pn OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define Pn_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< Pn OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< Pn OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define Pn_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< Pn OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< Pn OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define Pn_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< Pn OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< Pn OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define Pn_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< Pn OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< Pn OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define Pn_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< Pn OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< Pn OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define Pn_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< Pn OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< Pn OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define Pn_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< Pn OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define Pn_DBCR_DBCLK_Pos                 (16UL)                    /*!< Pn DBCR: DBCLK (Bit 16)                               */
#define Pn_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< Pn DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define Pn_DBCR_DBEN12_Pos                (12UL)                    /*!< Pn DBCR: DBEN12 (Bit 12)                              */
#define Pn_DBCR_DBEN12_Msk                (0x1000UL)                /*!< Pn DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define Pn_DBCR_DBEN11_Pos                (11UL)                    /*!< Pn DBCR: DBEN11 (Bit 11)                              */
#define Pn_DBCR_DBEN11_Msk                (0x800UL)                 /*!< Pn DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define Pn_DBCR_DBEN10_Pos                (10UL)                    /*!< Pn DBCR: DBEN10 (Bit 10)                              */
#define Pn_DBCR_DBEN10_Msk                (0x400UL)                 /*!< Pn DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define Pn_DBCR_DBEN9_Pos                 (9UL)                     /*!< Pn DBCR: DBEN9 (Bit 9)                                */
#define Pn_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< Pn DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN8_Pos                 (8UL)                     /*!< Pn DBCR: DBEN8 (Bit 8)                                */
#define Pn_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< Pn DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN7_Pos                 (7UL)                     /*!< Pn DBCR: DBEN7 (Bit 7)                                */
#define Pn_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< Pn DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN6_Pos                 (6UL)                     /*!< Pn DBCR: DBEN6 (Bit 6)                                */
#define Pn_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< Pn DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN5_Pos                 (5UL)                     /*!< Pn DBCR: DBEN5 (Bit 5)                                */
#define Pn_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< Pn DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN4_Pos                 (4UL)                     /*!< Pn DBCR: DBEN4 (Bit 4)                                */
#define Pn_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< Pn DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN3_Pos                 (3UL)                     /*!< Pn DBCR: DBEN3 (Bit 3)                                */
#define Pn_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< Pn DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN2_Pos                 (2UL)                     /*!< Pn DBCR: DBEN2 (Bit 2)                                */
#define Pn_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< Pn DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN1_Pos                 (1UL)                     /*!< Pn DBCR: DBEN1 (Bit 1)                                */
#define Pn_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< Pn DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN0_Pos                 (0UL)                     /*!< Pn DBCR: DBEN0 (Bit 0)                                */
#define Pn_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< Pn DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */


/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PA_MOD_MODE12_Pos                 (24UL)                    /*!< PA MOD: MODE12 (Bit 24)                               */
#define PA_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PA MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE11_Pos                 (22UL)                    /*!< PA MOD: MODE11 (Bit 22)                               */
#define PA_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PA MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE10_Pos                 (20UL)                    /*!< PA MOD: MODE10 (Bit 20)                               */
#define PA_MOD_MODE10_Msk                 (0x300000UL)              /*!< PA MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE9_Pos                  (18UL)                    /*!< PA MOD: MODE9 (Bit 18)                                */
#define PA_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PA MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE8_Pos                  (16UL)                    /*!< PA MOD: MODE8 (Bit 16)                                */
#define PA_MOD_MODE8_Msk                  (0x30000UL)               /*!< PA MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE7_Pos                  (14UL)                    /*!< PA MOD: MODE7 (Bit 14)                                */
#define PA_MOD_MODE7_Msk                  (0xc000UL)                /*!< PA MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE6_Pos                  (12UL)                    /*!< PA MOD: MODE6 (Bit 12)                                */
#define PA_MOD_MODE6_Msk                  (0x3000UL)                /*!< PA MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE5_Pos                  (10UL)                    /*!< PA MOD: MODE5 (Bit 10)                                */
#define PA_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PA MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE4_Pos                  (8UL)                     /*!< PA MOD: MODE4 (Bit 8)                                 */
#define PA_MOD_MODE4_Msk                  (0x300UL)                 /*!< PA MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE3_Pos                  (6UL)                     /*!< PA MOD: MODE3 (Bit 6)                                 */
#define PA_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PA MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE2_Pos                  (4UL)                     /*!< PA MOD: MODE2 (Bit 4)                                 */
#define PA_MOD_MODE2_Msk                  (0x30UL)                  /*!< PA MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE1_Pos                  (2UL)                     /*!< PA MOD: MODE1 (Bit 2)                                 */
#define PA_MOD_MODE1_Msk                  (0xcUL)                   /*!< PA MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE0_Pos                  (0UL)                     /*!< PA MOD: MODE0 (Bit 0)                                 */
#define PA_MOD_MODE0_Msk                  (0x3UL)                   /*!< PA MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PA_TYP_TYP12_Pos                  (12UL)                    /*!< PA TYP: TYP12 (Bit 12)                                */
#define PA_TYP_TYP12_Msk                  (0x1000UL)                /*!< PA TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP11_Pos                  (11UL)                    /*!< PA TYP: TYP11 (Bit 11)                                */
#define PA_TYP_TYP11_Msk                  (0x800UL)                 /*!< PA TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP10_Pos                  (10UL)                    /*!< PA TYP: TYP10 (Bit 10)                                */
#define PA_TYP_TYP10_Msk                  (0x400UL)                 /*!< PA TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP9_Pos                   (9UL)                     /*!< PA TYP: TYP9 (Bit 9)                                  */
#define PA_TYP_TYP9_Msk                   (0x200UL)                 /*!< PA TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP8_Pos                   (8UL)                     /*!< PA TYP: TYP8 (Bit 8)                                  */
#define PA_TYP_TYP8_Msk                   (0x100UL)                 /*!< PA TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP7_Pos                   (7UL)                     /*!< PA TYP: TYP7 (Bit 7)                                  */
#define PA_TYP_TYP7_Msk                   (0x80UL)                  /*!< PA TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP6_Pos                   (6UL)                     /*!< PA TYP: TYP6 (Bit 6)                                  */
#define PA_TYP_TYP6_Msk                   (0x40UL)                  /*!< PA TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP5_Pos                   (5UL)                     /*!< PA TYP: TYP5 (Bit 5)                                  */
#define PA_TYP_TYP5_Msk                   (0x20UL)                  /*!< PA TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP4_Pos                   (4UL)                     /*!< PA TYP: TYP4 (Bit 4)                                  */
#define PA_TYP_TYP4_Msk                   (0x10UL)                  /*!< PA TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP3_Pos                   (3UL)                     /*!< PA TYP: TYP3 (Bit 3)                                  */
#define PA_TYP_TYP3_Msk                   (0x8UL)                   /*!< PA TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP2_Pos                   (2UL)                     /*!< PA TYP: TYP2 (Bit 2)                                  */
#define PA_TYP_TYP2_Msk                   (0x4UL)                   /*!< PA TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP1_Pos                   (1UL)                     /*!< PA TYP: TYP1 (Bit 1)                                  */
#define PA_TYP_TYP1_Msk                   (0x2UL)                   /*!< PA TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP0_Pos                   (0UL)                     /*!< PA TYP: TYP0 (Bit 0)                                  */
#define PA_TYP_TYP0_Msk                   (0x1UL)                   /*!< PA TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PA_AFSR1_AFSR7_Pos                (28UL)                    /*!< PA AFSR1: AFSR7 (Bit 28)                              */
#define PA_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PA AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR6_Pos                (24UL)                    /*!< PA AFSR1: AFSR6 (Bit 24)                              */
#define PA_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PA AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR5_Pos                (20UL)                    /*!< PA AFSR1: AFSR5 (Bit 20)                              */
#define PA_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PA AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR4_Pos                (16UL)                    /*!< PA AFSR1: AFSR4 (Bit 16)                              */
#define PA_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PA AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR3_Pos                (12UL)                    /*!< PA AFSR1: AFSR3 (Bit 12)                              */
#define PA_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PA AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR2_Pos                (8UL)                     /*!< PA AFSR1: AFSR2 (Bit 8)                               */
#define PA_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PA AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR1_Pos                (4UL)                     /*!< PA AFSR1: AFSR1 (Bit 4)                               */
#define PA_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PA AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR0_Pos                (0UL)                     /*!< PA AFSR1: AFSR0 (Bit 0)                               */
#define PA_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PA AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PA_AFSR2_AFSR12_Pos               (16UL)                    /*!< PA AFSR2: AFSR12 (Bit 16)                             */
#define PA_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PA AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR11_Pos               (12UL)                    /*!< PA AFSR2: AFSR11 (Bit 12)                             */
#define PA_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PA AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR10_Pos               (8UL)                     /*!< PA AFSR2: AFSR10 (Bit 8)                              */
#define PA_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PA AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR9_Pos                (4UL)                     /*!< PA AFSR2: AFSR9 (Bit 4)                               */
#define PA_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PA AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR2_AFSR8_Pos                (0UL)                     /*!< PA AFSR2: AFSR8 (Bit 0)                               */
#define PA_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PA AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PA_PUPD_PUPD12_Pos                (24UL)                    /*!< PA PUPD: PUPD12 (Bit 24)                              */
#define PA_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PA PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD11_Pos                (22UL)                    /*!< PA PUPD: PUPD11 (Bit 22)                              */
#define PA_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PA PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD10_Pos                (20UL)                    /*!< PA PUPD: PUPD10 (Bit 20)                              */
#define PA_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PA PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD9_Pos                 (18UL)                    /*!< PA PUPD: PUPD9 (Bit 18)                               */
#define PA_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PA PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD8_Pos                 (16UL)                    /*!< PA PUPD: PUPD8 (Bit 16)                               */
#define PA_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PA PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD7_Pos                 (14UL)                    /*!< PA PUPD: PUPD7 (Bit 14)                               */
#define PA_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PA PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD6_Pos                 (12UL)                    /*!< PA PUPD: PUPD6 (Bit 12)                               */
#define PA_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PA PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD5_Pos                 (10UL)                    /*!< PA PUPD: PUPD5 (Bit 10)                               */
#define PA_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PA PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD4_Pos                 (8UL)                     /*!< PA PUPD: PUPD4 (Bit 8)                                */
#define PA_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PA PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD3_Pos                 (6UL)                     /*!< PA PUPD: PUPD3 (Bit 6)                                */
#define PA_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PA PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD2_Pos                 (4UL)                     /*!< PA PUPD: PUPD2 (Bit 4)                                */
#define PA_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PA PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD1_Pos                 (2UL)                     /*!< PA PUPD: PUPD1 (Bit 2)                                */
#define PA_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PA PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD0_Pos                 (0UL)                     /*!< PA PUPD: PUPD0 (Bit 0)                                */
#define PA_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PA PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PA_INDR_INDR12_Pos                (12UL)                    /*!< PA INDR: INDR12 (Bit 12)                              */
#define PA_INDR_INDR12_Msk                (0x1000UL)                /*!< PA INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR11_Pos                (11UL)                    /*!< PA INDR: INDR11 (Bit 11)                              */
#define PA_INDR_INDR11_Msk                (0x800UL)                 /*!< PA INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR10_Pos                (10UL)                    /*!< PA INDR: INDR10 (Bit 10)                              */
#define PA_INDR_INDR10_Msk                (0x400UL)                 /*!< PA INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR9_Pos                 (9UL)                     /*!< PA INDR: INDR9 (Bit 9)                                */
#define PA_INDR_INDR9_Msk                 (0x200UL)                 /*!< PA INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR8_Pos                 (8UL)                     /*!< PA INDR: INDR8 (Bit 8)                                */
#define PA_INDR_INDR8_Msk                 (0x100UL)                 /*!< PA INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR7_Pos                 (7UL)                     /*!< PA INDR: INDR7 (Bit 7)                                */
#define PA_INDR_INDR7_Msk                 (0x80UL)                  /*!< PA INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR6_Pos                 (6UL)                     /*!< PA INDR: INDR6 (Bit 6)                                */
#define PA_INDR_INDR6_Msk                 (0x40UL)                  /*!< PA INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR5_Pos                 (5UL)                     /*!< PA INDR: INDR5 (Bit 5)                                */
#define PA_INDR_INDR5_Msk                 (0x20UL)                  /*!< PA INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR4_Pos                 (4UL)                     /*!< PA INDR: INDR4 (Bit 4)                                */
#define PA_INDR_INDR4_Msk                 (0x10UL)                  /*!< PA INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR3_Pos                 (3UL)                     /*!< PA INDR: INDR3 (Bit 3)                                */
#define PA_INDR_INDR3_Msk                 (0x8UL)                   /*!< PA INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR2_Pos                 (2UL)                     /*!< PA INDR: INDR2 (Bit 2)                                */
#define PA_INDR_INDR2_Msk                 (0x4UL)                   /*!< PA INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR1_Pos                 (1UL)                     /*!< PA INDR: INDR1 (Bit 1)                                */
#define PA_INDR_INDR1_Msk                 (0x2UL)                   /*!< PA INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR0_Pos                 (0UL)                     /*!< PA INDR: INDR0 (Bit 0)                                */
#define PA_INDR_INDR0_Msk                 (0x1UL)                   /*!< PA INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PA_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PA OUTDR: OUTDR12 (Bit 12)                            */
#define PA_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PA OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PA OUTDR: OUTDR11 (Bit 11)                            */
#define PA_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PA OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PA OUTDR: OUTDR10 (Bit 10)                            */
#define PA_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PA OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PA OUTDR: OUTDR9 (Bit 9)                              */
#define PA_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PA OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PA OUTDR: OUTDR8 (Bit 8)                              */
#define PA_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PA OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PA OUTDR: OUTDR7 (Bit 7)                              */
#define PA_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PA OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PA OUTDR: OUTDR6 (Bit 6)                              */
#define PA_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PA OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PA OUTDR: OUTDR5 (Bit 5)                              */
#define PA_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PA OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PA OUTDR: OUTDR4 (Bit 4)                              */
#define PA_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PA OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PA OUTDR: OUTDR3 (Bit 3)                              */
#define PA_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PA OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PA OUTDR: OUTDR2 (Bit 2)                              */
#define PA_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PA OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PA OUTDR: OUTDR1 (Bit 1)                              */
#define PA_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PA OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PA OUTDR: OUTDR0 (Bit 0)                              */
#define PA_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PA OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PA_BSR_BSR12_Pos                  (12UL)                    /*!< PA BSR: BSR12 (Bit 12)                                */
#define PA_BSR_BSR12_Msk                  (0x1000UL)                /*!< PA BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR11_Pos                  (11UL)                    /*!< PA BSR: BSR11 (Bit 11)                                */
#define PA_BSR_BSR11_Msk                  (0x800UL)                 /*!< PA BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR10_Pos                  (10UL)                    /*!< PA BSR: BSR10 (Bit 10)                                */
#define PA_BSR_BSR10_Msk                  (0x400UL)                 /*!< PA BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR9_Pos                   (9UL)                     /*!< PA BSR: BSR9 (Bit 9)                                  */
#define PA_BSR_BSR9_Msk                   (0x200UL)                 /*!< PA BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR8_Pos                   (8UL)                     /*!< PA BSR: BSR8 (Bit 8)                                  */
#define PA_BSR_BSR8_Msk                   (0x100UL)                 /*!< PA BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR7_Pos                   (7UL)                     /*!< PA BSR: BSR7 (Bit 7)                                  */
#define PA_BSR_BSR7_Msk                   (0x80UL)                  /*!< PA BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR6_Pos                   (6UL)                     /*!< PA BSR: BSR6 (Bit 6)                                  */
#define PA_BSR_BSR6_Msk                   (0x40UL)                  /*!< PA BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR5_Pos                   (5UL)                     /*!< PA BSR: BSR5 (Bit 5)                                  */
#define PA_BSR_BSR5_Msk                   (0x20UL)                  /*!< PA BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR4_Pos                   (4UL)                     /*!< PA BSR: BSR4 (Bit 4)                                  */
#define PA_BSR_BSR4_Msk                   (0x10UL)                  /*!< PA BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR3_Pos                   (3UL)                     /*!< PA BSR: BSR3 (Bit 3)                                  */
#define PA_BSR_BSR3_Msk                   (0x8UL)                   /*!< PA BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR2_Pos                   (2UL)                     /*!< PA BSR: BSR2 (Bit 2)                                  */
#define PA_BSR_BSR2_Msk                   (0x4UL)                   /*!< PA BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR1_Pos                   (1UL)                     /*!< PA BSR: BSR1 (Bit 1)                                  */
#define PA_BSR_BSR1_Msk                   (0x2UL)                   /*!< PA BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR0_Pos                   (0UL)                     /*!< PA BSR: BSR0 (Bit 0)                                  */
#define PA_BSR_BSR0_Msk                   (0x1UL)                   /*!< PA BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PA_BCR_BCR12_Pos                  (12UL)                    /*!< PA BCR: BCR12 (Bit 12)                                */
#define PA_BCR_BCR12_Msk                  (0x1000UL)                /*!< PA BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR11_Pos                  (11UL)                    /*!< PA BCR: BCR11 (Bit 11)                                */
#define PA_BCR_BCR11_Msk                  (0x800UL)                 /*!< PA BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR10_Pos                  (10UL)                    /*!< PA BCR: BCR10 (Bit 10)                                */
#define PA_BCR_BCR10_Msk                  (0x400UL)                 /*!< PA BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR9_Pos                   (9UL)                     /*!< PA BCR: BCR9 (Bit 9)                                  */
#define PA_BCR_BCR9_Msk                   (0x200UL)                 /*!< PA BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR8_Pos                   (8UL)                     /*!< PA BCR: BCR8 (Bit 8)                                  */
#define PA_BCR_BCR8_Msk                   (0x100UL)                 /*!< PA BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR7_Pos                   (7UL)                     /*!< PA BCR: BCR7 (Bit 7)                                  */
#define PA_BCR_BCR7_Msk                   (0x80UL)                  /*!< PA BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR6_Pos                   (6UL)                     /*!< PA BCR: BCR6 (Bit 6)                                  */
#define PA_BCR_BCR6_Msk                   (0x40UL)                  /*!< PA BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR5_Pos                   (5UL)                     /*!< PA BCR: BCR5 (Bit 5)                                  */
#define PA_BCR_BCR5_Msk                   (0x20UL)                  /*!< PA BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR4_Pos                   (4UL)                     /*!< PA BCR: BCR4 (Bit 4)                                  */
#define PA_BCR_BCR4_Msk                   (0x10UL)                  /*!< PA BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR3_Pos                   (3UL)                     /*!< PA BCR: BCR3 (Bit 3)                                  */
#define PA_BCR_BCR3_Msk                   (0x8UL)                   /*!< PA BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR2_Pos                   (2UL)                     /*!< PA BCR: BCR2 (Bit 2)                                  */
#define PA_BCR_BCR2_Msk                   (0x4UL)                   /*!< PA BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR1_Pos                   (1UL)                     /*!< PA BCR: BCR1 (Bit 1)                                  */
#define PA_BCR_BCR1_Msk                   (0x2UL)                   /*!< PA BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR0_Pos                   (0UL)                     /*!< PA BCR: BCR0 (Bit 0)                                  */
#define PA_BCR_BCR0_Msk                   (0x1UL)                   /*!< PA BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PA_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PA OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PA_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PA OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PA OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PA_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PA OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PA OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PA_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PA OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PA OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PA_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PA OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PA OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PA_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PA OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PA OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PA_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PA OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PA OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PA_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PA OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PA OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PA_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PA OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PA OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PA_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PA OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PA OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PA_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PA OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PA OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PA_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PA OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PA OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PA_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PA OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PA OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PA_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PA OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PA_DBCR_DBCLK_Pos                 (16UL)                    /*!< PA DBCR: DBCLK (Bit 16)                               */
#define PA_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PA DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PA_DBCR_DBEN12_Pos                (12UL)                    /*!< PA DBCR: DBEN12 (Bit 12)                              */
#define PA_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PA DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PA_DBCR_DBEN11_Pos                (11UL)                    /*!< PA DBCR: DBEN11 (Bit 11)                              */
#define PA_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PA DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PA_DBCR_DBEN10_Pos                (10UL)                    /*!< PA DBCR: DBEN10 (Bit 10)                              */
#define PA_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PA DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PA_DBCR_DBEN9_Pos                 (9UL)                     /*!< PA DBCR: DBEN9 (Bit 9)                                */
#define PA_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PA DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN8_Pos                 (8UL)                     /*!< PA DBCR: DBEN8 (Bit 8)                                */
#define PA_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PA DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN7_Pos                 (7UL)                     /*!< PA DBCR: DBEN7 (Bit 7)                                */
#define PA_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PA DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN6_Pos                 (6UL)                     /*!< PA DBCR: DBEN6 (Bit 6)                                */
#define PA_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PA DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN5_Pos                 (5UL)                     /*!< PA DBCR: DBEN5 (Bit 5)                                */
#define PA_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PA DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN4_Pos                 (4UL)                     /*!< PA DBCR: DBEN4 (Bit 4)                                */
#define PA_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PA DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN3_Pos                 (3UL)                     /*!< PA DBCR: DBEN3 (Bit 3)                                */
#define PA_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PA DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN2_Pos                 (2UL)                     /*!< PA DBCR: DBEN2 (Bit 2)                                */
#define PA_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PA DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN1_Pos                 (1UL)                     /*!< PA DBCR: DBEN1 (Bit 1)                                */
#define PA_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PA DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN0_Pos                 (0UL)                     /*!< PA DBCR: DBEN0 (Bit 0)                                */
#define PA_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PA DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PA_MOD  ========================================================= */
#define PA_PA_MOD_MODE9_Pos               (18UL)                    /*!< PA PA_MOD: MODE9 (Bit 18)                             */
#define PA_PA_MOD_MODE9_Msk               (0xc0000UL)               /*!< PA PA_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE8_Pos               (16UL)                    /*!< PA PA_MOD: MODE8 (Bit 16)                             */
#define PA_PA_MOD_MODE8_Msk               (0x30000UL)               /*!< PA PA_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE7_Pos               (14UL)                    /*!< PA PA_MOD: MODE7 (Bit 14)                             */
#define PA_PA_MOD_MODE7_Msk               (0xc000UL)                /*!< PA PA_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE6_Pos               (12UL)                    /*!< PA PA_MOD: MODE6 (Bit 12)                             */
#define PA_PA_MOD_MODE6_Msk               (0x3000UL)                /*!< PA PA_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE5_Pos               (10UL)                    /*!< PA PA_MOD: MODE5 (Bit 10)                             */
#define PA_PA_MOD_MODE5_Msk               (0xc00UL)                 /*!< PA PA_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE4_Pos               (8UL)                     /*!< PA PA_MOD: MODE4 (Bit 8)                              */
#define PA_PA_MOD_MODE4_Msk               (0x300UL)                 /*!< PA PA_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE3_Pos               (6UL)                     /*!< PA PA_MOD: MODE3 (Bit 6)                              */
#define PA_PA_MOD_MODE3_Msk               (0xc0UL)                  /*!< PA PA_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE2_Pos               (4UL)                     /*!< PA PA_MOD: MODE2 (Bit 4)                              */
#define PA_PA_MOD_MODE2_Msk               (0x30UL)                  /*!< PA PA_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE1_Pos               (2UL)                     /*!< PA PA_MOD: MODE1 (Bit 2)                              */
#define PA_PA_MOD_MODE1_Msk               (0xcUL)                   /*!< PA PA_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE0_Pos               (0UL)                     /*!< PA PA_MOD: MODE0 (Bit 0)                              */
#define PA_PA_MOD_MODE0_Msk               (0x3UL)                   /*!< PA PA_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PA_TYP  ========================================================= */
#define PA_PA_TYP_TYP9_Pos                (9UL)                     /*!< PA PA_TYP: TYP9 (Bit 9)                               */
#define PA_PA_TYP_TYP9_Msk                (0x200UL)                 /*!< PA PA_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP8_Pos                (8UL)                     /*!< PA PA_TYP: TYP8 (Bit 8)                               */
#define PA_PA_TYP_TYP8_Msk                (0x100UL)                 /*!< PA PA_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP7_Pos                (7UL)                     /*!< PA PA_TYP: TYP7 (Bit 7)                               */
#define PA_PA_TYP_TYP7_Msk                (0x80UL)                  /*!< PA PA_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP6_Pos                (6UL)                     /*!< PA PA_TYP: TYP6 (Bit 6)                               */
#define PA_PA_TYP_TYP6_Msk                (0x40UL)                  /*!< PA PA_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP5_Pos                (5UL)                     /*!< PA PA_TYP: TYP5 (Bit 5)                               */
#define PA_PA_TYP_TYP5_Msk                (0x20UL)                  /*!< PA PA_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP4_Pos                (4UL)                     /*!< PA PA_TYP: TYP4 (Bit 4)                               */
#define PA_PA_TYP_TYP4_Msk                (0x10UL)                  /*!< PA PA_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP3_Pos                (3UL)                     /*!< PA PA_TYP: TYP3 (Bit 3)                               */
#define PA_PA_TYP_TYP3_Msk                (0x8UL)                   /*!< PA PA_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP2_Pos                (2UL)                     /*!< PA PA_TYP: TYP2 (Bit 2)                               */
#define PA_PA_TYP_TYP2_Msk                (0x4UL)                   /*!< PA PA_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP1_Pos                (1UL)                     /*!< PA PA_TYP: TYP1 (Bit 1)                               */
#define PA_PA_TYP_TYP1_Msk                (0x2UL)                   /*!< PA PA_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP0_Pos                (0UL)                     /*!< PA PA_TYP: TYP0 (Bit 0)                               */
#define PA_PA_TYP_TYP0_Msk                (0x1UL)                   /*!< PA PA_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PA_AFSR1  ======================================================== */
#define PA_PA_AFSR1_AFSR7_Pos             (28UL)                    /*!< PA PA_AFSR1: AFSR7 (Bit 28)                           */
#define PA_PA_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PA PA_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR6_Pos             (24UL)                    /*!< PA PA_AFSR1: AFSR6 (Bit 24)                           */
#define PA_PA_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PA PA_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR5_Pos             (20UL)                    /*!< PA PA_AFSR1: AFSR5 (Bit 20)                           */
#define PA_PA_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PA PA_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR4_Pos             (16UL)                    /*!< PA PA_AFSR1: AFSR4 (Bit 16)                           */
#define PA_PA_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PA PA_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR3_Pos             (12UL)                    /*!< PA PA_AFSR1: AFSR3 (Bit 12)                           */
#define PA_PA_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PA PA_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR2_Pos             (8UL)                     /*!< PA PA_AFSR1: AFSR2 (Bit 8)                            */
#define PA_PA_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PA PA_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR1_Pos             (4UL)                     /*!< PA PA_AFSR1: AFSR1 (Bit 4)                            */
#define PA_PA_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PA PA_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR0_Pos             (0UL)                     /*!< PA PA_AFSR1: AFSR0 (Bit 0)                            */
#define PA_PA_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PA PA_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PA_AFSR2  ======================================================== */
#define PA_PA_AFSR2_AFSR9_Pos             (4UL)                     /*!< PA PA_AFSR2: AFSR9 (Bit 4)                            */
#define PA_PA_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PA PA_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR2_AFSR8_Pos             (0UL)                     /*!< PA PA_AFSR2: AFSR8 (Bit 0)                            */
#define PA_PA_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PA PA_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PA_PUPD  ======================================================== */
#define PA_PA_PUPD_PUPD9_Pos              (18UL)                    /*!< PA PA_PUPD: PUPD9 (Bit 18)                            */
#define PA_PA_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PA PA_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD8_Pos              (16UL)                    /*!< PA PA_PUPD: PUPD8 (Bit 16)                            */
#define PA_PA_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PA PA_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD7_Pos              (14UL)                    /*!< PA PA_PUPD: PUPD7 (Bit 14)                            */
#define PA_PA_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PA PA_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD6_Pos              (12UL)                    /*!< PA PA_PUPD: PUPD6 (Bit 12)                            */
#define PA_PA_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PA PA_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD5_Pos              (10UL)                    /*!< PA PA_PUPD: PUPD5 (Bit 10)                            */
#define PA_PA_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PA PA_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD4_Pos              (8UL)                     /*!< PA PA_PUPD: PUPD4 (Bit 8)                             */
#define PA_PA_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PA PA_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD3_Pos              (6UL)                     /*!< PA PA_PUPD: PUPD3 (Bit 6)                             */
#define PA_PA_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PA PA_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD2_Pos              (4UL)                     /*!< PA PA_PUPD: PUPD2 (Bit 4)                             */
#define PA_PA_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PA PA_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD1_Pos              (2UL)                     /*!< PA PA_PUPD: PUPD1 (Bit 2)                             */
#define PA_PA_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PA PA_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD0_Pos              (0UL)                     /*!< PA PA_PUPD: PUPD0 (Bit 0)                             */
#define PA_PA_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PA PA_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PA_INDR  ======================================================== */
#define PA_PA_INDR_INDR9_Pos              (9UL)                     /*!< PA PA_INDR: INDR9 (Bit 9)                             */
#define PA_PA_INDR_INDR9_Msk              (0x200UL)                 /*!< PA PA_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR8_Pos              (8UL)                     /*!< PA PA_INDR: INDR8 (Bit 8)                             */
#define PA_PA_INDR_INDR8_Msk              (0x100UL)                 /*!< PA PA_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR7_Pos              (7UL)                     /*!< PA PA_INDR: INDR7 (Bit 7)                             */
#define PA_PA_INDR_INDR7_Msk              (0x80UL)                  /*!< PA PA_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR6_Pos              (6UL)                     /*!< PA PA_INDR: INDR6 (Bit 6)                             */
#define PA_PA_INDR_INDR6_Msk              (0x40UL)                  /*!< PA PA_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR5_Pos              (5UL)                     /*!< PA PA_INDR: INDR5 (Bit 5)                             */
#define PA_PA_INDR_INDR5_Msk              (0x20UL)                  /*!< PA PA_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR4_Pos              (4UL)                     /*!< PA PA_INDR: INDR4 (Bit 4)                             */
#define PA_PA_INDR_INDR4_Msk              (0x10UL)                  /*!< PA PA_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR3_Pos              (3UL)                     /*!< PA PA_INDR: INDR3 (Bit 3)                             */
#define PA_PA_INDR_INDR3_Msk              (0x8UL)                   /*!< PA PA_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR2_Pos              (2UL)                     /*!< PA PA_INDR: INDR2 (Bit 2)                             */
#define PA_PA_INDR_INDR2_Msk              (0x4UL)                   /*!< PA PA_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR1_Pos              (1UL)                     /*!< PA PA_INDR: INDR1 (Bit 1)                             */
#define PA_PA_INDR_INDR1_Msk              (0x2UL)                   /*!< PA PA_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR0_Pos              (0UL)                     /*!< PA PA_INDR: INDR0 (Bit 0)                             */
#define PA_PA_INDR_INDR0_Msk              (0x1UL)                   /*!< PA PA_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PA_OUTDR  ======================================================== */
#define PA_PA_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PA PA_OUTDR: OUTDR9 (Bit 9)                           */
#define PA_PA_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PA PA_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PA PA_OUTDR: OUTDR8 (Bit 8)                           */
#define PA_PA_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PA PA_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PA PA_OUTDR: OUTDR7 (Bit 7)                           */
#define PA_PA_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PA PA_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PA PA_OUTDR: OUTDR6 (Bit 6)                           */
#define PA_PA_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PA PA_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PA PA_OUTDR: OUTDR5 (Bit 5)                           */
#define PA_PA_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PA PA_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PA PA_OUTDR: OUTDR4 (Bit 4)                           */
#define PA_PA_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PA PA_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PA PA_OUTDR: OUTDR3 (Bit 3)                           */
#define PA_PA_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PA PA_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PA PA_OUTDR: OUTDR2 (Bit 2)                           */
#define PA_PA_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PA PA_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PA PA_OUTDR: OUTDR1 (Bit 1)                           */
#define PA_PA_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PA PA_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PA PA_OUTDR: OUTDR0 (Bit 0)                           */
#define PA_PA_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PA PA_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PA_BSR  ========================================================= */
#define PA_PA_BSR_BSR9_Pos                (9UL)                     /*!< PA PA_BSR: BSR9 (Bit 9)                               */
#define PA_PA_BSR_BSR9_Msk                (0x200UL)                 /*!< PA PA_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR8_Pos                (8UL)                     /*!< PA PA_BSR: BSR8 (Bit 8)                               */
#define PA_PA_BSR_BSR8_Msk                (0x100UL)                 /*!< PA PA_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR7_Pos                (7UL)                     /*!< PA PA_BSR: BSR7 (Bit 7)                               */
#define PA_PA_BSR_BSR7_Msk                (0x80UL)                  /*!< PA PA_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR6_Pos                (6UL)                     /*!< PA PA_BSR: BSR6 (Bit 6)                               */
#define PA_PA_BSR_BSR6_Msk                (0x40UL)                  /*!< PA PA_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR5_Pos                (5UL)                     /*!< PA PA_BSR: BSR5 (Bit 5)                               */
#define PA_PA_BSR_BSR5_Msk                (0x20UL)                  /*!< PA PA_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR4_Pos                (4UL)                     /*!< PA PA_BSR: BSR4 (Bit 4)                               */
#define PA_PA_BSR_BSR4_Msk                (0x10UL)                  /*!< PA PA_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR3_Pos                (3UL)                     /*!< PA PA_BSR: BSR3 (Bit 3)                               */
#define PA_PA_BSR_BSR3_Msk                (0x8UL)                   /*!< PA PA_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR2_Pos                (2UL)                     /*!< PA PA_BSR: BSR2 (Bit 2)                               */
#define PA_PA_BSR_BSR2_Msk                (0x4UL)                   /*!< PA PA_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR1_Pos                (1UL)                     /*!< PA PA_BSR: BSR1 (Bit 1)                               */
#define PA_PA_BSR_BSR1_Msk                (0x2UL)                   /*!< PA PA_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR0_Pos                (0UL)                     /*!< PA PA_BSR: BSR0 (Bit 0)                               */
#define PA_PA_BSR_BSR0_Msk                (0x1UL)                   /*!< PA PA_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PA_BCR  ========================================================= */
#define PA_PA_BCR_BCR9_Pos                (9UL)                     /*!< PA PA_BCR: BCR9 (Bit 9)                               */
#define PA_PA_BCR_BCR9_Msk                (0x200UL)                 /*!< PA PA_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR8_Pos                (8UL)                     /*!< PA PA_BCR: BCR8 (Bit 8)                               */
#define PA_PA_BCR_BCR8_Msk                (0x100UL)                 /*!< PA PA_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR7_Pos                (7UL)                     /*!< PA PA_BCR: BCR7 (Bit 7)                               */
#define PA_PA_BCR_BCR7_Msk                (0x80UL)                  /*!< PA PA_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR6_Pos                (6UL)                     /*!< PA PA_BCR: BCR6 (Bit 6)                               */
#define PA_PA_BCR_BCR6_Msk                (0x40UL)                  /*!< PA PA_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR5_Pos                (5UL)                     /*!< PA PA_BCR: BCR5 (Bit 5)                               */
#define PA_PA_BCR_BCR5_Msk                (0x20UL)                  /*!< PA PA_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR4_Pos                (4UL)                     /*!< PA PA_BCR: BCR4 (Bit 4)                               */
#define PA_PA_BCR_BCR4_Msk                (0x10UL)                  /*!< PA PA_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR3_Pos                (3UL)                     /*!< PA PA_BCR: BCR3 (Bit 3)                               */
#define PA_PA_BCR_BCR3_Msk                (0x8UL)                   /*!< PA PA_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR2_Pos                (2UL)                     /*!< PA PA_BCR: BCR2 (Bit 2)                               */
#define PA_PA_BCR_BCR2_Msk                (0x4UL)                   /*!< PA PA_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR1_Pos                (1UL)                     /*!< PA PA_BCR: BCR1 (Bit 1)                               */
#define PA_PA_BCR_BCR1_Msk                (0x2UL)                   /*!< PA PA_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR0_Pos                (0UL)                     /*!< PA PA_BCR: BCR0 (Bit 0)                               */
#define PA_PA_BCR_BCR0_Msk                (0x1UL)                   /*!< PA PA_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PA_OUTDMSK  ======================================================= */
#define PA_PA_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PA PA_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PA_PA_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PA PA_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PA PA_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PA_PA_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PA PA_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PA PA_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PA_PA_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PA PA_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PA PA_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PA_PA_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PA PA_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PA PA_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PA_PA_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PA PA_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PA PA_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PA_PA_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PA PA_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PA PA_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PA_PA_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PA PA_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PA PA_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PA_PA_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PA PA_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PA PA_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PA_PA_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PA PA_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PA PA_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PA_PA_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PA PA_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PA_DBCR  ======================================================== */
#define PA_PA_DBCR_DBCLK_Pos              (16UL)                    /*!< PA PA_DBCR: DBCLK (Bit 16)                            */
#define PA_PA_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PA PA_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PA_PA_DBCR_DBEN9_Pos              (9UL)                     /*!< PA PA_DBCR: DBEN9 (Bit 9)                             */
#define PA_PA_DBCR_DBEN9_Msk              (0x200UL)                 /*!< PA PA_DBCR: DBEN9 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN8_Pos              (8UL)                     /*!< PA PA_DBCR: DBEN8 (Bit 8)                             */
#define PA_PA_DBCR_DBEN8_Msk              (0x100UL)                 /*!< PA PA_DBCR: DBEN8 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN7_Pos              (7UL)                     /*!< PA PA_DBCR: DBEN7 (Bit 7)                             */
#define PA_PA_DBCR_DBEN7_Msk              (0x80UL)                  /*!< PA PA_DBCR: DBEN7 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN6_Pos              (6UL)                     /*!< PA PA_DBCR: DBEN6 (Bit 6)                             */
#define PA_PA_DBCR_DBEN6_Msk              (0x40UL)                  /*!< PA PA_DBCR: DBEN6 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN5_Pos              (5UL)                     /*!< PA PA_DBCR: DBEN5 (Bit 5)                             */
#define PA_PA_DBCR_DBEN5_Msk              (0x20UL)                  /*!< PA PA_DBCR: DBEN5 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN4_Pos              (4UL)                     /*!< PA PA_DBCR: DBEN4 (Bit 4)                             */
#define PA_PA_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PA PA_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN3_Pos              (3UL)                     /*!< PA PA_DBCR: DBEN3 (Bit 3)                             */
#define PA_PA_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PA PA_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN2_Pos              (2UL)                     /*!< PA PA_DBCR: DBEN2 (Bit 2)                             */
#define PA_PA_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PA PA_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN1_Pos              (1UL)                     /*!< PA PA_DBCR: DBEN1 (Bit 1)                             */
#define PA_PA_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PA PA_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PA_PA_DBCR_DBEN0_Pos              (0UL)                     /*!< PA PA_DBCR: DBEN0 (Bit 0)                             */
#define PA_PA_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PA PA_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PB_MOD_MODE12_Pos                 (24UL)                    /*!< PB MOD: MODE12 (Bit 24)                               */
#define PB_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PB MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE11_Pos                 (22UL)                    /*!< PB MOD: MODE11 (Bit 22)                               */
#define PB_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PB MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE10_Pos                 (20UL)                    /*!< PB MOD: MODE10 (Bit 20)                               */
#define PB_MOD_MODE10_Msk                 (0x300000UL)              /*!< PB MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE9_Pos                  (18UL)                    /*!< PB MOD: MODE9 (Bit 18)                                */
#define PB_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PB MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE8_Pos                  (16UL)                    /*!< PB MOD: MODE8 (Bit 16)                                */
#define PB_MOD_MODE8_Msk                  (0x30000UL)               /*!< PB MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE7_Pos                  (14UL)                    /*!< PB MOD: MODE7 (Bit 14)                                */
#define PB_MOD_MODE7_Msk                  (0xc000UL)                /*!< PB MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE6_Pos                  (12UL)                    /*!< PB MOD: MODE6 (Bit 12)                                */
#define PB_MOD_MODE6_Msk                  (0x3000UL)                /*!< PB MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE5_Pos                  (10UL)                    /*!< PB MOD: MODE5 (Bit 10)                                */
#define PB_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PB MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE4_Pos                  (8UL)                     /*!< PB MOD: MODE4 (Bit 8)                                 */
#define PB_MOD_MODE4_Msk                  (0x300UL)                 /*!< PB MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE3_Pos                  (6UL)                     /*!< PB MOD: MODE3 (Bit 6)                                 */
#define PB_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PB MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE2_Pos                  (4UL)                     /*!< PB MOD: MODE2 (Bit 4)                                 */
#define PB_MOD_MODE2_Msk                  (0x30UL)                  /*!< PB MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE1_Pos                  (2UL)                     /*!< PB MOD: MODE1 (Bit 2)                                 */
#define PB_MOD_MODE1_Msk                  (0xcUL)                   /*!< PB MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE0_Pos                  (0UL)                     /*!< PB MOD: MODE0 (Bit 0)                                 */
#define PB_MOD_MODE0_Msk                  (0x3UL)                   /*!< PB MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PB_TYP_TYP12_Pos                  (12UL)                    /*!< PB TYP: TYP12 (Bit 12)                                */
#define PB_TYP_TYP12_Msk                  (0x1000UL)                /*!< PB TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP11_Pos                  (11UL)                    /*!< PB TYP: TYP11 (Bit 11)                                */
#define PB_TYP_TYP11_Msk                  (0x800UL)                 /*!< PB TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP10_Pos                  (10UL)                    /*!< PB TYP: TYP10 (Bit 10)                                */
#define PB_TYP_TYP10_Msk                  (0x400UL)                 /*!< PB TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP9_Pos                   (9UL)                     /*!< PB TYP: TYP9 (Bit 9)                                  */
#define PB_TYP_TYP9_Msk                   (0x200UL)                 /*!< PB TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP8_Pos                   (8UL)                     /*!< PB TYP: TYP8 (Bit 8)                                  */
#define PB_TYP_TYP8_Msk                   (0x100UL)                 /*!< PB TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP7_Pos                   (7UL)                     /*!< PB TYP: TYP7 (Bit 7)                                  */
#define PB_TYP_TYP7_Msk                   (0x80UL)                  /*!< PB TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP6_Pos                   (6UL)                     /*!< PB TYP: TYP6 (Bit 6)                                  */
#define PB_TYP_TYP6_Msk                   (0x40UL)                  /*!< PB TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP5_Pos                   (5UL)                     /*!< PB TYP: TYP5 (Bit 5)                                  */
#define PB_TYP_TYP5_Msk                   (0x20UL)                  /*!< PB TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP4_Pos                   (4UL)                     /*!< PB TYP: TYP4 (Bit 4)                                  */
#define PB_TYP_TYP4_Msk                   (0x10UL)                  /*!< PB TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP3_Pos                   (3UL)                     /*!< PB TYP: TYP3 (Bit 3)                                  */
#define PB_TYP_TYP3_Msk                   (0x8UL)                   /*!< PB TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP2_Pos                   (2UL)                     /*!< PB TYP: TYP2 (Bit 2)                                  */
#define PB_TYP_TYP2_Msk                   (0x4UL)                   /*!< PB TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP1_Pos                   (1UL)                     /*!< PB TYP: TYP1 (Bit 1)                                  */
#define PB_TYP_TYP1_Msk                   (0x2UL)                   /*!< PB TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP0_Pos                   (0UL)                     /*!< PB TYP: TYP0 (Bit 0)                                  */
#define PB_TYP_TYP0_Msk                   (0x1UL)                   /*!< PB TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PB_AFSR1_AFSR7_Pos                (28UL)                    /*!< PB AFSR1: AFSR7 (Bit 28)                              */
#define PB_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PB AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR6_Pos                (24UL)                    /*!< PB AFSR1: AFSR6 (Bit 24)                              */
#define PB_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PB AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR5_Pos                (20UL)                    /*!< PB AFSR1: AFSR5 (Bit 20)                              */
#define PB_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PB AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR4_Pos                (16UL)                    /*!< PB AFSR1: AFSR4 (Bit 16)                              */
#define PB_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PB AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR3_Pos                (12UL)                    /*!< PB AFSR1: AFSR3 (Bit 12)                              */
#define PB_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PB AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR2_Pos                (8UL)                     /*!< PB AFSR1: AFSR2 (Bit 8)                               */
#define PB_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PB AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR1_Pos                (4UL)                     /*!< PB AFSR1: AFSR1 (Bit 4)                               */
#define PB_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PB AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR0_Pos                (0UL)                     /*!< PB AFSR1: AFSR0 (Bit 0)                               */
#define PB_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PB AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PB_AFSR2_AFSR12_Pos               (16UL)                    /*!< PB AFSR2: AFSR12 (Bit 16)                             */
#define PB_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PB AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR11_Pos               (12UL)                    /*!< PB AFSR2: AFSR11 (Bit 12)                             */
#define PB_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PB AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR10_Pos               (8UL)                     /*!< PB AFSR2: AFSR10 (Bit 8)                              */
#define PB_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PB AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR9_Pos                (4UL)                     /*!< PB AFSR2: AFSR9 (Bit 4)                               */
#define PB_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PB AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR2_AFSR8_Pos                (0UL)                     /*!< PB AFSR2: AFSR8 (Bit 0)                               */
#define PB_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PB AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PB_PUPD_PUPD12_Pos                (24UL)                    /*!< PB PUPD: PUPD12 (Bit 24)                              */
#define PB_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PB PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD11_Pos                (22UL)                    /*!< PB PUPD: PUPD11 (Bit 22)                              */
#define PB_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PB PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD10_Pos                (20UL)                    /*!< PB PUPD: PUPD10 (Bit 20)                              */
#define PB_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PB PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD9_Pos                 (18UL)                    /*!< PB PUPD: PUPD9 (Bit 18)                               */
#define PB_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PB PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD8_Pos                 (16UL)                    /*!< PB PUPD: PUPD8 (Bit 16)                               */
#define PB_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PB PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD7_Pos                 (14UL)                    /*!< PB PUPD: PUPD7 (Bit 14)                               */
#define PB_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PB PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD6_Pos                 (12UL)                    /*!< PB PUPD: PUPD6 (Bit 12)                               */
#define PB_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PB PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD5_Pos                 (10UL)                    /*!< PB PUPD: PUPD5 (Bit 10)                               */
#define PB_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PB PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD4_Pos                 (8UL)                     /*!< PB PUPD: PUPD4 (Bit 8)                                */
#define PB_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PB PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD3_Pos                 (6UL)                     /*!< PB PUPD: PUPD3 (Bit 6)                                */
#define PB_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PB PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD2_Pos                 (4UL)                     /*!< PB PUPD: PUPD2 (Bit 4)                                */
#define PB_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PB PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD1_Pos                 (2UL)                     /*!< PB PUPD: PUPD1 (Bit 2)                                */
#define PB_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PB PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD0_Pos                 (0UL)                     /*!< PB PUPD: PUPD0 (Bit 0)                                */
#define PB_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PB PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PB_INDR_INDR12_Pos                (12UL)                    /*!< PB INDR: INDR12 (Bit 12)                              */
#define PB_INDR_INDR12_Msk                (0x1000UL)                /*!< PB INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR11_Pos                (11UL)                    /*!< PB INDR: INDR11 (Bit 11)                              */
#define PB_INDR_INDR11_Msk                (0x800UL)                 /*!< PB INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR10_Pos                (10UL)                    /*!< PB INDR: INDR10 (Bit 10)                              */
#define PB_INDR_INDR10_Msk                (0x400UL)                 /*!< PB INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR9_Pos                 (9UL)                     /*!< PB INDR: INDR9 (Bit 9)                                */
#define PB_INDR_INDR9_Msk                 (0x200UL)                 /*!< PB INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR8_Pos                 (8UL)                     /*!< PB INDR: INDR8 (Bit 8)                                */
#define PB_INDR_INDR8_Msk                 (0x100UL)                 /*!< PB INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR7_Pos                 (7UL)                     /*!< PB INDR: INDR7 (Bit 7)                                */
#define PB_INDR_INDR7_Msk                 (0x80UL)                  /*!< PB INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR6_Pos                 (6UL)                     /*!< PB INDR: INDR6 (Bit 6)                                */
#define PB_INDR_INDR6_Msk                 (0x40UL)                  /*!< PB INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR5_Pos                 (5UL)                     /*!< PB INDR: INDR5 (Bit 5)                                */
#define PB_INDR_INDR5_Msk                 (0x20UL)                  /*!< PB INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR4_Pos                 (4UL)                     /*!< PB INDR: INDR4 (Bit 4)                                */
#define PB_INDR_INDR4_Msk                 (0x10UL)                  /*!< PB INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR3_Pos                 (3UL)                     /*!< PB INDR: INDR3 (Bit 3)                                */
#define PB_INDR_INDR3_Msk                 (0x8UL)                   /*!< PB INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR2_Pos                 (2UL)                     /*!< PB INDR: INDR2 (Bit 2)                                */
#define PB_INDR_INDR2_Msk                 (0x4UL)                   /*!< PB INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR1_Pos                 (1UL)                     /*!< PB INDR: INDR1 (Bit 1)                                */
#define PB_INDR_INDR1_Msk                 (0x2UL)                   /*!< PB INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR0_Pos                 (0UL)                     /*!< PB INDR: INDR0 (Bit 0)                                */
#define PB_INDR_INDR0_Msk                 (0x1UL)                   /*!< PB INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PB_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PB OUTDR: OUTDR12 (Bit 12)                            */
#define PB_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PB OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PB OUTDR: OUTDR11 (Bit 11)                            */
#define PB_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PB OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PB OUTDR: OUTDR10 (Bit 10)                            */
#define PB_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PB OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PB OUTDR: OUTDR9 (Bit 9)                              */
#define PB_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PB OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PB OUTDR: OUTDR8 (Bit 8)                              */
#define PB_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PB OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PB OUTDR: OUTDR7 (Bit 7)                              */
#define PB_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PB OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PB OUTDR: OUTDR6 (Bit 6)                              */
#define PB_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PB OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PB OUTDR: OUTDR5 (Bit 5)                              */
#define PB_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PB OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PB OUTDR: OUTDR4 (Bit 4)                              */
#define PB_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PB OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PB OUTDR: OUTDR3 (Bit 3)                              */
#define PB_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PB OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PB OUTDR: OUTDR2 (Bit 2)                              */
#define PB_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PB OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PB OUTDR: OUTDR1 (Bit 1)                              */
#define PB_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PB OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PB OUTDR: OUTDR0 (Bit 0)                              */
#define PB_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PB OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PB_BSR_BSR12_Pos                  (12UL)                    /*!< PB BSR: BSR12 (Bit 12)                                */
#define PB_BSR_BSR12_Msk                  (0x1000UL)                /*!< PB BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR11_Pos                  (11UL)                    /*!< PB BSR: BSR11 (Bit 11)                                */
#define PB_BSR_BSR11_Msk                  (0x800UL)                 /*!< PB BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR10_Pos                  (10UL)                    /*!< PB BSR: BSR10 (Bit 10)                                */
#define PB_BSR_BSR10_Msk                  (0x400UL)                 /*!< PB BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR9_Pos                   (9UL)                     /*!< PB BSR: BSR9 (Bit 9)                                  */
#define PB_BSR_BSR9_Msk                   (0x200UL)                 /*!< PB BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR8_Pos                   (8UL)                     /*!< PB BSR: BSR8 (Bit 8)                                  */
#define PB_BSR_BSR8_Msk                   (0x100UL)                 /*!< PB BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR7_Pos                   (7UL)                     /*!< PB BSR: BSR7 (Bit 7)                                  */
#define PB_BSR_BSR7_Msk                   (0x80UL)                  /*!< PB BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR6_Pos                   (6UL)                     /*!< PB BSR: BSR6 (Bit 6)                                  */
#define PB_BSR_BSR6_Msk                   (0x40UL)                  /*!< PB BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR5_Pos                   (5UL)                     /*!< PB BSR: BSR5 (Bit 5)                                  */
#define PB_BSR_BSR5_Msk                   (0x20UL)                  /*!< PB BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR4_Pos                   (4UL)                     /*!< PB BSR: BSR4 (Bit 4)                                  */
#define PB_BSR_BSR4_Msk                   (0x10UL)                  /*!< PB BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR3_Pos                   (3UL)                     /*!< PB BSR: BSR3 (Bit 3)                                  */
#define PB_BSR_BSR3_Msk                   (0x8UL)                   /*!< PB BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR2_Pos                   (2UL)                     /*!< PB BSR: BSR2 (Bit 2)                                  */
#define PB_BSR_BSR2_Msk                   (0x4UL)                   /*!< PB BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR1_Pos                   (1UL)                     /*!< PB BSR: BSR1 (Bit 1)                                  */
#define PB_BSR_BSR1_Msk                   (0x2UL)                   /*!< PB BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR0_Pos                   (0UL)                     /*!< PB BSR: BSR0 (Bit 0)                                  */
#define PB_BSR_BSR0_Msk                   (0x1UL)                   /*!< PB BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PB_BCR_BCR12_Pos                  (12UL)                    /*!< PB BCR: BCR12 (Bit 12)                                */
#define PB_BCR_BCR12_Msk                  (0x1000UL)                /*!< PB BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR11_Pos                  (11UL)                    /*!< PB BCR: BCR11 (Bit 11)                                */
#define PB_BCR_BCR11_Msk                  (0x800UL)                 /*!< PB BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR10_Pos                  (10UL)                    /*!< PB BCR: BCR10 (Bit 10)                                */
#define PB_BCR_BCR10_Msk                  (0x400UL)                 /*!< PB BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR9_Pos                   (9UL)                     /*!< PB BCR: BCR9 (Bit 9)                                  */
#define PB_BCR_BCR9_Msk                   (0x200UL)                 /*!< PB BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR8_Pos                   (8UL)                     /*!< PB BCR: BCR8 (Bit 8)                                  */
#define PB_BCR_BCR8_Msk                   (0x100UL)                 /*!< PB BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR7_Pos                   (7UL)                     /*!< PB BCR: BCR7 (Bit 7)                                  */
#define PB_BCR_BCR7_Msk                   (0x80UL)                  /*!< PB BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR6_Pos                   (6UL)                     /*!< PB BCR: BCR6 (Bit 6)                                  */
#define PB_BCR_BCR6_Msk                   (0x40UL)                  /*!< PB BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR5_Pos                   (5UL)                     /*!< PB BCR: BCR5 (Bit 5)                                  */
#define PB_BCR_BCR5_Msk                   (0x20UL)                  /*!< PB BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR4_Pos                   (4UL)                     /*!< PB BCR: BCR4 (Bit 4)                                  */
#define PB_BCR_BCR4_Msk                   (0x10UL)                  /*!< PB BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR3_Pos                   (3UL)                     /*!< PB BCR: BCR3 (Bit 3)                                  */
#define PB_BCR_BCR3_Msk                   (0x8UL)                   /*!< PB BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR2_Pos                   (2UL)                     /*!< PB BCR: BCR2 (Bit 2)                                  */
#define PB_BCR_BCR2_Msk                   (0x4UL)                   /*!< PB BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR1_Pos                   (1UL)                     /*!< PB BCR: BCR1 (Bit 1)                                  */
#define PB_BCR_BCR1_Msk                   (0x2UL)                   /*!< PB BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR0_Pos                   (0UL)                     /*!< PB BCR: BCR0 (Bit 0)                                  */
#define PB_BCR_BCR0_Msk                   (0x1UL)                   /*!< PB BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PB_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PB OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PB_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PB OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PB OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PB_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PB OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PB OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PB_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PB OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PB OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PB_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PB OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PB OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PB_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PB OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PB OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PB_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PB OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PB OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PB_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PB OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PB OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PB_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PB OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PB OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PB_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PB OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PB OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PB_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PB OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PB OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PB_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PB OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PB OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PB_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PB OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PB OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PB_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PB OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PB_DBCR_DBCLK_Pos                 (16UL)                    /*!< PB DBCR: DBCLK (Bit 16)                               */
#define PB_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PB DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PB_DBCR_DBEN12_Pos                (12UL)                    /*!< PB DBCR: DBEN12 (Bit 12)                              */
#define PB_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PB DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PB_DBCR_DBEN11_Pos                (11UL)                    /*!< PB DBCR: DBEN11 (Bit 11)                              */
#define PB_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PB DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PB_DBCR_DBEN10_Pos                (10UL)                    /*!< PB DBCR: DBEN10 (Bit 10)                              */
#define PB_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PB DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PB_DBCR_DBEN9_Pos                 (9UL)                     /*!< PB DBCR: DBEN9 (Bit 9)                                */
#define PB_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PB DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN8_Pos                 (8UL)                     /*!< PB DBCR: DBEN8 (Bit 8)                                */
#define PB_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PB DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN7_Pos                 (7UL)                     /*!< PB DBCR: DBEN7 (Bit 7)                                */
#define PB_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PB DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN6_Pos                 (6UL)                     /*!< PB DBCR: DBEN6 (Bit 6)                                */
#define PB_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PB DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN5_Pos                 (5UL)                     /*!< PB DBCR: DBEN5 (Bit 5)                                */
#define PB_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PB DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN4_Pos                 (4UL)                     /*!< PB DBCR: DBEN4 (Bit 4)                                */
#define PB_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PB DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN3_Pos                 (3UL)                     /*!< PB DBCR: DBEN3 (Bit 3)                                */
#define PB_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PB DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN2_Pos                 (2UL)                     /*!< PB DBCR: DBEN2 (Bit 2)                                */
#define PB_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PB DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN1_Pos                 (1UL)                     /*!< PB DBCR: DBEN1 (Bit 1)                                */
#define PB_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PB DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN0_Pos                 (0UL)                     /*!< PB DBCR: DBEN0 (Bit 0)                                */
#define PB_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PB DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PB_MOD  ========================================================= */
#define PB_PB_MOD_MODE12_Pos              (24UL)                    /*!< PB PB_MOD: MODE12 (Bit 24)                            */
#define PB_PB_MOD_MODE12_Msk              (0x3000000UL)             /*!< PB PB_MOD: MODE12 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE11_Pos              (22UL)                    /*!< PB PB_MOD: MODE11 (Bit 22)                            */
#define PB_PB_MOD_MODE11_Msk              (0xc00000UL)              /*!< PB PB_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE10_Pos              (20UL)                    /*!< PB PB_MOD: MODE10 (Bit 20)                            */
#define PB_PB_MOD_MODE10_Msk              (0x300000UL)              /*!< PB PB_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE9_Pos               (18UL)                    /*!< PB PB_MOD: MODE9 (Bit 18)                             */
#define PB_PB_MOD_MODE9_Msk               (0xc0000UL)               /*!< PB PB_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE8_Pos               (16UL)                    /*!< PB PB_MOD: MODE8 (Bit 16)                             */
#define PB_PB_MOD_MODE8_Msk               (0x30000UL)               /*!< PB PB_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE7_Pos               (14UL)                    /*!< PB PB_MOD: MODE7 (Bit 14)                             */
#define PB_PB_MOD_MODE7_Msk               (0xc000UL)                /*!< PB PB_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE6_Pos               (12UL)                    /*!< PB PB_MOD: MODE6 (Bit 12)                             */
#define PB_PB_MOD_MODE6_Msk               (0x3000UL)                /*!< PB PB_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE5_Pos               (10UL)                    /*!< PB PB_MOD: MODE5 (Bit 10)                             */
#define PB_PB_MOD_MODE5_Msk               (0xc00UL)                 /*!< PB PB_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE4_Pos               (8UL)                     /*!< PB PB_MOD: MODE4 (Bit 8)                              */
#define PB_PB_MOD_MODE4_Msk               (0x300UL)                 /*!< PB PB_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE3_Pos               (6UL)                     /*!< PB PB_MOD: MODE3 (Bit 6)                              */
#define PB_PB_MOD_MODE3_Msk               (0xc0UL)                  /*!< PB PB_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE2_Pos               (4UL)                     /*!< PB PB_MOD: MODE2 (Bit 4)                              */
#define PB_PB_MOD_MODE2_Msk               (0x30UL)                  /*!< PB PB_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE1_Pos               (2UL)                     /*!< PB PB_MOD: MODE1 (Bit 2)                              */
#define PB_PB_MOD_MODE1_Msk               (0xcUL)                   /*!< PB PB_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE0_Pos               (0UL)                     /*!< PB PB_MOD: MODE0 (Bit 0)                              */
#define PB_PB_MOD_MODE0_Msk               (0x3UL)                   /*!< PB PB_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PB_TYP  ========================================================= */
#define PB_PB_TYP_TYP12_Pos               (12UL)                    /*!< PB PB_TYP: TYP12 (Bit 12)                             */
#define PB_PB_TYP_TYP12_Msk               (0x1000UL)                /*!< PB PB_TYP: TYP12 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP11_Pos               (11UL)                    /*!< PB PB_TYP: TYP11 (Bit 11)                             */
#define PB_PB_TYP_TYP11_Msk               (0x800UL)                 /*!< PB PB_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP10_Pos               (10UL)                    /*!< PB PB_TYP: TYP10 (Bit 10)                             */
#define PB_PB_TYP_TYP10_Msk               (0x400UL)                 /*!< PB PB_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP9_Pos                (9UL)                     /*!< PB PB_TYP: TYP9 (Bit 9)                               */
#define PB_PB_TYP_TYP9_Msk                (0x200UL)                 /*!< PB PB_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP8_Pos                (8UL)                     /*!< PB PB_TYP: TYP8 (Bit 8)                               */
#define PB_PB_TYP_TYP8_Msk                (0x100UL)                 /*!< PB PB_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP7_Pos                (7UL)                     /*!< PB PB_TYP: TYP7 (Bit 7)                               */
#define PB_PB_TYP_TYP7_Msk                (0x80UL)                  /*!< PB PB_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP6_Pos                (6UL)                     /*!< PB PB_TYP: TYP6 (Bit 6)                               */
#define PB_PB_TYP_TYP6_Msk                (0x40UL)                  /*!< PB PB_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP5_Pos                (5UL)                     /*!< PB PB_TYP: TYP5 (Bit 5)                               */
#define PB_PB_TYP_TYP5_Msk                (0x20UL)                  /*!< PB PB_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP4_Pos                (4UL)                     /*!< PB PB_TYP: TYP4 (Bit 4)                               */
#define PB_PB_TYP_TYP4_Msk                (0x10UL)                  /*!< PB PB_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP3_Pos                (3UL)                     /*!< PB PB_TYP: TYP3 (Bit 3)                               */
#define PB_PB_TYP_TYP3_Msk                (0x8UL)                   /*!< PB PB_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP2_Pos                (2UL)                     /*!< PB PB_TYP: TYP2 (Bit 2)                               */
#define PB_PB_TYP_TYP2_Msk                (0x4UL)                   /*!< PB PB_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP1_Pos                (1UL)                     /*!< PB PB_TYP: TYP1 (Bit 1)                               */
#define PB_PB_TYP_TYP1_Msk                (0x2UL)                   /*!< PB PB_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP0_Pos                (0UL)                     /*!< PB PB_TYP: TYP0 (Bit 0)                               */
#define PB_PB_TYP_TYP0_Msk                (0x1UL)                   /*!< PB PB_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PB_AFSR1  ======================================================== */
#define PB_PB_AFSR1_AFSR7_Pos             (28UL)                    /*!< PB PB_AFSR1: AFSR7 (Bit 28)                           */
#define PB_PB_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PB PB_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR6_Pos             (24UL)                    /*!< PB PB_AFSR1: AFSR6 (Bit 24)                           */
#define PB_PB_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PB PB_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR5_Pos             (20UL)                    /*!< PB PB_AFSR1: AFSR5 (Bit 20)                           */
#define PB_PB_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PB PB_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR4_Pos             (16UL)                    /*!< PB PB_AFSR1: AFSR4 (Bit 16)                           */
#define PB_PB_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PB PB_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR3_Pos             (12UL)                    /*!< PB PB_AFSR1: AFSR3 (Bit 12)                           */
#define PB_PB_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PB PB_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR2_Pos             (8UL)                     /*!< PB PB_AFSR1: AFSR2 (Bit 8)                            */
#define PB_PB_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PB PB_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR1_Pos             (4UL)                     /*!< PB PB_AFSR1: AFSR1 (Bit 4)                            */
#define PB_PB_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PB PB_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR0_Pos             (0UL)                     /*!< PB PB_AFSR1: AFSR0 (Bit 0)                            */
#define PB_PB_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PB PB_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PB_AFSR2  ======================================================== */
#define PB_PB_AFSR2_AFSR12_Pos            (16UL)                    /*!< PB PB_AFSR2: AFSR12 (Bit 16)                          */
#define PB_PB_AFSR2_AFSR12_Msk            (0xf0000UL)               /*!< PB PB_AFSR2: AFSR12 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR11_Pos            (12UL)                    /*!< PB PB_AFSR2: AFSR11 (Bit 12)                          */
#define PB_PB_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PB PB_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR10_Pos            (8UL)                     /*!< PB PB_AFSR2: AFSR10 (Bit 8)                           */
#define PB_PB_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PB PB_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR9_Pos             (4UL)                     /*!< PB PB_AFSR2: AFSR9 (Bit 4)                            */
#define PB_PB_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PB PB_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR2_AFSR8_Pos             (0UL)                     /*!< PB PB_AFSR2: AFSR8 (Bit 0)                            */
#define PB_PB_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PB PB_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PB_PUPD  ======================================================== */
#define PB_PB_PUPD_PUPD12_Pos             (24UL)                    /*!< PB PB_PUPD: PUPD12 (Bit 24)                           */
#define PB_PB_PUPD_PUPD12_Msk             (0x3000000UL)             /*!< PB PB_PUPD: PUPD12 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD11_Pos             (22UL)                    /*!< PB PB_PUPD: PUPD11 (Bit 22)                           */
#define PB_PB_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PB PB_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD10_Pos             (20UL)                    /*!< PB PB_PUPD: PUPD10 (Bit 20)                           */
#define PB_PB_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PB PB_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD9_Pos              (18UL)                    /*!< PB PB_PUPD: PUPD9 (Bit 18)                            */
#define PB_PB_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PB PB_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD8_Pos              (16UL)                    /*!< PB PB_PUPD: PUPD8 (Bit 16)                            */
#define PB_PB_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PB PB_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD7_Pos              (14UL)                    /*!< PB PB_PUPD: PUPD7 (Bit 14)                            */
#define PB_PB_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PB PB_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD6_Pos              (12UL)                    /*!< PB PB_PUPD: PUPD6 (Bit 12)                            */
#define PB_PB_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PB PB_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD5_Pos              (10UL)                    /*!< PB PB_PUPD: PUPD5 (Bit 10)                            */
#define PB_PB_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PB PB_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD4_Pos              (8UL)                     /*!< PB PB_PUPD: PUPD4 (Bit 8)                             */
#define PB_PB_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PB PB_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD3_Pos              (6UL)                     /*!< PB PB_PUPD: PUPD3 (Bit 6)                             */
#define PB_PB_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PB PB_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD2_Pos              (4UL)                     /*!< PB PB_PUPD: PUPD2 (Bit 4)                             */
#define PB_PB_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PB PB_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD1_Pos              (2UL)                     /*!< PB PB_PUPD: PUPD1 (Bit 2)                             */
#define PB_PB_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PB PB_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD0_Pos              (0UL)                     /*!< PB PB_PUPD: PUPD0 (Bit 0)                             */
#define PB_PB_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PB PB_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PB_INDR  ======================================================== */
#define PB_PB_INDR_INDR12_Pos             (12UL)                    /*!< PB PB_INDR: INDR12 (Bit 12)                           */
#define PB_PB_INDR_INDR12_Msk             (0x1000UL)                /*!< PB PB_INDR: INDR12 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR11_Pos             (11UL)                    /*!< PB PB_INDR: INDR11 (Bit 11)                           */
#define PB_PB_INDR_INDR11_Msk             (0x800UL)                 /*!< PB PB_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR10_Pos             (10UL)                    /*!< PB PB_INDR: INDR10 (Bit 10)                           */
#define PB_PB_INDR_INDR10_Msk             (0x400UL)                 /*!< PB PB_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR9_Pos              (9UL)                     /*!< PB PB_INDR: INDR9 (Bit 9)                             */
#define PB_PB_INDR_INDR9_Msk              (0x200UL)                 /*!< PB PB_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR8_Pos              (8UL)                     /*!< PB PB_INDR: INDR8 (Bit 8)                             */
#define PB_PB_INDR_INDR8_Msk              (0x100UL)                 /*!< PB PB_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR7_Pos              (7UL)                     /*!< PB PB_INDR: INDR7 (Bit 7)                             */
#define PB_PB_INDR_INDR7_Msk              (0x80UL)                  /*!< PB PB_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR6_Pos              (6UL)                     /*!< PB PB_INDR: INDR6 (Bit 6)                             */
#define PB_PB_INDR_INDR6_Msk              (0x40UL)                  /*!< PB PB_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR5_Pos              (5UL)                     /*!< PB PB_INDR: INDR5 (Bit 5)                             */
#define PB_PB_INDR_INDR5_Msk              (0x20UL)                  /*!< PB PB_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR4_Pos              (4UL)                     /*!< PB PB_INDR: INDR4 (Bit 4)                             */
#define PB_PB_INDR_INDR4_Msk              (0x10UL)                  /*!< PB PB_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR3_Pos              (3UL)                     /*!< PB PB_INDR: INDR3 (Bit 3)                             */
#define PB_PB_INDR_INDR3_Msk              (0x8UL)                   /*!< PB PB_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR2_Pos              (2UL)                     /*!< PB PB_INDR: INDR2 (Bit 2)                             */
#define PB_PB_INDR_INDR2_Msk              (0x4UL)                   /*!< PB PB_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR1_Pos              (1UL)                     /*!< PB PB_INDR: INDR1 (Bit 1)                             */
#define PB_PB_INDR_INDR1_Msk              (0x2UL)                   /*!< PB PB_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR0_Pos              (0UL)                     /*!< PB PB_INDR: INDR0 (Bit 0)                             */
#define PB_PB_INDR_INDR0_Msk              (0x1UL)                   /*!< PB PB_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PB_OUTDR  ======================================================== */
#define PB_PB_OUTDR_OUTDR12_Pos           (12UL)                    /*!< PB PB_OUTDR: OUTDR12 (Bit 12)                         */
#define PB_PB_OUTDR_OUTDR12_Msk           (0x1000UL)                /*!< PB PB_OUTDR: OUTDR12 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PB PB_OUTDR: OUTDR11 (Bit 11)                         */
#define PB_PB_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PB PB_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PB PB_OUTDR: OUTDR10 (Bit 10)                         */
#define PB_PB_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PB PB_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PB PB_OUTDR: OUTDR9 (Bit 9)                           */
#define PB_PB_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PB PB_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PB PB_OUTDR: OUTDR8 (Bit 8)                           */
#define PB_PB_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PB PB_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PB PB_OUTDR: OUTDR7 (Bit 7)                           */
#define PB_PB_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PB PB_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PB PB_OUTDR: OUTDR6 (Bit 6)                           */
#define PB_PB_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PB PB_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PB PB_OUTDR: OUTDR5 (Bit 5)                           */
#define PB_PB_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PB PB_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PB PB_OUTDR: OUTDR4 (Bit 4)                           */
#define PB_PB_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PB PB_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PB PB_OUTDR: OUTDR3 (Bit 3)                           */
#define PB_PB_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PB PB_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PB PB_OUTDR: OUTDR2 (Bit 2)                           */
#define PB_PB_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PB PB_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PB PB_OUTDR: OUTDR1 (Bit 1)                           */
#define PB_PB_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PB PB_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PB PB_OUTDR: OUTDR0 (Bit 0)                           */
#define PB_PB_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PB PB_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PB_BSR  ========================================================= */
#define PB_PB_BSR_BSR12_Pos               (12UL)                    /*!< PB PB_BSR: BSR12 (Bit 12)                             */
#define PB_PB_BSR_BSR12_Msk               (0x1000UL)                /*!< PB PB_BSR: BSR12 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR11_Pos               (11UL)                    /*!< PB PB_BSR: BSR11 (Bit 11)                             */
#define PB_PB_BSR_BSR11_Msk               (0x800UL)                 /*!< PB PB_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR10_Pos               (10UL)                    /*!< PB PB_BSR: BSR10 (Bit 10)                             */
#define PB_PB_BSR_BSR10_Msk               (0x400UL)                 /*!< PB PB_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR9_Pos                (9UL)                     /*!< PB PB_BSR: BSR9 (Bit 9)                               */
#define PB_PB_BSR_BSR9_Msk                (0x200UL)                 /*!< PB PB_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR8_Pos                (8UL)                     /*!< PB PB_BSR: BSR8 (Bit 8)                               */
#define PB_PB_BSR_BSR8_Msk                (0x100UL)                 /*!< PB PB_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR7_Pos                (7UL)                     /*!< PB PB_BSR: BSR7 (Bit 7)                               */
#define PB_PB_BSR_BSR7_Msk                (0x80UL)                  /*!< PB PB_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR6_Pos                (6UL)                     /*!< PB PB_BSR: BSR6 (Bit 6)                               */
#define PB_PB_BSR_BSR6_Msk                (0x40UL)                  /*!< PB PB_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR5_Pos                (5UL)                     /*!< PB PB_BSR: BSR5 (Bit 5)                               */
#define PB_PB_BSR_BSR5_Msk                (0x20UL)                  /*!< PB PB_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR4_Pos                (4UL)                     /*!< PB PB_BSR: BSR4 (Bit 4)                               */
#define PB_PB_BSR_BSR4_Msk                (0x10UL)                  /*!< PB PB_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR3_Pos                (3UL)                     /*!< PB PB_BSR: BSR3 (Bit 3)                               */
#define PB_PB_BSR_BSR3_Msk                (0x8UL)                   /*!< PB PB_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR2_Pos                (2UL)                     /*!< PB PB_BSR: BSR2 (Bit 2)                               */
#define PB_PB_BSR_BSR2_Msk                (0x4UL)                   /*!< PB PB_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR1_Pos                (1UL)                     /*!< PB PB_BSR: BSR1 (Bit 1)                               */
#define PB_PB_BSR_BSR1_Msk                (0x2UL)                   /*!< PB PB_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR0_Pos                (0UL)                     /*!< PB PB_BSR: BSR0 (Bit 0)                               */
#define PB_PB_BSR_BSR0_Msk                (0x1UL)                   /*!< PB PB_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PB_BCR  ========================================================= */
#define PB_PB_BCR_BCR12_Pos               (12UL)                    /*!< PB PB_BCR: BCR12 (Bit 12)                             */
#define PB_PB_BCR_BCR12_Msk               (0x1000UL)                /*!< PB PB_BCR: BCR12 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR11_Pos               (11UL)                    /*!< PB PB_BCR: BCR11 (Bit 11)                             */
#define PB_PB_BCR_BCR11_Msk               (0x800UL)                 /*!< PB PB_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR10_Pos               (10UL)                    /*!< PB PB_BCR: BCR10 (Bit 10)                             */
#define PB_PB_BCR_BCR10_Msk               (0x400UL)                 /*!< PB PB_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR9_Pos                (9UL)                     /*!< PB PB_BCR: BCR9 (Bit 9)                               */
#define PB_PB_BCR_BCR9_Msk                (0x200UL)                 /*!< PB PB_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR8_Pos                (8UL)                     /*!< PB PB_BCR: BCR8 (Bit 8)                               */
#define PB_PB_BCR_BCR8_Msk                (0x100UL)                 /*!< PB PB_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR7_Pos                (7UL)                     /*!< PB PB_BCR: BCR7 (Bit 7)                               */
#define PB_PB_BCR_BCR7_Msk                (0x80UL)                  /*!< PB PB_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR6_Pos                (6UL)                     /*!< PB PB_BCR: BCR6 (Bit 6)                               */
#define PB_PB_BCR_BCR6_Msk                (0x40UL)                  /*!< PB PB_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR5_Pos                (5UL)                     /*!< PB PB_BCR: BCR5 (Bit 5)                               */
#define PB_PB_BCR_BCR5_Msk                (0x20UL)                  /*!< PB PB_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR4_Pos                (4UL)                     /*!< PB PB_BCR: BCR4 (Bit 4)                               */
#define PB_PB_BCR_BCR4_Msk                (0x10UL)                  /*!< PB PB_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR3_Pos                (3UL)                     /*!< PB PB_BCR: BCR3 (Bit 3)                               */
#define PB_PB_BCR_BCR3_Msk                (0x8UL)                   /*!< PB PB_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR2_Pos                (2UL)                     /*!< PB PB_BCR: BCR2 (Bit 2)                               */
#define PB_PB_BCR_BCR2_Msk                (0x4UL)                   /*!< PB PB_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR1_Pos                (1UL)                     /*!< PB PB_BCR: BCR1 (Bit 1)                               */
#define PB_PB_BCR_BCR1_Msk                (0x2UL)                   /*!< PB PB_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR0_Pos                (0UL)                     /*!< PB PB_BCR: BCR0 (Bit 0)                               */
#define PB_PB_BCR_BCR0_Msk                (0x1UL)                   /*!< PB PB_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PB_OUTDMSK  ======================================================= */
#define PB_PB_OUTDMSK_OUTDMSK12_Pos       (12UL)                    /*!< PB PB_OUTDMSK: OUTDMSK12 (Bit 12)                     */
#define PB_PB_OUTDMSK_OUTDMSK12_Msk       (0x1000UL)                /*!< PB PB_OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PB PB_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PB_PB_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PB PB_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PB PB_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PB_PB_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PB PB_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PB PB_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PB_PB_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PB PB_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PB PB_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PB_PB_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PB PB_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PB PB_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PB_PB_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PB PB_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PB PB_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PB_PB_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PB PB_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PB PB_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PB_PB_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PB PB_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PB PB_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PB_PB_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PB PB_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PB PB_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PB_PB_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PB PB_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PB PB_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PB_PB_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PB PB_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PB PB_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PB_PB_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PB PB_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PB PB_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PB_PB_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PB PB_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PB_DBCR  ======================================================== */
#define PB_PB_DBCR_DBCLK_Pos              (16UL)                    /*!< PB PB_DBCR: DBCLK (Bit 16)                            */
#define PB_PB_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PB PB_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PB_PB_DBCR_DBEN12_Pos             (12UL)                    /*!< PB PB_DBCR: DBEN12 (Bit 12)                           */
#define PB_PB_DBCR_DBEN12_Msk             (0x1000UL)                /*!< PB PB_DBCR: DBEN12 (Bitfield-Mask: 0x01)              */
#define PB_PB_DBCR_DBEN11_Pos             (11UL)                    /*!< PB PB_DBCR: DBEN11 (Bit 11)                           */
#define PB_PB_DBCR_DBEN11_Msk             (0x800UL)                 /*!< PB PB_DBCR: DBEN11 (Bitfield-Mask: 0x01)              */
#define PB_PB_DBCR_DBEN10_Pos             (10UL)                    /*!< PB PB_DBCR: DBEN10 (Bit 10)                           */
#define PB_PB_DBCR_DBEN10_Msk             (0x400UL)                 /*!< PB PB_DBCR: DBEN10 (Bitfield-Mask: 0x01)              */
#define PB_PB_DBCR_DBEN9_Pos              (9UL)                     /*!< PB PB_DBCR: DBEN9 (Bit 9)                             */
#define PB_PB_DBCR_DBEN9_Msk              (0x200UL)                 /*!< PB PB_DBCR: DBEN9 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN8_Pos              (8UL)                     /*!< PB PB_DBCR: DBEN8 (Bit 8)                             */
#define PB_PB_DBCR_DBEN8_Msk              (0x100UL)                 /*!< PB PB_DBCR: DBEN8 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN7_Pos              (7UL)                     /*!< PB PB_DBCR: DBEN7 (Bit 7)                             */
#define PB_PB_DBCR_DBEN7_Msk              (0x80UL)                  /*!< PB PB_DBCR: DBEN7 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN6_Pos              (6UL)                     /*!< PB PB_DBCR: DBEN6 (Bit 6)                             */
#define PB_PB_DBCR_DBEN6_Msk              (0x40UL)                  /*!< PB PB_DBCR: DBEN6 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN5_Pos              (5UL)                     /*!< PB PB_DBCR: DBEN5 (Bit 5)                             */
#define PB_PB_DBCR_DBEN5_Msk              (0x20UL)                  /*!< PB PB_DBCR: DBEN5 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN4_Pos              (4UL)                     /*!< PB PB_DBCR: DBEN4 (Bit 4)                             */
#define PB_PB_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PB PB_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN3_Pos              (3UL)                     /*!< PB PB_DBCR: DBEN3 (Bit 3)                             */
#define PB_PB_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PB PB_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN2_Pos              (2UL)                     /*!< PB PB_DBCR: DBEN2 (Bit 2)                             */
#define PB_PB_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PB PB_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN1_Pos              (1UL)                     /*!< PB PB_DBCR: DBEN1 (Bit 1)                             */
#define PB_PB_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PB PB_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN0_Pos              (0UL)                     /*!< PB PB_DBCR: DBEN0 (Bit 0)                             */
#define PB_PB_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PB PB_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PC_MOD_MODE12_Pos                 (24UL)                    /*!< PC MOD: MODE12 (Bit 24)                               */
#define PC_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PC MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE11_Pos                 (22UL)                    /*!< PC MOD: MODE11 (Bit 22)                               */
#define PC_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PC MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE10_Pos                 (20UL)                    /*!< PC MOD: MODE10 (Bit 20)                               */
#define PC_MOD_MODE10_Msk                 (0x300000UL)              /*!< PC MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE9_Pos                  (18UL)                    /*!< PC MOD: MODE9 (Bit 18)                                */
#define PC_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PC MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE8_Pos                  (16UL)                    /*!< PC MOD: MODE8 (Bit 16)                                */
#define PC_MOD_MODE8_Msk                  (0x30000UL)               /*!< PC MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE7_Pos                  (14UL)                    /*!< PC MOD: MODE7 (Bit 14)                                */
#define PC_MOD_MODE7_Msk                  (0xc000UL)                /*!< PC MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE6_Pos                  (12UL)                    /*!< PC MOD: MODE6 (Bit 12)                                */
#define PC_MOD_MODE6_Msk                  (0x3000UL)                /*!< PC MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE5_Pos                  (10UL)                    /*!< PC MOD: MODE5 (Bit 10)                                */
#define PC_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PC MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE4_Pos                  (8UL)                     /*!< PC MOD: MODE4 (Bit 8)                                 */
#define PC_MOD_MODE4_Msk                  (0x300UL)                 /*!< PC MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE3_Pos                  (6UL)                     /*!< PC MOD: MODE3 (Bit 6)                                 */
#define PC_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PC MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE2_Pos                  (4UL)                     /*!< PC MOD: MODE2 (Bit 4)                                 */
#define PC_MOD_MODE2_Msk                  (0x30UL)                  /*!< PC MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE1_Pos                  (2UL)                     /*!< PC MOD: MODE1 (Bit 2)                                 */
#define PC_MOD_MODE1_Msk                  (0xcUL)                   /*!< PC MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE0_Pos                  (0UL)                     /*!< PC MOD: MODE0 (Bit 0)                                 */
#define PC_MOD_MODE0_Msk                  (0x3UL)                   /*!< PC MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PC_TYP_TYP12_Pos                  (12UL)                    /*!< PC TYP: TYP12 (Bit 12)                                */
#define PC_TYP_TYP12_Msk                  (0x1000UL)                /*!< PC TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP11_Pos                  (11UL)                    /*!< PC TYP: TYP11 (Bit 11)                                */
#define PC_TYP_TYP11_Msk                  (0x800UL)                 /*!< PC TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP10_Pos                  (10UL)                    /*!< PC TYP: TYP10 (Bit 10)                                */
#define PC_TYP_TYP10_Msk                  (0x400UL)                 /*!< PC TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP9_Pos                   (9UL)                     /*!< PC TYP: TYP9 (Bit 9)                                  */
#define PC_TYP_TYP9_Msk                   (0x200UL)                 /*!< PC TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP8_Pos                   (8UL)                     /*!< PC TYP: TYP8 (Bit 8)                                  */
#define PC_TYP_TYP8_Msk                   (0x100UL)                 /*!< PC TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP7_Pos                   (7UL)                     /*!< PC TYP: TYP7 (Bit 7)                                  */
#define PC_TYP_TYP7_Msk                   (0x80UL)                  /*!< PC TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP6_Pos                   (6UL)                     /*!< PC TYP: TYP6 (Bit 6)                                  */
#define PC_TYP_TYP6_Msk                   (0x40UL)                  /*!< PC TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP5_Pos                   (5UL)                     /*!< PC TYP: TYP5 (Bit 5)                                  */
#define PC_TYP_TYP5_Msk                   (0x20UL)                  /*!< PC TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP4_Pos                   (4UL)                     /*!< PC TYP: TYP4 (Bit 4)                                  */
#define PC_TYP_TYP4_Msk                   (0x10UL)                  /*!< PC TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP3_Pos                   (3UL)                     /*!< PC TYP: TYP3 (Bit 3)                                  */
#define PC_TYP_TYP3_Msk                   (0x8UL)                   /*!< PC TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP2_Pos                   (2UL)                     /*!< PC TYP: TYP2 (Bit 2)                                  */
#define PC_TYP_TYP2_Msk                   (0x4UL)                   /*!< PC TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP1_Pos                   (1UL)                     /*!< PC TYP: TYP1 (Bit 1)                                  */
#define PC_TYP_TYP1_Msk                   (0x2UL)                   /*!< PC TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP0_Pos                   (0UL)                     /*!< PC TYP: TYP0 (Bit 0)                                  */
#define PC_TYP_TYP0_Msk                   (0x1UL)                   /*!< PC TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PC_AFSR1_AFSR7_Pos                (28UL)                    /*!< PC AFSR1: AFSR7 (Bit 28)                              */
#define PC_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PC AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR6_Pos                (24UL)                    /*!< PC AFSR1: AFSR6 (Bit 24)                              */
#define PC_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PC AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR5_Pos                (20UL)                    /*!< PC AFSR1: AFSR5 (Bit 20)                              */
#define PC_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PC AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR4_Pos                (16UL)                    /*!< PC AFSR1: AFSR4 (Bit 16)                              */
#define PC_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PC AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR3_Pos                (12UL)                    /*!< PC AFSR1: AFSR3 (Bit 12)                              */
#define PC_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PC AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR2_Pos                (8UL)                     /*!< PC AFSR1: AFSR2 (Bit 8)                               */
#define PC_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PC AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR1_Pos                (4UL)                     /*!< PC AFSR1: AFSR1 (Bit 4)                               */
#define PC_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PC AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR0_Pos                (0UL)                     /*!< PC AFSR1: AFSR0 (Bit 0)                               */
#define PC_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PC AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PC_AFSR2_AFSR12_Pos               (16UL)                    /*!< PC AFSR2: AFSR12 (Bit 16)                             */
#define PC_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PC AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR11_Pos               (12UL)                    /*!< PC AFSR2: AFSR11 (Bit 12)                             */
#define PC_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PC AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR10_Pos               (8UL)                     /*!< PC AFSR2: AFSR10 (Bit 8)                              */
#define PC_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PC AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR9_Pos                (4UL)                     /*!< PC AFSR2: AFSR9 (Bit 4)                               */
#define PC_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PC AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR2_AFSR8_Pos                (0UL)                     /*!< PC AFSR2: AFSR8 (Bit 0)                               */
#define PC_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PC AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PC_PUPD_PUPD12_Pos                (24UL)                    /*!< PC PUPD: PUPD12 (Bit 24)                              */
#define PC_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PC PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD11_Pos                (22UL)                    /*!< PC PUPD: PUPD11 (Bit 22)                              */
#define PC_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PC PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD10_Pos                (20UL)                    /*!< PC PUPD: PUPD10 (Bit 20)                              */
#define PC_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PC PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD9_Pos                 (18UL)                    /*!< PC PUPD: PUPD9 (Bit 18)                               */
#define PC_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PC PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD8_Pos                 (16UL)                    /*!< PC PUPD: PUPD8 (Bit 16)                               */
#define PC_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PC PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD7_Pos                 (14UL)                    /*!< PC PUPD: PUPD7 (Bit 14)                               */
#define PC_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PC PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD6_Pos                 (12UL)                    /*!< PC PUPD: PUPD6 (Bit 12)                               */
#define PC_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PC PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD5_Pos                 (10UL)                    /*!< PC PUPD: PUPD5 (Bit 10)                               */
#define PC_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PC PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD4_Pos                 (8UL)                     /*!< PC PUPD: PUPD4 (Bit 8)                                */
#define PC_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PC PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD3_Pos                 (6UL)                     /*!< PC PUPD: PUPD3 (Bit 6)                                */
#define PC_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PC PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD2_Pos                 (4UL)                     /*!< PC PUPD: PUPD2 (Bit 4)                                */
#define PC_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PC PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD1_Pos                 (2UL)                     /*!< PC PUPD: PUPD1 (Bit 2)                                */
#define PC_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PC PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD0_Pos                 (0UL)                     /*!< PC PUPD: PUPD0 (Bit 0)                                */
#define PC_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PC PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PC_INDR_INDR12_Pos                (12UL)                    /*!< PC INDR: INDR12 (Bit 12)                              */
#define PC_INDR_INDR12_Msk                (0x1000UL)                /*!< PC INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR11_Pos                (11UL)                    /*!< PC INDR: INDR11 (Bit 11)                              */
#define PC_INDR_INDR11_Msk                (0x800UL)                 /*!< PC INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR10_Pos                (10UL)                    /*!< PC INDR: INDR10 (Bit 10)                              */
#define PC_INDR_INDR10_Msk                (0x400UL)                 /*!< PC INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR9_Pos                 (9UL)                     /*!< PC INDR: INDR9 (Bit 9)                                */
#define PC_INDR_INDR9_Msk                 (0x200UL)                 /*!< PC INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR8_Pos                 (8UL)                     /*!< PC INDR: INDR8 (Bit 8)                                */
#define PC_INDR_INDR8_Msk                 (0x100UL)                 /*!< PC INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR7_Pos                 (7UL)                     /*!< PC INDR: INDR7 (Bit 7)                                */
#define PC_INDR_INDR7_Msk                 (0x80UL)                  /*!< PC INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR6_Pos                 (6UL)                     /*!< PC INDR: INDR6 (Bit 6)                                */
#define PC_INDR_INDR6_Msk                 (0x40UL)                  /*!< PC INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR5_Pos                 (5UL)                     /*!< PC INDR: INDR5 (Bit 5)                                */
#define PC_INDR_INDR5_Msk                 (0x20UL)                  /*!< PC INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR4_Pos                 (4UL)                     /*!< PC INDR: INDR4 (Bit 4)                                */
#define PC_INDR_INDR4_Msk                 (0x10UL)                  /*!< PC INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR3_Pos                 (3UL)                     /*!< PC INDR: INDR3 (Bit 3)                                */
#define PC_INDR_INDR3_Msk                 (0x8UL)                   /*!< PC INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR2_Pos                 (2UL)                     /*!< PC INDR: INDR2 (Bit 2)                                */
#define PC_INDR_INDR2_Msk                 (0x4UL)                   /*!< PC INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR1_Pos                 (1UL)                     /*!< PC INDR: INDR1 (Bit 1)                                */
#define PC_INDR_INDR1_Msk                 (0x2UL)                   /*!< PC INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR0_Pos                 (0UL)                     /*!< PC INDR: INDR0 (Bit 0)                                */
#define PC_INDR_INDR0_Msk                 (0x1UL)                   /*!< PC INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PC_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PC OUTDR: OUTDR12 (Bit 12)                            */
#define PC_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PC OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PC OUTDR: OUTDR11 (Bit 11)                            */
#define PC_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PC OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PC OUTDR: OUTDR10 (Bit 10)                            */
#define PC_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PC OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PC OUTDR: OUTDR9 (Bit 9)                              */
#define PC_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PC OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PC OUTDR: OUTDR8 (Bit 8)                              */
#define PC_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PC OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PC OUTDR: OUTDR7 (Bit 7)                              */
#define PC_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PC OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PC OUTDR: OUTDR6 (Bit 6)                              */
#define PC_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PC OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PC OUTDR: OUTDR5 (Bit 5)                              */
#define PC_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PC OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PC OUTDR: OUTDR4 (Bit 4)                              */
#define PC_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PC OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PC OUTDR: OUTDR3 (Bit 3)                              */
#define PC_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PC OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PC OUTDR: OUTDR2 (Bit 2)                              */
#define PC_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PC OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PC OUTDR: OUTDR1 (Bit 1)                              */
#define PC_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PC OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PC OUTDR: OUTDR0 (Bit 0)                              */
#define PC_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PC OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PC_BSR_BSR12_Pos                  (12UL)                    /*!< PC BSR: BSR12 (Bit 12)                                */
#define PC_BSR_BSR12_Msk                  (0x1000UL)                /*!< PC BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR11_Pos                  (11UL)                    /*!< PC BSR: BSR11 (Bit 11)                                */
#define PC_BSR_BSR11_Msk                  (0x800UL)                 /*!< PC BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR10_Pos                  (10UL)                    /*!< PC BSR: BSR10 (Bit 10)                                */
#define PC_BSR_BSR10_Msk                  (0x400UL)                 /*!< PC BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR9_Pos                   (9UL)                     /*!< PC BSR: BSR9 (Bit 9)                                  */
#define PC_BSR_BSR9_Msk                   (0x200UL)                 /*!< PC BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR8_Pos                   (8UL)                     /*!< PC BSR: BSR8 (Bit 8)                                  */
#define PC_BSR_BSR8_Msk                   (0x100UL)                 /*!< PC BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR7_Pos                   (7UL)                     /*!< PC BSR: BSR7 (Bit 7)                                  */
#define PC_BSR_BSR7_Msk                   (0x80UL)                  /*!< PC BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR6_Pos                   (6UL)                     /*!< PC BSR: BSR6 (Bit 6)                                  */
#define PC_BSR_BSR6_Msk                   (0x40UL)                  /*!< PC BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR5_Pos                   (5UL)                     /*!< PC BSR: BSR5 (Bit 5)                                  */
#define PC_BSR_BSR5_Msk                   (0x20UL)                  /*!< PC BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR4_Pos                   (4UL)                     /*!< PC BSR: BSR4 (Bit 4)                                  */
#define PC_BSR_BSR4_Msk                   (0x10UL)                  /*!< PC BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR3_Pos                   (3UL)                     /*!< PC BSR: BSR3 (Bit 3)                                  */
#define PC_BSR_BSR3_Msk                   (0x8UL)                   /*!< PC BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR2_Pos                   (2UL)                     /*!< PC BSR: BSR2 (Bit 2)                                  */
#define PC_BSR_BSR2_Msk                   (0x4UL)                   /*!< PC BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR1_Pos                   (1UL)                     /*!< PC BSR: BSR1 (Bit 1)                                  */
#define PC_BSR_BSR1_Msk                   (0x2UL)                   /*!< PC BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR0_Pos                   (0UL)                     /*!< PC BSR: BSR0 (Bit 0)                                  */
#define PC_BSR_BSR0_Msk                   (0x1UL)                   /*!< PC BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PC_BCR_BCR12_Pos                  (12UL)                    /*!< PC BCR: BCR12 (Bit 12)                                */
#define PC_BCR_BCR12_Msk                  (0x1000UL)                /*!< PC BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR11_Pos                  (11UL)                    /*!< PC BCR: BCR11 (Bit 11)                                */
#define PC_BCR_BCR11_Msk                  (0x800UL)                 /*!< PC BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR10_Pos                  (10UL)                    /*!< PC BCR: BCR10 (Bit 10)                                */
#define PC_BCR_BCR10_Msk                  (0x400UL)                 /*!< PC BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR9_Pos                   (9UL)                     /*!< PC BCR: BCR9 (Bit 9)                                  */
#define PC_BCR_BCR9_Msk                   (0x200UL)                 /*!< PC BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR8_Pos                   (8UL)                     /*!< PC BCR: BCR8 (Bit 8)                                  */
#define PC_BCR_BCR8_Msk                   (0x100UL)                 /*!< PC BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR7_Pos                   (7UL)                     /*!< PC BCR: BCR7 (Bit 7)                                  */
#define PC_BCR_BCR7_Msk                   (0x80UL)                  /*!< PC BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR6_Pos                   (6UL)                     /*!< PC BCR: BCR6 (Bit 6)                                  */
#define PC_BCR_BCR6_Msk                   (0x40UL)                  /*!< PC BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR5_Pos                   (5UL)                     /*!< PC BCR: BCR5 (Bit 5)                                  */
#define PC_BCR_BCR5_Msk                   (0x20UL)                  /*!< PC BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR4_Pos                   (4UL)                     /*!< PC BCR: BCR4 (Bit 4)                                  */
#define PC_BCR_BCR4_Msk                   (0x10UL)                  /*!< PC BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR3_Pos                   (3UL)                     /*!< PC BCR: BCR3 (Bit 3)                                  */
#define PC_BCR_BCR3_Msk                   (0x8UL)                   /*!< PC BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR2_Pos                   (2UL)                     /*!< PC BCR: BCR2 (Bit 2)                                  */
#define PC_BCR_BCR2_Msk                   (0x4UL)                   /*!< PC BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR1_Pos                   (1UL)                     /*!< PC BCR: BCR1 (Bit 1)                                  */
#define PC_BCR_BCR1_Msk                   (0x2UL)                   /*!< PC BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR0_Pos                   (0UL)                     /*!< PC BCR: BCR0 (Bit 0)                                  */
#define PC_BCR_BCR0_Msk                   (0x1UL)                   /*!< PC BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PC_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PC OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PC_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PC OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PC OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PC_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PC OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PC OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PC_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PC OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PC OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PC_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PC OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PC OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PC_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PC OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PC OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PC_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PC OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PC OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PC_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PC OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PC OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PC_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PC OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PC OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PC_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PC OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PC OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PC_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PC OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PC OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PC_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PC OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PC OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PC_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PC OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PC OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PC_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PC OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PC_DBCR_DBCLK_Pos                 (16UL)                    /*!< PC DBCR: DBCLK (Bit 16)                               */
#define PC_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PC DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PC_DBCR_DBEN12_Pos                (12UL)                    /*!< PC DBCR: DBEN12 (Bit 12)                              */
#define PC_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PC DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PC_DBCR_DBEN11_Pos                (11UL)                    /*!< PC DBCR: DBEN11 (Bit 11)                              */
#define PC_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PC DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PC_DBCR_DBEN10_Pos                (10UL)                    /*!< PC DBCR: DBEN10 (Bit 10)                              */
#define PC_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PC DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PC_DBCR_DBEN9_Pos                 (9UL)                     /*!< PC DBCR: DBEN9 (Bit 9)                                */
#define PC_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PC DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN8_Pos                 (8UL)                     /*!< PC DBCR: DBEN8 (Bit 8)                                */
#define PC_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PC DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN7_Pos                 (7UL)                     /*!< PC DBCR: DBEN7 (Bit 7)                                */
#define PC_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PC DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN6_Pos                 (6UL)                     /*!< PC DBCR: DBEN6 (Bit 6)                                */
#define PC_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PC DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN5_Pos                 (5UL)                     /*!< PC DBCR: DBEN5 (Bit 5)                                */
#define PC_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PC DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN4_Pos                 (4UL)                     /*!< PC DBCR: DBEN4 (Bit 4)                                */
#define PC_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PC DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN3_Pos                 (3UL)                     /*!< PC DBCR: DBEN3 (Bit 3)                                */
#define PC_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PC DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN2_Pos                 (2UL)                     /*!< PC DBCR: DBEN2 (Bit 2)                                */
#define PC_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PC DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN1_Pos                 (1UL)                     /*!< PC DBCR: DBEN1 (Bit 1)                                */
#define PC_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PC DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN0_Pos                 (0UL)                     /*!< PC DBCR: DBEN0 (Bit 0)                                */
#define PC_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PC DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PC_MOD  ========================================================= */
#define PC_PC_MOD_MODE11_Pos              (22UL)                    /*!< PC PC_MOD: MODE11 (Bit 22)                            */
#define PC_PC_MOD_MODE11_Msk              (0xc00000UL)              /*!< PC PC_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PC_PC_MOD_MODE10_Pos              (20UL)                    /*!< PC PC_MOD: MODE10 (Bit 20)                            */
#define PC_PC_MOD_MODE10_Msk              (0x300000UL)              /*!< PC PC_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PC_PC_MOD_MODE9_Pos               (18UL)                    /*!< PC PC_MOD: MODE9 (Bit 18)                             */
#define PC_PC_MOD_MODE9_Msk               (0xc0000UL)               /*!< PC PC_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE8_Pos               (16UL)                    /*!< PC PC_MOD: MODE8 (Bit 16)                             */
#define PC_PC_MOD_MODE8_Msk               (0x30000UL)               /*!< PC PC_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE7_Pos               (14UL)                    /*!< PC PC_MOD: MODE7 (Bit 14)                             */
#define PC_PC_MOD_MODE7_Msk               (0xc000UL)                /*!< PC PC_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE6_Pos               (12UL)                    /*!< PC PC_MOD: MODE6 (Bit 12)                             */
#define PC_PC_MOD_MODE6_Msk               (0x3000UL)                /*!< PC PC_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE5_Pos               (10UL)                    /*!< PC PC_MOD: MODE5 (Bit 10)                             */
#define PC_PC_MOD_MODE5_Msk               (0xc00UL)                 /*!< PC PC_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE4_Pos               (8UL)                     /*!< PC PC_MOD: MODE4 (Bit 8)                              */
#define PC_PC_MOD_MODE4_Msk               (0x300UL)                 /*!< PC PC_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE3_Pos               (6UL)                     /*!< PC PC_MOD: MODE3 (Bit 6)                              */
#define PC_PC_MOD_MODE3_Msk               (0xc0UL)                  /*!< PC PC_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE2_Pos               (4UL)                     /*!< PC PC_MOD: MODE2 (Bit 4)                              */
#define PC_PC_MOD_MODE2_Msk               (0x30UL)                  /*!< PC PC_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE1_Pos               (2UL)                     /*!< PC PC_MOD: MODE1 (Bit 2)                              */
#define PC_PC_MOD_MODE1_Msk               (0xcUL)                   /*!< PC PC_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE0_Pos               (0UL)                     /*!< PC PC_MOD: MODE0 (Bit 0)                              */
#define PC_PC_MOD_MODE0_Msk               (0x3UL)                   /*!< PC PC_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PC_TYP  ========================================================= */
#define PC_PC_TYP_TYP11_Pos               (11UL)                    /*!< PC PC_TYP: TYP11 (Bit 11)                             */
#define PC_PC_TYP_TYP11_Msk               (0x800UL)                 /*!< PC PC_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PC_PC_TYP_TYP10_Pos               (10UL)                    /*!< PC PC_TYP: TYP10 (Bit 10)                             */
#define PC_PC_TYP_TYP10_Msk               (0x400UL)                 /*!< PC PC_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PC_PC_TYP_TYP9_Pos                (9UL)                     /*!< PC PC_TYP: TYP9 (Bit 9)                               */
#define PC_PC_TYP_TYP9_Msk                (0x200UL)                 /*!< PC PC_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP8_Pos                (8UL)                     /*!< PC PC_TYP: TYP8 (Bit 8)                               */
#define PC_PC_TYP_TYP8_Msk                (0x100UL)                 /*!< PC PC_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP7_Pos                (7UL)                     /*!< PC PC_TYP: TYP7 (Bit 7)                               */
#define PC_PC_TYP_TYP7_Msk                (0x80UL)                  /*!< PC PC_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP6_Pos                (6UL)                     /*!< PC PC_TYP: TYP6 (Bit 6)                               */
#define PC_PC_TYP_TYP6_Msk                (0x40UL)                  /*!< PC PC_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP5_Pos                (5UL)                     /*!< PC PC_TYP: TYP5 (Bit 5)                               */
#define PC_PC_TYP_TYP5_Msk                (0x20UL)                  /*!< PC PC_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP4_Pos                (4UL)                     /*!< PC PC_TYP: TYP4 (Bit 4)                               */
#define PC_PC_TYP_TYP4_Msk                (0x10UL)                  /*!< PC PC_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP3_Pos                (3UL)                     /*!< PC PC_TYP: TYP3 (Bit 3)                               */
#define PC_PC_TYP_TYP3_Msk                (0x8UL)                   /*!< PC PC_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP2_Pos                (2UL)                     /*!< PC PC_TYP: TYP2 (Bit 2)                               */
#define PC_PC_TYP_TYP2_Msk                (0x4UL)                   /*!< PC PC_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP1_Pos                (1UL)                     /*!< PC PC_TYP: TYP1 (Bit 1)                               */
#define PC_PC_TYP_TYP1_Msk                (0x2UL)                   /*!< PC PC_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP0_Pos                (0UL)                     /*!< PC PC_TYP: TYP0 (Bit 0)                               */
#define PC_PC_TYP_TYP0_Msk                (0x1UL)                   /*!< PC PC_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PC_AFSR1  ======================================================== */
#define PC_PC_AFSR1_AFSR7_Pos             (28UL)                    /*!< PC PC_AFSR1: AFSR7 (Bit 28)                           */
#define PC_PC_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PC PC_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR6_Pos             (24UL)                    /*!< PC PC_AFSR1: AFSR6 (Bit 24)                           */
#define PC_PC_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PC PC_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR5_Pos             (20UL)                    /*!< PC PC_AFSR1: AFSR5 (Bit 20)                           */
#define PC_PC_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PC PC_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR4_Pos             (16UL)                    /*!< PC PC_AFSR1: AFSR4 (Bit 16)                           */
#define PC_PC_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PC PC_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR3_Pos             (12UL)                    /*!< PC PC_AFSR1: AFSR3 (Bit 12)                           */
#define PC_PC_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PC PC_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR2_Pos             (8UL)                     /*!< PC PC_AFSR1: AFSR2 (Bit 8)                            */
#define PC_PC_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PC PC_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR1_Pos             (4UL)                     /*!< PC PC_AFSR1: AFSR1 (Bit 4)                            */
#define PC_PC_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PC PC_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR0_Pos             (0UL)                     /*!< PC PC_AFSR1: AFSR0 (Bit 0)                            */
#define PC_PC_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PC PC_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PC_AFSR2  ======================================================== */
#define PC_PC_AFSR2_AFSR11_Pos            (12UL)                    /*!< PC PC_AFSR2: AFSR11 (Bit 12)                          */
#define PC_PC_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PC PC_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PC_PC_AFSR2_AFSR10_Pos            (8UL)                     /*!< PC PC_AFSR2: AFSR10 (Bit 8)                           */
#define PC_PC_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PC PC_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PC_PC_AFSR2_AFSR9_Pos             (4UL)                     /*!< PC PC_AFSR2: AFSR9 (Bit 4)                            */
#define PC_PC_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PC PC_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR2_AFSR8_Pos             (0UL)                     /*!< PC PC_AFSR2: AFSR8 (Bit 0)                            */
#define PC_PC_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PC PC_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PC_PUPD  ======================================================== */
#define PC_PC_PUPD_PUPD11_Pos             (22UL)                    /*!< PC PC_PUPD: PUPD11 (Bit 22)                           */
#define PC_PC_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PC PC_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PC_PC_PUPD_PUPD10_Pos             (20UL)                    /*!< PC PC_PUPD: PUPD10 (Bit 20)                           */
#define PC_PC_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PC PC_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PC_PC_PUPD_PUPD9_Pos              (18UL)                    /*!< PC PC_PUPD: PUPD9 (Bit 18)                            */
#define PC_PC_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PC PC_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD8_Pos              (16UL)                    /*!< PC PC_PUPD: PUPD8 (Bit 16)                            */
#define PC_PC_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PC PC_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD7_Pos              (14UL)                    /*!< PC PC_PUPD: PUPD7 (Bit 14)                            */
#define PC_PC_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PC PC_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD6_Pos              (12UL)                    /*!< PC PC_PUPD: PUPD6 (Bit 12)                            */
#define PC_PC_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PC PC_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD5_Pos              (10UL)                    /*!< PC PC_PUPD: PUPD5 (Bit 10)                            */
#define PC_PC_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PC PC_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD4_Pos              (8UL)                     /*!< PC PC_PUPD: PUPD4 (Bit 8)                             */
#define PC_PC_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PC PC_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD3_Pos              (6UL)                     /*!< PC PC_PUPD: PUPD3 (Bit 6)                             */
#define PC_PC_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PC PC_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD2_Pos              (4UL)                     /*!< PC PC_PUPD: PUPD2 (Bit 4)                             */
#define PC_PC_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PC PC_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD1_Pos              (2UL)                     /*!< PC PC_PUPD: PUPD1 (Bit 2)                             */
#define PC_PC_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PC PC_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD0_Pos              (0UL)                     /*!< PC PC_PUPD: PUPD0 (Bit 0)                             */
#define PC_PC_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PC PC_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PC_INDR  ======================================================== */
#define PC_PC_INDR_INDR11_Pos             (11UL)                    /*!< PC PC_INDR: INDR11 (Bit 11)                           */
#define PC_PC_INDR_INDR11_Msk             (0x800UL)                 /*!< PC PC_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PC_PC_INDR_INDR10_Pos             (10UL)                    /*!< PC PC_INDR: INDR10 (Bit 10)                           */
#define PC_PC_INDR_INDR10_Msk             (0x400UL)                 /*!< PC PC_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PC_PC_INDR_INDR9_Pos              (9UL)                     /*!< PC PC_INDR: INDR9 (Bit 9)                             */
#define PC_PC_INDR_INDR9_Msk              (0x200UL)                 /*!< PC PC_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR8_Pos              (8UL)                     /*!< PC PC_INDR: INDR8 (Bit 8)                             */
#define PC_PC_INDR_INDR8_Msk              (0x100UL)                 /*!< PC PC_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR7_Pos              (7UL)                     /*!< PC PC_INDR: INDR7 (Bit 7)                             */
#define PC_PC_INDR_INDR7_Msk              (0x80UL)                  /*!< PC PC_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR6_Pos              (6UL)                     /*!< PC PC_INDR: INDR6 (Bit 6)                             */
#define PC_PC_INDR_INDR6_Msk              (0x40UL)                  /*!< PC PC_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR5_Pos              (5UL)                     /*!< PC PC_INDR: INDR5 (Bit 5)                             */
#define PC_PC_INDR_INDR5_Msk              (0x20UL)                  /*!< PC PC_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR4_Pos              (4UL)                     /*!< PC PC_INDR: INDR4 (Bit 4)                             */
#define PC_PC_INDR_INDR4_Msk              (0x10UL)                  /*!< PC PC_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR3_Pos              (3UL)                     /*!< PC PC_INDR: INDR3 (Bit 3)                             */
#define PC_PC_INDR_INDR3_Msk              (0x8UL)                   /*!< PC PC_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR2_Pos              (2UL)                     /*!< PC PC_INDR: INDR2 (Bit 2)                             */
#define PC_PC_INDR_INDR2_Msk              (0x4UL)                   /*!< PC PC_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR1_Pos              (1UL)                     /*!< PC PC_INDR: INDR1 (Bit 1)                             */
#define PC_PC_INDR_INDR1_Msk              (0x2UL)                   /*!< PC PC_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR0_Pos              (0UL)                     /*!< PC PC_INDR: INDR0 (Bit 0)                             */
#define PC_PC_INDR_INDR0_Msk              (0x1UL)                   /*!< PC PC_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PC_OUTDR  ======================================================== */
#define PC_PC_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PC PC_OUTDR: OUTDR11 (Bit 11)                         */
#define PC_PC_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PC PC_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PC_PC_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PC PC_OUTDR: OUTDR10 (Bit 10)                         */
#define PC_PC_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PC PC_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PC_PC_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PC PC_OUTDR: OUTDR9 (Bit 9)                           */
#define PC_PC_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PC PC_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PC PC_OUTDR: OUTDR8 (Bit 8)                           */
#define PC_PC_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PC PC_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PC PC_OUTDR: OUTDR7 (Bit 7)                           */
#define PC_PC_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PC PC_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PC PC_OUTDR: OUTDR6 (Bit 6)                           */
#define PC_PC_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PC PC_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PC PC_OUTDR: OUTDR5 (Bit 5)                           */
#define PC_PC_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PC PC_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PC PC_OUTDR: OUTDR4 (Bit 4)                           */
#define PC_PC_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PC PC_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PC PC_OUTDR: OUTDR3 (Bit 3)                           */
#define PC_PC_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PC PC_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PC PC_OUTDR: OUTDR2 (Bit 2)                           */
#define PC_PC_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PC PC_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PC PC_OUTDR: OUTDR1 (Bit 1)                           */
#define PC_PC_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PC PC_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PC PC_OUTDR: OUTDR0 (Bit 0)                           */
#define PC_PC_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PC PC_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PC_BSR  ========================================================= */
#define PC_PC_BSR_BSR11_Pos               (11UL)                    /*!< PC PC_BSR: BSR11 (Bit 11)                             */
#define PC_PC_BSR_BSR11_Msk               (0x800UL)                 /*!< PC PC_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PC_PC_BSR_BSR10_Pos               (10UL)                    /*!< PC PC_BSR: BSR10 (Bit 10)                             */
#define PC_PC_BSR_BSR10_Msk               (0x400UL)                 /*!< PC PC_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PC_PC_BSR_BSR9_Pos                (9UL)                     /*!< PC PC_BSR: BSR9 (Bit 9)                               */
#define PC_PC_BSR_BSR9_Msk                (0x200UL)                 /*!< PC PC_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR8_Pos                (8UL)                     /*!< PC PC_BSR: BSR8 (Bit 8)                               */
#define PC_PC_BSR_BSR8_Msk                (0x100UL)                 /*!< PC PC_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR7_Pos                (7UL)                     /*!< PC PC_BSR: BSR7 (Bit 7)                               */
#define PC_PC_BSR_BSR7_Msk                (0x80UL)                  /*!< PC PC_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR6_Pos                (6UL)                     /*!< PC PC_BSR: BSR6 (Bit 6)                               */
#define PC_PC_BSR_BSR6_Msk                (0x40UL)                  /*!< PC PC_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR5_Pos                (5UL)                     /*!< PC PC_BSR: BSR5 (Bit 5)                               */
#define PC_PC_BSR_BSR5_Msk                (0x20UL)                  /*!< PC PC_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR4_Pos                (4UL)                     /*!< PC PC_BSR: BSR4 (Bit 4)                               */
#define PC_PC_BSR_BSR4_Msk                (0x10UL)                  /*!< PC PC_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR3_Pos                (3UL)                     /*!< PC PC_BSR: BSR3 (Bit 3)                               */
#define PC_PC_BSR_BSR3_Msk                (0x8UL)                   /*!< PC PC_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR2_Pos                (2UL)                     /*!< PC PC_BSR: BSR2 (Bit 2)                               */
#define PC_PC_BSR_BSR2_Msk                (0x4UL)                   /*!< PC PC_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR1_Pos                (1UL)                     /*!< PC PC_BSR: BSR1 (Bit 1)                               */
#define PC_PC_BSR_BSR1_Msk                (0x2UL)                   /*!< PC PC_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR0_Pos                (0UL)                     /*!< PC PC_BSR: BSR0 (Bit 0)                               */
#define PC_PC_BSR_BSR0_Msk                (0x1UL)                   /*!< PC PC_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PC_BCR  ========================================================= */
#define PC_PC_BCR_BCR11_Pos               (11UL)                    /*!< PC PC_BCR: BCR11 (Bit 11)                             */
#define PC_PC_BCR_BCR11_Msk               (0x800UL)                 /*!< PC PC_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PC_PC_BCR_BCR10_Pos               (10UL)                    /*!< PC PC_BCR: BCR10 (Bit 10)                             */
#define PC_PC_BCR_BCR10_Msk               (0x400UL)                 /*!< PC PC_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PC_PC_BCR_BCR9_Pos                (9UL)                     /*!< PC PC_BCR: BCR9 (Bit 9)                               */
#define PC_PC_BCR_BCR9_Msk                (0x200UL)                 /*!< PC PC_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR8_Pos                (8UL)                     /*!< PC PC_BCR: BCR8 (Bit 8)                               */
#define PC_PC_BCR_BCR8_Msk                (0x100UL)                 /*!< PC PC_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR7_Pos                (7UL)                     /*!< PC PC_BCR: BCR7 (Bit 7)                               */
#define PC_PC_BCR_BCR7_Msk                (0x80UL)                  /*!< PC PC_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR6_Pos                (6UL)                     /*!< PC PC_BCR: BCR6 (Bit 6)                               */
#define PC_PC_BCR_BCR6_Msk                (0x40UL)                  /*!< PC PC_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR5_Pos                (5UL)                     /*!< PC PC_BCR: BCR5 (Bit 5)                               */
#define PC_PC_BCR_BCR5_Msk                (0x20UL)                  /*!< PC PC_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR4_Pos                (4UL)                     /*!< PC PC_BCR: BCR4 (Bit 4)                               */
#define PC_PC_BCR_BCR4_Msk                (0x10UL)                  /*!< PC PC_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR3_Pos                (3UL)                     /*!< PC PC_BCR: BCR3 (Bit 3)                               */
#define PC_PC_BCR_BCR3_Msk                (0x8UL)                   /*!< PC PC_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR2_Pos                (2UL)                     /*!< PC PC_BCR: BCR2 (Bit 2)                               */
#define PC_PC_BCR_BCR2_Msk                (0x4UL)                   /*!< PC PC_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR1_Pos                (1UL)                     /*!< PC PC_BCR: BCR1 (Bit 1)                               */
#define PC_PC_BCR_BCR1_Msk                (0x2UL)                   /*!< PC PC_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR0_Pos                (0UL)                     /*!< PC PC_BCR: BCR0 (Bit 0)                               */
#define PC_PC_BCR_BCR0_Msk                (0x1UL)                   /*!< PC PC_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PC_OUTDMSK  ======================================================= */
#define PC_PC_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PC PC_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PC_PC_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PC PC_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PC_PC_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PC PC_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PC_PC_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PC PC_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PC_PC_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PC PC_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PC_PC_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PC PC_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PC PC_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PC_PC_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PC PC_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PC PC_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PC_PC_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PC PC_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PC PC_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PC_PC_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PC PC_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PC PC_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PC_PC_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PC PC_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PC PC_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PC_PC_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PC PC_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PC PC_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PC_PC_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PC PC_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PC PC_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PC_PC_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PC PC_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PC PC_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PC_PC_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PC PC_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PC PC_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PC_PC_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PC PC_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PC_DBCR  ======================================================== */
#define PC_PC_DBCR_DBCLK_Pos              (16UL)                    /*!< PC PC_DBCR: DBCLK (Bit 16)                            */
#define PC_PC_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PC PC_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PC_PC_DBCR_DBEN11_Pos             (11UL)                    /*!< PC PC_DBCR: DBEN11 (Bit 11)                           */
#define PC_PC_DBCR_DBEN11_Msk             (0x800UL)                 /*!< PC PC_DBCR: DBEN11 (Bitfield-Mask: 0x01)              */
#define PC_PC_DBCR_DBEN10_Pos             (10UL)                    /*!< PC PC_DBCR: DBEN10 (Bit 10)                           */
#define PC_PC_DBCR_DBEN10_Msk             (0x400UL)                 /*!< PC PC_DBCR: DBEN10 (Bitfield-Mask: 0x01)              */
#define PC_PC_DBCR_DBEN9_Pos              (9UL)                     /*!< PC PC_DBCR: DBEN9 (Bit 9)                             */
#define PC_PC_DBCR_DBEN9_Msk              (0x200UL)                 /*!< PC PC_DBCR: DBEN9 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN8_Pos              (8UL)                     /*!< PC PC_DBCR: DBEN8 (Bit 8)                             */
#define PC_PC_DBCR_DBEN8_Msk              (0x100UL)                 /*!< PC PC_DBCR: DBEN8 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN7_Pos              (7UL)                     /*!< PC PC_DBCR: DBEN7 (Bit 7)                             */
#define PC_PC_DBCR_DBEN7_Msk              (0x80UL)                  /*!< PC PC_DBCR: DBEN7 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN6_Pos              (6UL)                     /*!< PC PC_DBCR: DBEN6 (Bit 6)                             */
#define PC_PC_DBCR_DBEN6_Msk              (0x40UL)                  /*!< PC PC_DBCR: DBEN6 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN5_Pos              (5UL)                     /*!< PC PC_DBCR: DBEN5 (Bit 5)                             */
#define PC_PC_DBCR_DBEN5_Msk              (0x20UL)                  /*!< PC PC_DBCR: DBEN5 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN4_Pos              (4UL)                     /*!< PC PC_DBCR: DBEN4 (Bit 4)                             */
#define PC_PC_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PC PC_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN3_Pos              (3UL)                     /*!< PC PC_DBCR: DBEN3 (Bit 3)                             */
#define PC_PC_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PC PC_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN2_Pos              (2UL)                     /*!< PC PC_DBCR: DBEN2 (Bit 2)                             */
#define PC_PC_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PC PC_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN1_Pos              (1UL)                     /*!< PC PC_DBCR: DBEN1 (Bit 1)                             */
#define PC_PC_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PC PC_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN0_Pos              (0UL)                     /*!< PC PC_DBCR: DBEN0 (Bit 0)                             */
#define PC_PC_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PC PC_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PD_MOD_MODE12_Pos                 (24UL)                    /*!< PD MOD: MODE12 (Bit 24)                               */
#define PD_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PD MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE11_Pos                 (22UL)                    /*!< PD MOD: MODE11 (Bit 22)                               */
#define PD_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PD MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE10_Pos                 (20UL)                    /*!< PD MOD: MODE10 (Bit 20)                               */
#define PD_MOD_MODE10_Msk                 (0x300000UL)              /*!< PD MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE9_Pos                  (18UL)                    /*!< PD MOD: MODE9 (Bit 18)                                */
#define PD_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PD MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE8_Pos                  (16UL)                    /*!< PD MOD: MODE8 (Bit 16)                                */
#define PD_MOD_MODE8_Msk                  (0x30000UL)               /*!< PD MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE7_Pos                  (14UL)                    /*!< PD MOD: MODE7 (Bit 14)                                */
#define PD_MOD_MODE7_Msk                  (0xc000UL)                /*!< PD MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE6_Pos                  (12UL)                    /*!< PD MOD: MODE6 (Bit 12)                                */
#define PD_MOD_MODE6_Msk                  (0x3000UL)                /*!< PD MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE5_Pos                  (10UL)                    /*!< PD MOD: MODE5 (Bit 10)                                */
#define PD_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PD MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE4_Pos                  (8UL)                     /*!< PD MOD: MODE4 (Bit 8)                                 */
#define PD_MOD_MODE4_Msk                  (0x300UL)                 /*!< PD MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE3_Pos                  (6UL)                     /*!< PD MOD: MODE3 (Bit 6)                                 */
#define PD_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PD MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE2_Pos                  (4UL)                     /*!< PD MOD: MODE2 (Bit 4)                                 */
#define PD_MOD_MODE2_Msk                  (0x30UL)                  /*!< PD MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE1_Pos                  (2UL)                     /*!< PD MOD: MODE1 (Bit 2)                                 */
#define PD_MOD_MODE1_Msk                  (0xcUL)                   /*!< PD MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE0_Pos                  (0UL)                     /*!< PD MOD: MODE0 (Bit 0)                                 */
#define PD_MOD_MODE0_Msk                  (0x3UL)                   /*!< PD MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PD_TYP_TYP12_Pos                  (12UL)                    /*!< PD TYP: TYP12 (Bit 12)                                */
#define PD_TYP_TYP12_Msk                  (0x1000UL)                /*!< PD TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP11_Pos                  (11UL)                    /*!< PD TYP: TYP11 (Bit 11)                                */
#define PD_TYP_TYP11_Msk                  (0x800UL)                 /*!< PD TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP10_Pos                  (10UL)                    /*!< PD TYP: TYP10 (Bit 10)                                */
#define PD_TYP_TYP10_Msk                  (0x400UL)                 /*!< PD TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP9_Pos                   (9UL)                     /*!< PD TYP: TYP9 (Bit 9)                                  */
#define PD_TYP_TYP9_Msk                   (0x200UL)                 /*!< PD TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP8_Pos                   (8UL)                     /*!< PD TYP: TYP8 (Bit 8)                                  */
#define PD_TYP_TYP8_Msk                   (0x100UL)                 /*!< PD TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP7_Pos                   (7UL)                     /*!< PD TYP: TYP7 (Bit 7)                                  */
#define PD_TYP_TYP7_Msk                   (0x80UL)                  /*!< PD TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP6_Pos                   (6UL)                     /*!< PD TYP: TYP6 (Bit 6)                                  */
#define PD_TYP_TYP6_Msk                   (0x40UL)                  /*!< PD TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP5_Pos                   (5UL)                     /*!< PD TYP: TYP5 (Bit 5)                                  */
#define PD_TYP_TYP5_Msk                   (0x20UL)                  /*!< PD TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP4_Pos                   (4UL)                     /*!< PD TYP: TYP4 (Bit 4)                                  */
#define PD_TYP_TYP4_Msk                   (0x10UL)                  /*!< PD TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP3_Pos                   (3UL)                     /*!< PD TYP: TYP3 (Bit 3)                                  */
#define PD_TYP_TYP3_Msk                   (0x8UL)                   /*!< PD TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP2_Pos                   (2UL)                     /*!< PD TYP: TYP2 (Bit 2)                                  */
#define PD_TYP_TYP2_Msk                   (0x4UL)                   /*!< PD TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP1_Pos                   (1UL)                     /*!< PD TYP: TYP1 (Bit 1)                                  */
#define PD_TYP_TYP1_Msk                   (0x2UL)                   /*!< PD TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP0_Pos                   (0UL)                     /*!< PD TYP: TYP0 (Bit 0)                                  */
#define PD_TYP_TYP0_Msk                   (0x1UL)                   /*!< PD TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PD_AFSR1_AFSR7_Pos                (28UL)                    /*!< PD AFSR1: AFSR7 (Bit 28)                              */
#define PD_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PD AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR6_Pos                (24UL)                    /*!< PD AFSR1: AFSR6 (Bit 24)                              */
#define PD_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PD AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR5_Pos                (20UL)                    /*!< PD AFSR1: AFSR5 (Bit 20)                              */
#define PD_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PD AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR4_Pos                (16UL)                    /*!< PD AFSR1: AFSR4 (Bit 16)                              */
#define PD_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PD AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR3_Pos                (12UL)                    /*!< PD AFSR1: AFSR3 (Bit 12)                              */
#define PD_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PD AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR2_Pos                (8UL)                     /*!< PD AFSR1: AFSR2 (Bit 8)                               */
#define PD_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PD AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR1_Pos                (4UL)                     /*!< PD AFSR1: AFSR1 (Bit 4)                               */
#define PD_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PD AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR0_Pos                (0UL)                     /*!< PD AFSR1: AFSR0 (Bit 0)                               */
#define PD_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PD AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PD_AFSR2_AFSR12_Pos               (16UL)                    /*!< PD AFSR2: AFSR12 (Bit 16)                             */
#define PD_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PD AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR11_Pos               (12UL)                    /*!< PD AFSR2: AFSR11 (Bit 12)                             */
#define PD_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PD AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR10_Pos               (8UL)                     /*!< PD AFSR2: AFSR10 (Bit 8)                              */
#define PD_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PD AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR9_Pos                (4UL)                     /*!< PD AFSR2: AFSR9 (Bit 4)                               */
#define PD_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PD AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR2_AFSR8_Pos                (0UL)                     /*!< PD AFSR2: AFSR8 (Bit 0)                               */
#define PD_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PD AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PD_PUPD_PUPD12_Pos                (24UL)                    /*!< PD PUPD: PUPD12 (Bit 24)                              */
#define PD_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PD PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD11_Pos                (22UL)                    /*!< PD PUPD: PUPD11 (Bit 22)                              */
#define PD_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PD PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD10_Pos                (20UL)                    /*!< PD PUPD: PUPD10 (Bit 20)                              */
#define PD_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PD PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD9_Pos                 (18UL)                    /*!< PD PUPD: PUPD9 (Bit 18)                               */
#define PD_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PD PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD8_Pos                 (16UL)                    /*!< PD PUPD: PUPD8 (Bit 16)                               */
#define PD_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PD PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD7_Pos                 (14UL)                    /*!< PD PUPD: PUPD7 (Bit 14)                               */
#define PD_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PD PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD6_Pos                 (12UL)                    /*!< PD PUPD: PUPD6 (Bit 12)                               */
#define PD_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PD PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD5_Pos                 (10UL)                    /*!< PD PUPD: PUPD5 (Bit 10)                               */
#define PD_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PD PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD4_Pos                 (8UL)                     /*!< PD PUPD: PUPD4 (Bit 8)                                */
#define PD_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PD PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD3_Pos                 (6UL)                     /*!< PD PUPD: PUPD3 (Bit 6)                                */
#define PD_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PD PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD2_Pos                 (4UL)                     /*!< PD PUPD: PUPD2 (Bit 4)                                */
#define PD_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PD PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD1_Pos                 (2UL)                     /*!< PD PUPD: PUPD1 (Bit 2)                                */
#define PD_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PD PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD0_Pos                 (0UL)                     /*!< PD PUPD: PUPD0 (Bit 0)                                */
#define PD_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PD PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PD_INDR_INDR12_Pos                (12UL)                    /*!< PD INDR: INDR12 (Bit 12)                              */
#define PD_INDR_INDR12_Msk                (0x1000UL)                /*!< PD INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR11_Pos                (11UL)                    /*!< PD INDR: INDR11 (Bit 11)                              */
#define PD_INDR_INDR11_Msk                (0x800UL)                 /*!< PD INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR10_Pos                (10UL)                    /*!< PD INDR: INDR10 (Bit 10)                              */
#define PD_INDR_INDR10_Msk                (0x400UL)                 /*!< PD INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR9_Pos                 (9UL)                     /*!< PD INDR: INDR9 (Bit 9)                                */
#define PD_INDR_INDR9_Msk                 (0x200UL)                 /*!< PD INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR8_Pos                 (8UL)                     /*!< PD INDR: INDR8 (Bit 8)                                */
#define PD_INDR_INDR8_Msk                 (0x100UL)                 /*!< PD INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR7_Pos                 (7UL)                     /*!< PD INDR: INDR7 (Bit 7)                                */
#define PD_INDR_INDR7_Msk                 (0x80UL)                  /*!< PD INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR6_Pos                 (6UL)                     /*!< PD INDR: INDR6 (Bit 6)                                */
#define PD_INDR_INDR6_Msk                 (0x40UL)                  /*!< PD INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR5_Pos                 (5UL)                     /*!< PD INDR: INDR5 (Bit 5)                                */
#define PD_INDR_INDR5_Msk                 (0x20UL)                  /*!< PD INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR4_Pos                 (4UL)                     /*!< PD INDR: INDR4 (Bit 4)                                */
#define PD_INDR_INDR4_Msk                 (0x10UL)                  /*!< PD INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR3_Pos                 (3UL)                     /*!< PD INDR: INDR3 (Bit 3)                                */
#define PD_INDR_INDR3_Msk                 (0x8UL)                   /*!< PD INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR2_Pos                 (2UL)                     /*!< PD INDR: INDR2 (Bit 2)                                */
#define PD_INDR_INDR2_Msk                 (0x4UL)                   /*!< PD INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR1_Pos                 (1UL)                     /*!< PD INDR: INDR1 (Bit 1)                                */
#define PD_INDR_INDR1_Msk                 (0x2UL)                   /*!< PD INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR0_Pos                 (0UL)                     /*!< PD INDR: INDR0 (Bit 0)                                */
#define PD_INDR_INDR0_Msk                 (0x1UL)                   /*!< PD INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PD_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PD OUTDR: OUTDR12 (Bit 12)                            */
#define PD_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PD OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PD OUTDR: OUTDR11 (Bit 11)                            */
#define PD_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PD OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PD OUTDR: OUTDR10 (Bit 10)                            */
#define PD_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PD OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PD OUTDR: OUTDR9 (Bit 9)                              */
#define PD_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PD OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PD OUTDR: OUTDR8 (Bit 8)                              */
#define PD_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PD OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PD OUTDR: OUTDR7 (Bit 7)                              */
#define PD_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PD OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PD OUTDR: OUTDR6 (Bit 6)                              */
#define PD_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PD OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PD OUTDR: OUTDR5 (Bit 5)                              */
#define PD_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PD OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PD OUTDR: OUTDR4 (Bit 4)                              */
#define PD_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PD OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PD OUTDR: OUTDR3 (Bit 3)                              */
#define PD_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PD OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PD OUTDR: OUTDR2 (Bit 2)                              */
#define PD_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PD OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PD OUTDR: OUTDR1 (Bit 1)                              */
#define PD_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PD OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PD OUTDR: OUTDR0 (Bit 0)                              */
#define PD_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PD OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PD_BSR_BSR12_Pos                  (12UL)                    /*!< PD BSR: BSR12 (Bit 12)                                */
#define PD_BSR_BSR12_Msk                  (0x1000UL)                /*!< PD BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR11_Pos                  (11UL)                    /*!< PD BSR: BSR11 (Bit 11)                                */
#define PD_BSR_BSR11_Msk                  (0x800UL)                 /*!< PD BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR10_Pos                  (10UL)                    /*!< PD BSR: BSR10 (Bit 10)                                */
#define PD_BSR_BSR10_Msk                  (0x400UL)                 /*!< PD BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR9_Pos                   (9UL)                     /*!< PD BSR: BSR9 (Bit 9)                                  */
#define PD_BSR_BSR9_Msk                   (0x200UL)                 /*!< PD BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR8_Pos                   (8UL)                     /*!< PD BSR: BSR8 (Bit 8)                                  */
#define PD_BSR_BSR8_Msk                   (0x100UL)                 /*!< PD BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR7_Pos                   (7UL)                     /*!< PD BSR: BSR7 (Bit 7)                                  */
#define PD_BSR_BSR7_Msk                   (0x80UL)                  /*!< PD BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR6_Pos                   (6UL)                     /*!< PD BSR: BSR6 (Bit 6)                                  */
#define PD_BSR_BSR6_Msk                   (0x40UL)                  /*!< PD BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR5_Pos                   (5UL)                     /*!< PD BSR: BSR5 (Bit 5)                                  */
#define PD_BSR_BSR5_Msk                   (0x20UL)                  /*!< PD BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR4_Pos                   (4UL)                     /*!< PD BSR: BSR4 (Bit 4)                                  */
#define PD_BSR_BSR4_Msk                   (0x10UL)                  /*!< PD BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR3_Pos                   (3UL)                     /*!< PD BSR: BSR3 (Bit 3)                                  */
#define PD_BSR_BSR3_Msk                   (0x8UL)                   /*!< PD BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR2_Pos                   (2UL)                     /*!< PD BSR: BSR2 (Bit 2)                                  */
#define PD_BSR_BSR2_Msk                   (0x4UL)                   /*!< PD BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR1_Pos                   (1UL)                     /*!< PD BSR: BSR1 (Bit 1)                                  */
#define PD_BSR_BSR1_Msk                   (0x2UL)                   /*!< PD BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR0_Pos                   (0UL)                     /*!< PD BSR: BSR0 (Bit 0)                                  */
#define PD_BSR_BSR0_Msk                   (0x1UL)                   /*!< PD BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PD_BCR_BCR12_Pos                  (12UL)                    /*!< PD BCR: BCR12 (Bit 12)                                */
#define PD_BCR_BCR12_Msk                  (0x1000UL)                /*!< PD BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR11_Pos                  (11UL)                    /*!< PD BCR: BCR11 (Bit 11)                                */
#define PD_BCR_BCR11_Msk                  (0x800UL)                 /*!< PD BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR10_Pos                  (10UL)                    /*!< PD BCR: BCR10 (Bit 10)                                */
#define PD_BCR_BCR10_Msk                  (0x400UL)                 /*!< PD BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR9_Pos                   (9UL)                     /*!< PD BCR: BCR9 (Bit 9)                                  */
#define PD_BCR_BCR9_Msk                   (0x200UL)                 /*!< PD BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR8_Pos                   (8UL)                     /*!< PD BCR: BCR8 (Bit 8)                                  */
#define PD_BCR_BCR8_Msk                   (0x100UL)                 /*!< PD BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR7_Pos                   (7UL)                     /*!< PD BCR: BCR7 (Bit 7)                                  */
#define PD_BCR_BCR7_Msk                   (0x80UL)                  /*!< PD BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR6_Pos                   (6UL)                     /*!< PD BCR: BCR6 (Bit 6)                                  */
#define PD_BCR_BCR6_Msk                   (0x40UL)                  /*!< PD BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR5_Pos                   (5UL)                     /*!< PD BCR: BCR5 (Bit 5)                                  */
#define PD_BCR_BCR5_Msk                   (0x20UL)                  /*!< PD BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR4_Pos                   (4UL)                     /*!< PD BCR: BCR4 (Bit 4)                                  */
#define PD_BCR_BCR4_Msk                   (0x10UL)                  /*!< PD BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR3_Pos                   (3UL)                     /*!< PD BCR: BCR3 (Bit 3)                                  */
#define PD_BCR_BCR3_Msk                   (0x8UL)                   /*!< PD BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR2_Pos                   (2UL)                     /*!< PD BCR: BCR2 (Bit 2)                                  */
#define PD_BCR_BCR2_Msk                   (0x4UL)                   /*!< PD BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR1_Pos                   (1UL)                     /*!< PD BCR: BCR1 (Bit 1)                                  */
#define PD_BCR_BCR1_Msk                   (0x2UL)                   /*!< PD BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR0_Pos                   (0UL)                     /*!< PD BCR: BCR0 (Bit 0)                                  */
#define PD_BCR_BCR0_Msk                   (0x1UL)                   /*!< PD BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PD_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PD OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PD_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PD OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PD OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PD_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PD OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PD OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PD_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PD OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PD OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PD_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PD OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PD OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PD_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PD OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PD OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PD_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PD OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PD OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PD_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PD OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PD OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PD_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PD OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PD OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PD_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PD OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PD OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PD_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PD OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PD OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PD_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PD OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PD OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PD_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PD OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PD OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PD_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PD OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PD_DBCR_DBCLK_Pos                 (16UL)                    /*!< PD DBCR: DBCLK (Bit 16)                               */
#define PD_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PD DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PD_DBCR_DBEN12_Pos                (12UL)                    /*!< PD DBCR: DBEN12 (Bit 12)                              */
#define PD_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PD DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PD_DBCR_DBEN11_Pos                (11UL)                    /*!< PD DBCR: DBEN11 (Bit 11)                              */
#define PD_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PD DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PD_DBCR_DBEN10_Pos                (10UL)                    /*!< PD DBCR: DBEN10 (Bit 10)                              */
#define PD_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PD DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PD_DBCR_DBEN9_Pos                 (9UL)                     /*!< PD DBCR: DBEN9 (Bit 9)                                */
#define PD_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PD DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN8_Pos                 (8UL)                     /*!< PD DBCR: DBEN8 (Bit 8)                                */
#define PD_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PD DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN7_Pos                 (7UL)                     /*!< PD DBCR: DBEN7 (Bit 7)                                */
#define PD_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PD DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN6_Pos                 (6UL)                     /*!< PD DBCR: DBEN6 (Bit 6)                                */
#define PD_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PD DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN5_Pos                 (5UL)                     /*!< PD DBCR: DBEN5 (Bit 5)                                */
#define PD_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PD DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN4_Pos                 (4UL)                     /*!< PD DBCR: DBEN4 (Bit 4)                                */
#define PD_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PD DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN3_Pos                 (3UL)                     /*!< PD DBCR: DBEN3 (Bit 3)                                */
#define PD_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PD DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN2_Pos                 (2UL)                     /*!< PD DBCR: DBEN2 (Bit 2)                                */
#define PD_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PD DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN1_Pos                 (1UL)                     /*!< PD DBCR: DBEN1 (Bit 1)                                */
#define PD_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PD DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN0_Pos                 (0UL)                     /*!< PD DBCR: DBEN0 (Bit 0)                                */
#define PD_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PD DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PD_MOD  ========================================================= */
#define PD_PD_MOD_MODE7_Pos               (14UL)                    /*!< PD PD_MOD: MODE7 (Bit 14)                             */
#define PD_PD_MOD_MODE7_Msk               (0xc000UL)                /*!< PD PD_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE6_Pos               (12UL)                    /*!< PD PD_MOD: MODE6 (Bit 12)                             */
#define PD_PD_MOD_MODE6_Msk               (0x3000UL)                /*!< PD PD_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE5_Pos               (10UL)                    /*!< PD PD_MOD: MODE5 (Bit 10)                             */
#define PD_PD_MOD_MODE5_Msk               (0xc00UL)                 /*!< PD PD_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE4_Pos               (8UL)                     /*!< PD PD_MOD: MODE4 (Bit 8)                              */
#define PD_PD_MOD_MODE4_Msk               (0x300UL)                 /*!< PD PD_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE3_Pos               (6UL)                     /*!< PD PD_MOD: MODE3 (Bit 6)                              */
#define PD_PD_MOD_MODE3_Msk               (0xc0UL)                  /*!< PD PD_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE2_Pos               (4UL)                     /*!< PD PD_MOD: MODE2 (Bit 4)                              */
#define PD_PD_MOD_MODE2_Msk               (0x30UL)                  /*!< PD PD_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE1_Pos               (2UL)                     /*!< PD PD_MOD: MODE1 (Bit 2)                              */
#define PD_PD_MOD_MODE1_Msk               (0xcUL)                   /*!< PD PD_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE0_Pos               (0UL)                     /*!< PD PD_MOD: MODE0 (Bit 0)                              */
#define PD_PD_MOD_MODE0_Msk               (0x3UL)                   /*!< PD PD_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PD_TYP  ========================================================= */
#define PD_PD_TYP_TYP7_Pos                (7UL)                     /*!< PD PD_TYP: TYP7 (Bit 7)                               */
#define PD_PD_TYP_TYP7_Msk                (0x80UL)                  /*!< PD PD_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP6_Pos                (6UL)                     /*!< PD PD_TYP: TYP6 (Bit 6)                               */
#define PD_PD_TYP_TYP6_Msk                (0x40UL)                  /*!< PD PD_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP5_Pos                (5UL)                     /*!< PD PD_TYP: TYP5 (Bit 5)                               */
#define PD_PD_TYP_TYP5_Msk                (0x20UL)                  /*!< PD PD_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP4_Pos                (4UL)                     /*!< PD PD_TYP: TYP4 (Bit 4)                               */
#define PD_PD_TYP_TYP4_Msk                (0x10UL)                  /*!< PD PD_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP3_Pos                (3UL)                     /*!< PD PD_TYP: TYP3 (Bit 3)                               */
#define PD_PD_TYP_TYP3_Msk                (0x8UL)                   /*!< PD PD_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP2_Pos                (2UL)                     /*!< PD PD_TYP: TYP2 (Bit 2)                               */
#define PD_PD_TYP_TYP2_Msk                (0x4UL)                   /*!< PD PD_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP1_Pos                (1UL)                     /*!< PD PD_TYP: TYP1 (Bit 1)                               */
#define PD_PD_TYP_TYP1_Msk                (0x2UL)                   /*!< PD PD_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP0_Pos                (0UL)                     /*!< PD PD_TYP: TYP0 (Bit 0)                               */
#define PD_PD_TYP_TYP0_Msk                (0x1UL)                   /*!< PD PD_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PD_AFSR1  ======================================================== */
#define PD_PD_AFSR1_AFSR7_Pos             (28UL)                    /*!< PD PD_AFSR1: AFSR7 (Bit 28)                           */
#define PD_PD_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PD PD_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR6_Pos             (24UL)                    /*!< PD PD_AFSR1: AFSR6 (Bit 24)                           */
#define PD_PD_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PD PD_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR5_Pos             (20UL)                    /*!< PD PD_AFSR1: AFSR5 (Bit 20)                           */
#define PD_PD_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PD PD_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR4_Pos             (16UL)                    /*!< PD PD_AFSR1: AFSR4 (Bit 16)                           */
#define PD_PD_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PD PD_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR3_Pos             (12UL)                    /*!< PD PD_AFSR1: AFSR3 (Bit 12)                           */
#define PD_PD_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PD PD_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR2_Pos             (8UL)                     /*!< PD PD_AFSR1: AFSR2 (Bit 8)                            */
#define PD_PD_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PD PD_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR1_Pos             (4UL)                     /*!< PD PD_AFSR1: AFSR1 (Bit 4)                            */
#define PD_PD_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PD PD_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR0_Pos             (0UL)                     /*!< PD PD_AFSR1: AFSR0 (Bit 0)                            */
#define PD_PD_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PD PD_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PD_AFSR2  ======================================================== */
/* ========================================================  PD_PUPD  ======================================================== */
#define PD_PD_PUPD_PUPD7_Pos              (14UL)                    /*!< PD PD_PUPD: PUPD7 (Bit 14)                            */
#define PD_PD_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PD PD_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD6_Pos              (12UL)                    /*!< PD PD_PUPD: PUPD6 (Bit 12)                            */
#define PD_PD_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PD PD_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD5_Pos              (10UL)                    /*!< PD PD_PUPD: PUPD5 (Bit 10)                            */
#define PD_PD_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PD PD_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD4_Pos              (8UL)                     /*!< PD PD_PUPD: PUPD4 (Bit 8)                             */
#define PD_PD_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PD PD_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD3_Pos              (6UL)                     /*!< PD PD_PUPD: PUPD3 (Bit 6)                             */
#define PD_PD_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PD PD_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD2_Pos              (4UL)                     /*!< PD PD_PUPD: PUPD2 (Bit 4)                             */
#define PD_PD_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PD PD_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD1_Pos              (2UL)                     /*!< PD PD_PUPD: PUPD1 (Bit 2)                             */
#define PD_PD_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PD PD_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD0_Pos              (0UL)                     /*!< PD PD_PUPD: PUPD0 (Bit 0)                             */
#define PD_PD_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PD PD_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PD_INDR  ======================================================== */
#define PD_PD_INDR_INDR7_Pos              (7UL)                     /*!< PD PD_INDR: INDR7 (Bit 7)                             */
#define PD_PD_INDR_INDR7_Msk              (0x80UL)                  /*!< PD PD_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR6_Pos              (6UL)                     /*!< PD PD_INDR: INDR6 (Bit 6)                             */
#define PD_PD_INDR_INDR6_Msk              (0x40UL)                  /*!< PD PD_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR5_Pos              (5UL)                     /*!< PD PD_INDR: INDR5 (Bit 5)                             */
#define PD_PD_INDR_INDR5_Msk              (0x20UL)                  /*!< PD PD_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR4_Pos              (4UL)                     /*!< PD PD_INDR: INDR4 (Bit 4)                             */
#define PD_PD_INDR_INDR4_Msk              (0x10UL)                  /*!< PD PD_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR3_Pos              (3UL)                     /*!< PD PD_INDR: INDR3 (Bit 3)                             */
#define PD_PD_INDR_INDR3_Msk              (0x8UL)                   /*!< PD PD_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR2_Pos              (2UL)                     /*!< PD PD_INDR: INDR2 (Bit 2)                             */
#define PD_PD_INDR_INDR2_Msk              (0x4UL)                   /*!< PD PD_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR1_Pos              (1UL)                     /*!< PD PD_INDR: INDR1 (Bit 1)                             */
#define PD_PD_INDR_INDR1_Msk              (0x2UL)                   /*!< PD PD_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR0_Pos              (0UL)                     /*!< PD PD_INDR: INDR0 (Bit 0)                             */
#define PD_PD_INDR_INDR0_Msk              (0x1UL)                   /*!< PD PD_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PD_OUTDR  ======================================================== */
#define PD_PD_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PD PD_OUTDR: OUTDR7 (Bit 7)                           */
#define PD_PD_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PD PD_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PD PD_OUTDR: OUTDR6 (Bit 6)                           */
#define PD_PD_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PD PD_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PD PD_OUTDR: OUTDR5 (Bit 5)                           */
#define PD_PD_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PD PD_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PD PD_OUTDR: OUTDR4 (Bit 4)                           */
#define PD_PD_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PD PD_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PD PD_OUTDR: OUTDR3 (Bit 3)                           */
#define PD_PD_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PD PD_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PD PD_OUTDR: OUTDR2 (Bit 2)                           */
#define PD_PD_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PD PD_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PD PD_OUTDR: OUTDR1 (Bit 1)                           */
#define PD_PD_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PD PD_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PD PD_OUTDR: OUTDR0 (Bit 0)                           */
#define PD_PD_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PD PD_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PD_BSR  ========================================================= */
#define PD_PD_BSR_BSR7_Pos                (7UL)                     /*!< PD PD_BSR: BSR7 (Bit 7)                               */
#define PD_PD_BSR_BSR7_Msk                (0x80UL)                  /*!< PD PD_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR6_Pos                (6UL)                     /*!< PD PD_BSR: BSR6 (Bit 6)                               */
#define PD_PD_BSR_BSR6_Msk                (0x40UL)                  /*!< PD PD_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR5_Pos                (5UL)                     /*!< PD PD_BSR: BSR5 (Bit 5)                               */
#define PD_PD_BSR_BSR5_Msk                (0x20UL)                  /*!< PD PD_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR4_Pos                (4UL)                     /*!< PD PD_BSR: BSR4 (Bit 4)                               */
#define PD_PD_BSR_BSR4_Msk                (0x10UL)                  /*!< PD PD_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR3_Pos                (3UL)                     /*!< PD PD_BSR: BSR3 (Bit 3)                               */
#define PD_PD_BSR_BSR3_Msk                (0x8UL)                   /*!< PD PD_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR2_Pos                (2UL)                     /*!< PD PD_BSR: BSR2 (Bit 2)                               */
#define PD_PD_BSR_BSR2_Msk                (0x4UL)                   /*!< PD PD_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR1_Pos                (1UL)                     /*!< PD PD_BSR: BSR1 (Bit 1)                               */
#define PD_PD_BSR_BSR1_Msk                (0x2UL)                   /*!< PD PD_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR0_Pos                (0UL)                     /*!< PD PD_BSR: BSR0 (Bit 0)                               */
#define PD_PD_BSR_BSR0_Msk                (0x1UL)                   /*!< PD PD_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PD_BCR  ========================================================= */
#define PD_PD_BCR_BCR7_Pos                (7UL)                     /*!< PD PD_BCR: BCR7 (Bit 7)                               */
#define PD_PD_BCR_BCR7_Msk                (0x80UL)                  /*!< PD PD_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR6_Pos                (6UL)                     /*!< PD PD_BCR: BCR6 (Bit 6)                               */
#define PD_PD_BCR_BCR6_Msk                (0x40UL)                  /*!< PD PD_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR5_Pos                (5UL)                     /*!< PD PD_BCR: BCR5 (Bit 5)                               */
#define PD_PD_BCR_BCR5_Msk                (0x20UL)                  /*!< PD PD_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR4_Pos                (4UL)                     /*!< PD PD_BCR: BCR4 (Bit 4)                               */
#define PD_PD_BCR_BCR4_Msk                (0x10UL)                  /*!< PD PD_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR3_Pos                (3UL)                     /*!< PD PD_BCR: BCR3 (Bit 3)                               */
#define PD_PD_BCR_BCR3_Msk                (0x8UL)                   /*!< PD PD_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR2_Pos                (2UL)                     /*!< PD PD_BCR: BCR2 (Bit 2)                               */
#define PD_PD_BCR_BCR2_Msk                (0x4UL)                   /*!< PD PD_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR1_Pos                (1UL)                     /*!< PD PD_BCR: BCR1 (Bit 1)                               */
#define PD_PD_BCR_BCR1_Msk                (0x2UL)                   /*!< PD PD_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR0_Pos                (0UL)                     /*!< PD PD_BCR: BCR0 (Bit 0)                               */
#define PD_PD_BCR_BCR0_Msk                (0x1UL)                   /*!< PD PD_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PD_OUTDMSK  ======================================================= */
#define PD_PD_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PD PD_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PD_PD_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PD PD_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PD PD_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PD_PD_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PD PD_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PD PD_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PD_PD_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PD PD_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PD PD_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PD_PD_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PD PD_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PD PD_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PD_PD_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PD PD_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PD PD_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PD_PD_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PD PD_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PD PD_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PD_PD_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PD PD_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PD PD_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PD_PD_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PD PD_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PD_DBCR  ======================================================== */
#define PD_PD_DBCR_DBCLK_Pos              (16UL)                    /*!< PD PD_DBCR: DBCLK (Bit 16)                            */
#define PD_PD_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PD PD_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PD_PD_DBCR_DBEN7_Pos              (7UL)                     /*!< PD PD_DBCR: DBEN7 (Bit 7)                             */
#define PD_PD_DBCR_DBEN7_Msk              (0x80UL)                  /*!< PD PD_DBCR: DBEN7 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN6_Pos              (6UL)                     /*!< PD PD_DBCR: DBEN6 (Bit 6)                             */
#define PD_PD_DBCR_DBEN6_Msk              (0x40UL)                  /*!< PD PD_DBCR: DBEN6 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN5_Pos              (5UL)                     /*!< PD PD_DBCR: DBEN5 (Bit 5)                             */
#define PD_PD_DBCR_DBEN5_Msk              (0x20UL)                  /*!< PD PD_DBCR: DBEN5 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN4_Pos              (4UL)                     /*!< PD PD_DBCR: DBEN4 (Bit 4)                             */
#define PD_PD_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PD PD_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN3_Pos              (3UL)                     /*!< PD PD_DBCR: DBEN3 (Bit 3)                             */
#define PD_PD_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PD PD_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN2_Pos              (2UL)                     /*!< PD PD_DBCR: DBEN2 (Bit 2)                             */
#define PD_PD_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PD PD_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN1_Pos              (1UL)                     /*!< PD PD_DBCR: DBEN1 (Bit 1)                             */
#define PD_PD_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PD PD_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PD_PD_DBCR_DBEN0_Pos              (0UL)                     /*!< PD PD_DBCR: DBEN0 (Bit 0)                             */
#define PD_PD_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PD PD_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PE_MOD_MODE12_Pos                 (24UL)                    /*!< PE MOD: MODE12 (Bit 24)                               */
#define PE_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PE MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE11_Pos                 (22UL)                    /*!< PE MOD: MODE11 (Bit 22)                               */
#define PE_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PE MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE10_Pos                 (20UL)                    /*!< PE MOD: MODE10 (Bit 20)                               */
#define PE_MOD_MODE10_Msk                 (0x300000UL)              /*!< PE MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE9_Pos                  (18UL)                    /*!< PE MOD: MODE9 (Bit 18)                                */
#define PE_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PE MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE8_Pos                  (16UL)                    /*!< PE MOD: MODE8 (Bit 16)                                */
#define PE_MOD_MODE8_Msk                  (0x30000UL)               /*!< PE MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE7_Pos                  (14UL)                    /*!< PE MOD: MODE7 (Bit 14)                                */
#define PE_MOD_MODE7_Msk                  (0xc000UL)                /*!< PE MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE6_Pos                  (12UL)                    /*!< PE MOD: MODE6 (Bit 12)                                */
#define PE_MOD_MODE6_Msk                  (0x3000UL)                /*!< PE MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE5_Pos                  (10UL)                    /*!< PE MOD: MODE5 (Bit 10)                                */
#define PE_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PE MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE4_Pos                  (8UL)                     /*!< PE MOD: MODE4 (Bit 8)                                 */
#define PE_MOD_MODE4_Msk                  (0x300UL)                 /*!< PE MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE3_Pos                  (6UL)                     /*!< PE MOD: MODE3 (Bit 6)                                 */
#define PE_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PE MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE2_Pos                  (4UL)                     /*!< PE MOD: MODE2 (Bit 4)                                 */
#define PE_MOD_MODE2_Msk                  (0x30UL)                  /*!< PE MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE1_Pos                  (2UL)                     /*!< PE MOD: MODE1 (Bit 2)                                 */
#define PE_MOD_MODE1_Msk                  (0xcUL)                   /*!< PE MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE0_Pos                  (0UL)                     /*!< PE MOD: MODE0 (Bit 0)                                 */
#define PE_MOD_MODE0_Msk                  (0x3UL)                   /*!< PE MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PE_TYP_TYP12_Pos                  (12UL)                    /*!< PE TYP: TYP12 (Bit 12)                                */
#define PE_TYP_TYP12_Msk                  (0x1000UL)                /*!< PE TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP11_Pos                  (11UL)                    /*!< PE TYP: TYP11 (Bit 11)                                */
#define PE_TYP_TYP11_Msk                  (0x800UL)                 /*!< PE TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP10_Pos                  (10UL)                    /*!< PE TYP: TYP10 (Bit 10)                                */
#define PE_TYP_TYP10_Msk                  (0x400UL)                 /*!< PE TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP9_Pos                   (9UL)                     /*!< PE TYP: TYP9 (Bit 9)                                  */
#define PE_TYP_TYP9_Msk                   (0x200UL)                 /*!< PE TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP8_Pos                   (8UL)                     /*!< PE TYP: TYP8 (Bit 8)                                  */
#define PE_TYP_TYP8_Msk                   (0x100UL)                 /*!< PE TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP7_Pos                   (7UL)                     /*!< PE TYP: TYP7 (Bit 7)                                  */
#define PE_TYP_TYP7_Msk                   (0x80UL)                  /*!< PE TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP6_Pos                   (6UL)                     /*!< PE TYP: TYP6 (Bit 6)                                  */
#define PE_TYP_TYP6_Msk                   (0x40UL)                  /*!< PE TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP5_Pos                   (5UL)                     /*!< PE TYP: TYP5 (Bit 5)                                  */
#define PE_TYP_TYP5_Msk                   (0x20UL)                  /*!< PE TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP4_Pos                   (4UL)                     /*!< PE TYP: TYP4 (Bit 4)                                  */
#define PE_TYP_TYP4_Msk                   (0x10UL)                  /*!< PE TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP3_Pos                   (3UL)                     /*!< PE TYP: TYP3 (Bit 3)                                  */
#define PE_TYP_TYP3_Msk                   (0x8UL)                   /*!< PE TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP2_Pos                   (2UL)                     /*!< PE TYP: TYP2 (Bit 2)                                  */
#define PE_TYP_TYP2_Msk                   (0x4UL)                   /*!< PE TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP1_Pos                   (1UL)                     /*!< PE TYP: TYP1 (Bit 1)                                  */
#define PE_TYP_TYP1_Msk                   (0x2UL)                   /*!< PE TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP0_Pos                   (0UL)                     /*!< PE TYP: TYP0 (Bit 0)                                  */
#define PE_TYP_TYP0_Msk                   (0x1UL)                   /*!< PE TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PE_AFSR1_AFSR7_Pos                (28UL)                    /*!< PE AFSR1: AFSR7 (Bit 28)                              */
#define PE_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PE AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR6_Pos                (24UL)                    /*!< PE AFSR1: AFSR6 (Bit 24)                              */
#define PE_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PE AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR5_Pos                (20UL)                    /*!< PE AFSR1: AFSR5 (Bit 20)                              */
#define PE_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PE AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR4_Pos                (16UL)                    /*!< PE AFSR1: AFSR4 (Bit 16)                              */
#define PE_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PE AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR3_Pos                (12UL)                    /*!< PE AFSR1: AFSR3 (Bit 12)                              */
#define PE_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PE AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR2_Pos                (8UL)                     /*!< PE AFSR1: AFSR2 (Bit 8)                               */
#define PE_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PE AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR1_Pos                (4UL)                     /*!< PE AFSR1: AFSR1 (Bit 4)                               */
#define PE_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PE AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR0_Pos                (0UL)                     /*!< PE AFSR1: AFSR0 (Bit 0)                               */
#define PE_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PE AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PE_AFSR2_AFSR12_Pos               (16UL)                    /*!< PE AFSR2: AFSR12 (Bit 16)                             */
#define PE_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PE AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR11_Pos               (12UL)                    /*!< PE AFSR2: AFSR11 (Bit 12)                             */
#define PE_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PE AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR10_Pos               (8UL)                     /*!< PE AFSR2: AFSR10 (Bit 8)                              */
#define PE_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PE AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR9_Pos                (4UL)                     /*!< PE AFSR2: AFSR9 (Bit 4)                               */
#define PE_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PE AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR2_AFSR8_Pos                (0UL)                     /*!< PE AFSR2: AFSR8 (Bit 0)                               */
#define PE_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PE AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PE_PUPD_PUPD12_Pos                (24UL)                    /*!< PE PUPD: PUPD12 (Bit 24)                              */
#define PE_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PE PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD11_Pos                (22UL)                    /*!< PE PUPD: PUPD11 (Bit 22)                              */
#define PE_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PE PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD10_Pos                (20UL)                    /*!< PE PUPD: PUPD10 (Bit 20)                              */
#define PE_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PE PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD9_Pos                 (18UL)                    /*!< PE PUPD: PUPD9 (Bit 18)                               */
#define PE_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PE PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD8_Pos                 (16UL)                    /*!< PE PUPD: PUPD8 (Bit 16)                               */
#define PE_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PE PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD7_Pos                 (14UL)                    /*!< PE PUPD: PUPD7 (Bit 14)                               */
#define PE_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PE PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD6_Pos                 (12UL)                    /*!< PE PUPD: PUPD6 (Bit 12)                               */
#define PE_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PE PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD5_Pos                 (10UL)                    /*!< PE PUPD: PUPD5 (Bit 10)                               */
#define PE_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PE PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD4_Pos                 (8UL)                     /*!< PE PUPD: PUPD4 (Bit 8)                                */
#define PE_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PE PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD3_Pos                 (6UL)                     /*!< PE PUPD: PUPD3 (Bit 6)                                */
#define PE_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PE PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD2_Pos                 (4UL)                     /*!< PE PUPD: PUPD2 (Bit 4)                                */
#define PE_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PE PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD1_Pos                 (2UL)                     /*!< PE PUPD: PUPD1 (Bit 2)                                */
#define PE_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PE PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD0_Pos                 (0UL)                     /*!< PE PUPD: PUPD0 (Bit 0)                                */
#define PE_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PE PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PE_INDR_INDR12_Pos                (12UL)                    /*!< PE INDR: INDR12 (Bit 12)                              */
#define PE_INDR_INDR12_Msk                (0x1000UL)                /*!< PE INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR11_Pos                (11UL)                    /*!< PE INDR: INDR11 (Bit 11)                              */
#define PE_INDR_INDR11_Msk                (0x800UL)                 /*!< PE INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR10_Pos                (10UL)                    /*!< PE INDR: INDR10 (Bit 10)                              */
#define PE_INDR_INDR10_Msk                (0x400UL)                 /*!< PE INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR9_Pos                 (9UL)                     /*!< PE INDR: INDR9 (Bit 9)                                */
#define PE_INDR_INDR9_Msk                 (0x200UL)                 /*!< PE INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR8_Pos                 (8UL)                     /*!< PE INDR: INDR8 (Bit 8)                                */
#define PE_INDR_INDR8_Msk                 (0x100UL)                 /*!< PE INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR7_Pos                 (7UL)                     /*!< PE INDR: INDR7 (Bit 7)                                */
#define PE_INDR_INDR7_Msk                 (0x80UL)                  /*!< PE INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR6_Pos                 (6UL)                     /*!< PE INDR: INDR6 (Bit 6)                                */
#define PE_INDR_INDR6_Msk                 (0x40UL)                  /*!< PE INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR5_Pos                 (5UL)                     /*!< PE INDR: INDR5 (Bit 5)                                */
#define PE_INDR_INDR5_Msk                 (0x20UL)                  /*!< PE INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR4_Pos                 (4UL)                     /*!< PE INDR: INDR4 (Bit 4)                                */
#define PE_INDR_INDR4_Msk                 (0x10UL)                  /*!< PE INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR3_Pos                 (3UL)                     /*!< PE INDR: INDR3 (Bit 3)                                */
#define PE_INDR_INDR3_Msk                 (0x8UL)                   /*!< PE INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR2_Pos                 (2UL)                     /*!< PE INDR: INDR2 (Bit 2)                                */
#define PE_INDR_INDR2_Msk                 (0x4UL)                   /*!< PE INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR1_Pos                 (1UL)                     /*!< PE INDR: INDR1 (Bit 1)                                */
#define PE_INDR_INDR1_Msk                 (0x2UL)                   /*!< PE INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR0_Pos                 (0UL)                     /*!< PE INDR: INDR0 (Bit 0)                                */
#define PE_INDR_INDR0_Msk                 (0x1UL)                   /*!< PE INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PE_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PE OUTDR: OUTDR12 (Bit 12)                            */
#define PE_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PE OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PE OUTDR: OUTDR11 (Bit 11)                            */
#define PE_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PE OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PE OUTDR: OUTDR10 (Bit 10)                            */
#define PE_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PE OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PE OUTDR: OUTDR9 (Bit 9)                              */
#define PE_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PE OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PE OUTDR: OUTDR8 (Bit 8)                              */
#define PE_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PE OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PE OUTDR: OUTDR7 (Bit 7)                              */
#define PE_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PE OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PE OUTDR: OUTDR6 (Bit 6)                              */
#define PE_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PE OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PE OUTDR: OUTDR5 (Bit 5)                              */
#define PE_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PE OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PE OUTDR: OUTDR4 (Bit 4)                              */
#define PE_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PE OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PE OUTDR: OUTDR3 (Bit 3)                              */
#define PE_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PE OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PE OUTDR: OUTDR2 (Bit 2)                              */
#define PE_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PE OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PE OUTDR: OUTDR1 (Bit 1)                              */
#define PE_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PE OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PE OUTDR: OUTDR0 (Bit 0)                              */
#define PE_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PE OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PE_BSR_BSR12_Pos                  (12UL)                    /*!< PE BSR: BSR12 (Bit 12)                                */
#define PE_BSR_BSR12_Msk                  (0x1000UL)                /*!< PE BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR11_Pos                  (11UL)                    /*!< PE BSR: BSR11 (Bit 11)                                */
#define PE_BSR_BSR11_Msk                  (0x800UL)                 /*!< PE BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR10_Pos                  (10UL)                    /*!< PE BSR: BSR10 (Bit 10)                                */
#define PE_BSR_BSR10_Msk                  (0x400UL)                 /*!< PE BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR9_Pos                   (9UL)                     /*!< PE BSR: BSR9 (Bit 9)                                  */
#define PE_BSR_BSR9_Msk                   (0x200UL)                 /*!< PE BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR8_Pos                   (8UL)                     /*!< PE BSR: BSR8 (Bit 8)                                  */
#define PE_BSR_BSR8_Msk                   (0x100UL)                 /*!< PE BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR7_Pos                   (7UL)                     /*!< PE BSR: BSR7 (Bit 7)                                  */
#define PE_BSR_BSR7_Msk                   (0x80UL)                  /*!< PE BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR6_Pos                   (6UL)                     /*!< PE BSR: BSR6 (Bit 6)                                  */
#define PE_BSR_BSR6_Msk                   (0x40UL)                  /*!< PE BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR5_Pos                   (5UL)                     /*!< PE BSR: BSR5 (Bit 5)                                  */
#define PE_BSR_BSR5_Msk                   (0x20UL)                  /*!< PE BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR4_Pos                   (4UL)                     /*!< PE BSR: BSR4 (Bit 4)                                  */
#define PE_BSR_BSR4_Msk                   (0x10UL)                  /*!< PE BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR3_Pos                   (3UL)                     /*!< PE BSR: BSR3 (Bit 3)                                  */
#define PE_BSR_BSR3_Msk                   (0x8UL)                   /*!< PE BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR2_Pos                   (2UL)                     /*!< PE BSR: BSR2 (Bit 2)                                  */
#define PE_BSR_BSR2_Msk                   (0x4UL)                   /*!< PE BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR1_Pos                   (1UL)                     /*!< PE BSR: BSR1 (Bit 1)                                  */
#define PE_BSR_BSR1_Msk                   (0x2UL)                   /*!< PE BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR0_Pos                   (0UL)                     /*!< PE BSR: BSR0 (Bit 0)                                  */
#define PE_BSR_BSR0_Msk                   (0x1UL)                   /*!< PE BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PE_BCR_BCR12_Pos                  (12UL)                    /*!< PE BCR: BCR12 (Bit 12)                                */
#define PE_BCR_BCR12_Msk                  (0x1000UL)                /*!< PE BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR11_Pos                  (11UL)                    /*!< PE BCR: BCR11 (Bit 11)                                */
#define PE_BCR_BCR11_Msk                  (0x800UL)                 /*!< PE BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR10_Pos                  (10UL)                    /*!< PE BCR: BCR10 (Bit 10)                                */
#define PE_BCR_BCR10_Msk                  (0x400UL)                 /*!< PE BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR9_Pos                   (9UL)                     /*!< PE BCR: BCR9 (Bit 9)                                  */
#define PE_BCR_BCR9_Msk                   (0x200UL)                 /*!< PE BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR8_Pos                   (8UL)                     /*!< PE BCR: BCR8 (Bit 8)                                  */
#define PE_BCR_BCR8_Msk                   (0x100UL)                 /*!< PE BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR7_Pos                   (7UL)                     /*!< PE BCR: BCR7 (Bit 7)                                  */
#define PE_BCR_BCR7_Msk                   (0x80UL)                  /*!< PE BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR6_Pos                   (6UL)                     /*!< PE BCR: BCR6 (Bit 6)                                  */
#define PE_BCR_BCR6_Msk                   (0x40UL)                  /*!< PE BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR5_Pos                   (5UL)                     /*!< PE BCR: BCR5 (Bit 5)                                  */
#define PE_BCR_BCR5_Msk                   (0x20UL)                  /*!< PE BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR4_Pos                   (4UL)                     /*!< PE BCR: BCR4 (Bit 4)                                  */
#define PE_BCR_BCR4_Msk                   (0x10UL)                  /*!< PE BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR3_Pos                   (3UL)                     /*!< PE BCR: BCR3 (Bit 3)                                  */
#define PE_BCR_BCR3_Msk                   (0x8UL)                   /*!< PE BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR2_Pos                   (2UL)                     /*!< PE BCR: BCR2 (Bit 2)                                  */
#define PE_BCR_BCR2_Msk                   (0x4UL)                   /*!< PE BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR1_Pos                   (1UL)                     /*!< PE BCR: BCR1 (Bit 1)                                  */
#define PE_BCR_BCR1_Msk                   (0x2UL)                   /*!< PE BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR0_Pos                   (0UL)                     /*!< PE BCR: BCR0 (Bit 0)                                  */
#define PE_BCR_BCR0_Msk                   (0x1UL)                   /*!< PE BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PE_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PE OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PE_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PE OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PE OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PE_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PE OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PE OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PE_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PE OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PE OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PE_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PE OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PE OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PE_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PE OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PE OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PE_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PE OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PE OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PE_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PE OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PE OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PE_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PE OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PE OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PE_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PE OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PE OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PE_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PE OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PE OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PE_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PE OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PE OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PE_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PE OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PE OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PE_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PE OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PE_DBCR_DBCLK_Pos                 (16UL)                    /*!< PE DBCR: DBCLK (Bit 16)                               */
#define PE_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PE DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PE_DBCR_DBEN12_Pos                (12UL)                    /*!< PE DBCR: DBEN12 (Bit 12)                              */
#define PE_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PE DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PE_DBCR_DBEN11_Pos                (11UL)                    /*!< PE DBCR: DBEN11 (Bit 11)                              */
#define PE_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PE DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PE_DBCR_DBEN10_Pos                (10UL)                    /*!< PE DBCR: DBEN10 (Bit 10)                              */
#define PE_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PE DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PE_DBCR_DBEN9_Pos                 (9UL)                     /*!< PE DBCR: DBEN9 (Bit 9)                                */
#define PE_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PE DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN8_Pos                 (8UL)                     /*!< PE DBCR: DBEN8 (Bit 8)                                */
#define PE_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PE DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN7_Pos                 (7UL)                     /*!< PE DBCR: DBEN7 (Bit 7)                                */
#define PE_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PE DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN6_Pos                 (6UL)                     /*!< PE DBCR: DBEN6 (Bit 6)                                */
#define PE_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PE DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN5_Pos                 (5UL)                     /*!< PE DBCR: DBEN5 (Bit 5)                                */
#define PE_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PE DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN4_Pos                 (4UL)                     /*!< PE DBCR: DBEN4 (Bit 4)                                */
#define PE_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PE DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN3_Pos                 (3UL)                     /*!< PE DBCR: DBEN3 (Bit 3)                                */
#define PE_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PE DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN2_Pos                 (2UL)                     /*!< PE DBCR: DBEN2 (Bit 2)                                */
#define PE_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PE DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN1_Pos                 (1UL)                     /*!< PE DBCR: DBEN1 (Bit 1)                                */
#define PE_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PE DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN0_Pos                 (0UL)                     /*!< PE DBCR: DBEN0 (Bit 0)                                */
#define PE_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PE DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PE_MOD  ========================================================= */
#define PE_PE_MOD_MODE4_Pos               (8UL)                     /*!< PE PE_MOD: MODE4 (Bit 8)                              */
#define PE_PE_MOD_MODE4_Msk               (0x300UL)                 /*!< PE PE_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE3_Pos               (6UL)                     /*!< PE PE_MOD: MODE3 (Bit 6)                              */
#define PE_PE_MOD_MODE3_Msk               (0xc0UL)                  /*!< PE PE_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE2_Pos               (4UL)                     /*!< PE PE_MOD: MODE2 (Bit 4)                              */
#define PE_PE_MOD_MODE2_Msk               (0x30UL)                  /*!< PE PE_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE1_Pos               (2UL)                     /*!< PE PE_MOD: MODE1 (Bit 2)                              */
#define PE_PE_MOD_MODE1_Msk               (0xcUL)                   /*!< PE PE_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE0_Pos               (0UL)                     /*!< PE PE_MOD: MODE0 (Bit 0)                              */
#define PE_PE_MOD_MODE0_Msk               (0x3UL)                   /*!< PE PE_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PE_TYP  ========================================================= */
#define PE_PE_TYP_TYP4_Pos                (4UL)                     /*!< PE PE_TYP: TYP4 (Bit 4)                               */
#define PE_PE_TYP_TYP4_Msk                (0x10UL)                  /*!< PE PE_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP3_Pos                (3UL)                     /*!< PE PE_TYP: TYP3 (Bit 3)                               */
#define PE_PE_TYP_TYP3_Msk                (0x8UL)                   /*!< PE PE_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP2_Pos                (2UL)                     /*!< PE PE_TYP: TYP2 (Bit 2)                               */
#define PE_PE_TYP_TYP2_Msk                (0x4UL)                   /*!< PE PE_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP1_Pos                (1UL)                     /*!< PE PE_TYP: TYP1 (Bit 1)                               */
#define PE_PE_TYP_TYP1_Msk                (0x2UL)                   /*!< PE PE_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP0_Pos                (0UL)                     /*!< PE PE_TYP: TYP0 (Bit 0)                               */
#define PE_PE_TYP_TYP0_Msk                (0x1UL)                   /*!< PE PE_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PE_AFSR1  ======================================================== */
#define PE_PE_AFSR1_AFSR4_Pos             (16UL)                    /*!< PE PE_AFSR1: AFSR4 (Bit 16)                           */
#define PE_PE_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PE PE_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR3_Pos             (12UL)                    /*!< PE PE_AFSR1: AFSR3 (Bit 12)                           */
#define PE_PE_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PE PE_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR2_Pos             (8UL)                     /*!< PE PE_AFSR1: AFSR2 (Bit 8)                            */
#define PE_PE_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PE PE_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR1_Pos             (4UL)                     /*!< PE PE_AFSR1: AFSR1 (Bit 4)                            */
#define PE_PE_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PE PE_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR0_Pos             (0UL)                     /*!< PE PE_AFSR1: AFSR0 (Bit 0)                            */
#define PE_PE_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PE PE_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PE_AFSR2  ======================================================== */
/* ========================================================  PE_PUPD  ======================================================== */
#define PE_PE_PUPD_PUPD4_Pos              (8UL)                     /*!< PE PE_PUPD: PUPD4 (Bit 8)                             */
#define PE_PE_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PE PE_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD3_Pos              (6UL)                     /*!< PE PE_PUPD: PUPD3 (Bit 6)                             */
#define PE_PE_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PE PE_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD2_Pos              (4UL)                     /*!< PE PE_PUPD: PUPD2 (Bit 4)                             */
#define PE_PE_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PE PE_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD1_Pos              (2UL)                     /*!< PE PE_PUPD: PUPD1 (Bit 2)                             */
#define PE_PE_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PE PE_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD0_Pos              (0UL)                     /*!< PE PE_PUPD: PUPD0 (Bit 0)                             */
#define PE_PE_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PE PE_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PE_INDR  ======================================================== */
#define PE_PE_INDR_INDR4_Pos              (4UL)                     /*!< PE PE_INDR: INDR4 (Bit 4)                             */
#define PE_PE_INDR_INDR4_Msk              (0x10UL)                  /*!< PE PE_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR3_Pos              (3UL)                     /*!< PE PE_INDR: INDR3 (Bit 3)                             */
#define PE_PE_INDR_INDR3_Msk              (0x8UL)                   /*!< PE PE_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR2_Pos              (2UL)                     /*!< PE PE_INDR: INDR2 (Bit 2)                             */
#define PE_PE_INDR_INDR2_Msk              (0x4UL)                   /*!< PE PE_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR1_Pos              (1UL)                     /*!< PE PE_INDR: INDR1 (Bit 1)                             */
#define PE_PE_INDR_INDR1_Msk              (0x2UL)                   /*!< PE PE_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR0_Pos              (0UL)                     /*!< PE PE_INDR: INDR0 (Bit 0)                             */
#define PE_PE_INDR_INDR0_Msk              (0x1UL)                   /*!< PE PE_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PE_OUTDR  ======================================================== */
#define PE_PE_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PE PE_OUTDR: OUTDR4 (Bit 4)                           */
#define PE_PE_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PE PE_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PE PE_OUTDR: OUTDR3 (Bit 3)                           */
#define PE_PE_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PE PE_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PE PE_OUTDR: OUTDR2 (Bit 2)                           */
#define PE_PE_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PE PE_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PE PE_OUTDR: OUTDR1 (Bit 1)                           */
#define PE_PE_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PE PE_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PE PE_OUTDR: OUTDR0 (Bit 0)                           */
#define PE_PE_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PE PE_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PE_BSR  ========================================================= */
#define PE_PE_BSR_BSR4_Pos                (4UL)                     /*!< PE PE_BSR: BSR4 (Bit 4)                               */
#define PE_PE_BSR_BSR4_Msk                (0x10UL)                  /*!< PE PE_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR3_Pos                (3UL)                     /*!< PE PE_BSR: BSR3 (Bit 3)                               */
#define PE_PE_BSR_BSR3_Msk                (0x8UL)                   /*!< PE PE_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR2_Pos                (2UL)                     /*!< PE PE_BSR: BSR2 (Bit 2)                               */
#define PE_PE_BSR_BSR2_Msk                (0x4UL)                   /*!< PE PE_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR1_Pos                (1UL)                     /*!< PE PE_BSR: BSR1 (Bit 1)                               */
#define PE_PE_BSR_BSR1_Msk                (0x2UL)                   /*!< PE PE_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR0_Pos                (0UL)                     /*!< PE PE_BSR: BSR0 (Bit 0)                               */
#define PE_PE_BSR_BSR0_Msk                (0x1UL)                   /*!< PE PE_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PE_BCR  ========================================================= */
#define PE_PE_BCR_BCR4_Pos                (4UL)                     /*!< PE PE_BCR: BCR4 (Bit 4)                               */
#define PE_PE_BCR_BCR4_Msk                (0x10UL)                  /*!< PE PE_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR3_Pos                (3UL)                     /*!< PE PE_BCR: BCR3 (Bit 3)                               */
#define PE_PE_BCR_BCR3_Msk                (0x8UL)                   /*!< PE PE_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR2_Pos                (2UL)                     /*!< PE PE_BCR: BCR2 (Bit 2)                               */
#define PE_PE_BCR_BCR2_Msk                (0x4UL)                   /*!< PE PE_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR1_Pos                (1UL)                     /*!< PE PE_BCR: BCR1 (Bit 1)                               */
#define PE_PE_BCR_BCR1_Msk                (0x2UL)                   /*!< PE PE_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR0_Pos                (0UL)                     /*!< PE PE_BCR: BCR0 (Bit 0)                               */
#define PE_PE_BCR_BCR0_Msk                (0x1UL)                   /*!< PE PE_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PE_OUTDMSK  ======================================================= */
#define PE_PE_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PE PE_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PE_PE_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PE PE_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PE PE_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PE_PE_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PE PE_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PE PE_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PE_PE_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PE PE_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PE PE_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PE_PE_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PE PE_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PE PE_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PE_PE_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PE PE_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PE_DBCR  ======================================================== */
#define PE_PE_DBCR_DBCLK_Pos              (16UL)                    /*!< PE PE_DBCR: DBCLK (Bit 16)                            */
#define PE_PE_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PE PE_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PE_PE_DBCR_DBEN4_Pos              (4UL)                     /*!< PE PE_DBCR: DBEN4 (Bit 4)                             */
#define PE_PE_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PE PE_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN3_Pos              (3UL)                     /*!< PE PE_DBCR: DBEN3 (Bit 3)                             */
#define PE_PE_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PE PE_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN2_Pos              (2UL)                     /*!< PE PE_DBCR: DBEN2 (Bit 2)                             */
#define PE_PE_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PE PE_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN1_Pos              (1UL)                     /*!< PE PE_DBCR: DBEN1 (Bit 1)                             */
#define PE_PE_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PE PE_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN0_Pos              (0UL)                     /*!< PE PE_DBCR: DBEN0 (Bit 0)                             */
#define PE_PE_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PE PE_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PF_MOD_MODE12_Pos                 (24UL)                    /*!< PF MOD: MODE12 (Bit 24)                               */
#define PF_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PF MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE11_Pos                 (22UL)                    /*!< PF MOD: MODE11 (Bit 22)                               */
#define PF_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PF MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE10_Pos                 (20UL)                    /*!< PF MOD: MODE10 (Bit 20)                               */
#define PF_MOD_MODE10_Msk                 (0x300000UL)              /*!< PF MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE9_Pos                  (18UL)                    /*!< PF MOD: MODE9 (Bit 18)                                */
#define PF_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PF MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE8_Pos                  (16UL)                    /*!< PF MOD: MODE8 (Bit 16)                                */
#define PF_MOD_MODE8_Msk                  (0x30000UL)               /*!< PF MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE7_Pos                  (14UL)                    /*!< PF MOD: MODE7 (Bit 14)                                */
#define PF_MOD_MODE7_Msk                  (0xc000UL)                /*!< PF MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE6_Pos                  (12UL)                    /*!< PF MOD: MODE6 (Bit 12)                                */
#define PF_MOD_MODE6_Msk                  (0x3000UL)                /*!< PF MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE5_Pos                  (10UL)                    /*!< PF MOD: MODE5 (Bit 10)                                */
#define PF_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PF MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE4_Pos                  (8UL)                     /*!< PF MOD: MODE4 (Bit 8)                                 */
#define PF_MOD_MODE4_Msk                  (0x300UL)                 /*!< PF MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE3_Pos                  (6UL)                     /*!< PF MOD: MODE3 (Bit 6)                                 */
#define PF_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PF MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE2_Pos                  (4UL)                     /*!< PF MOD: MODE2 (Bit 4)                                 */
#define PF_MOD_MODE2_Msk                  (0x30UL)                  /*!< PF MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE1_Pos                  (2UL)                     /*!< PF MOD: MODE1 (Bit 2)                                 */
#define PF_MOD_MODE1_Msk                  (0xcUL)                   /*!< PF MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE0_Pos                  (0UL)                     /*!< PF MOD: MODE0 (Bit 0)                                 */
#define PF_MOD_MODE0_Msk                  (0x3UL)                   /*!< PF MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PF_TYP_TYP12_Pos                  (12UL)                    /*!< PF TYP: TYP12 (Bit 12)                                */
#define PF_TYP_TYP12_Msk                  (0x1000UL)                /*!< PF TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP11_Pos                  (11UL)                    /*!< PF TYP: TYP11 (Bit 11)                                */
#define PF_TYP_TYP11_Msk                  (0x800UL)                 /*!< PF TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP10_Pos                  (10UL)                    /*!< PF TYP: TYP10 (Bit 10)                                */
#define PF_TYP_TYP10_Msk                  (0x400UL)                 /*!< PF TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP9_Pos                   (9UL)                     /*!< PF TYP: TYP9 (Bit 9)                                  */
#define PF_TYP_TYP9_Msk                   (0x200UL)                 /*!< PF TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP8_Pos                   (8UL)                     /*!< PF TYP: TYP8 (Bit 8)                                  */
#define PF_TYP_TYP8_Msk                   (0x100UL)                 /*!< PF TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP7_Pos                   (7UL)                     /*!< PF TYP: TYP7 (Bit 7)                                  */
#define PF_TYP_TYP7_Msk                   (0x80UL)                  /*!< PF TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP6_Pos                   (6UL)                     /*!< PF TYP: TYP6 (Bit 6)                                  */
#define PF_TYP_TYP6_Msk                   (0x40UL)                  /*!< PF TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP5_Pos                   (5UL)                     /*!< PF TYP: TYP5 (Bit 5)                                  */
#define PF_TYP_TYP5_Msk                   (0x20UL)                  /*!< PF TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP4_Pos                   (4UL)                     /*!< PF TYP: TYP4 (Bit 4)                                  */
#define PF_TYP_TYP4_Msk                   (0x10UL)                  /*!< PF TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP3_Pos                   (3UL)                     /*!< PF TYP: TYP3 (Bit 3)                                  */
#define PF_TYP_TYP3_Msk                   (0x8UL)                   /*!< PF TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP2_Pos                   (2UL)                     /*!< PF TYP: TYP2 (Bit 2)                                  */
#define PF_TYP_TYP2_Msk                   (0x4UL)                   /*!< PF TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP1_Pos                   (1UL)                     /*!< PF TYP: TYP1 (Bit 1)                                  */
#define PF_TYP_TYP1_Msk                   (0x2UL)                   /*!< PF TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP0_Pos                   (0UL)                     /*!< PF TYP: TYP0 (Bit 0)                                  */
#define PF_TYP_TYP0_Msk                   (0x1UL)                   /*!< PF TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PF_AFSR1_AFSR7_Pos                (28UL)                    /*!< PF AFSR1: AFSR7 (Bit 28)                              */
#define PF_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PF AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR6_Pos                (24UL)                    /*!< PF AFSR1: AFSR6 (Bit 24)                              */
#define PF_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PF AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR5_Pos                (20UL)                    /*!< PF AFSR1: AFSR5 (Bit 20)                              */
#define PF_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PF AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR4_Pos                (16UL)                    /*!< PF AFSR1: AFSR4 (Bit 16)                              */
#define PF_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PF AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR3_Pos                (12UL)                    /*!< PF AFSR1: AFSR3 (Bit 12)                              */
#define PF_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PF AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR2_Pos                (8UL)                     /*!< PF AFSR1: AFSR2 (Bit 8)                               */
#define PF_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PF AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR1_Pos                (4UL)                     /*!< PF AFSR1: AFSR1 (Bit 4)                               */
#define PF_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PF AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR0_Pos                (0UL)                     /*!< PF AFSR1: AFSR0 (Bit 0)                               */
#define PF_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PF AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PF_AFSR2_AFSR12_Pos               (16UL)                    /*!< PF AFSR2: AFSR12 (Bit 16)                             */
#define PF_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PF AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR11_Pos               (12UL)                    /*!< PF AFSR2: AFSR11 (Bit 12)                             */
#define PF_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PF AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR10_Pos               (8UL)                     /*!< PF AFSR2: AFSR10 (Bit 8)                              */
#define PF_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PF AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR9_Pos                (4UL)                     /*!< PF AFSR2: AFSR9 (Bit 4)                               */
#define PF_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PF AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR2_AFSR8_Pos                (0UL)                     /*!< PF AFSR2: AFSR8 (Bit 0)                               */
#define PF_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PF AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PF_PUPD_PUPD12_Pos                (24UL)                    /*!< PF PUPD: PUPD12 (Bit 24)                              */
#define PF_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PF PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD11_Pos                (22UL)                    /*!< PF PUPD: PUPD11 (Bit 22)                              */
#define PF_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PF PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD10_Pos                (20UL)                    /*!< PF PUPD: PUPD10 (Bit 20)                              */
#define PF_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PF PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD9_Pos                 (18UL)                    /*!< PF PUPD: PUPD9 (Bit 18)                               */
#define PF_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PF PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD8_Pos                 (16UL)                    /*!< PF PUPD: PUPD8 (Bit 16)                               */
#define PF_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PF PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD7_Pos                 (14UL)                    /*!< PF PUPD: PUPD7 (Bit 14)                               */
#define PF_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PF PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD6_Pos                 (12UL)                    /*!< PF PUPD: PUPD6 (Bit 12)                               */
#define PF_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PF PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD5_Pos                 (10UL)                    /*!< PF PUPD: PUPD5 (Bit 10)                               */
#define PF_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PF PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD4_Pos                 (8UL)                     /*!< PF PUPD: PUPD4 (Bit 8)                                */
#define PF_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PF PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD3_Pos                 (6UL)                     /*!< PF PUPD: PUPD3 (Bit 6)                                */
#define PF_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PF PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD2_Pos                 (4UL)                     /*!< PF PUPD: PUPD2 (Bit 4)                                */
#define PF_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PF PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD1_Pos                 (2UL)                     /*!< PF PUPD: PUPD1 (Bit 2)                                */
#define PF_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PF PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD0_Pos                 (0UL)                     /*!< PF PUPD: PUPD0 (Bit 0)                                */
#define PF_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PF PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PF_INDR_INDR12_Pos                (12UL)                    /*!< PF INDR: INDR12 (Bit 12)                              */
#define PF_INDR_INDR12_Msk                (0x1000UL)                /*!< PF INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR11_Pos                (11UL)                    /*!< PF INDR: INDR11 (Bit 11)                              */
#define PF_INDR_INDR11_Msk                (0x800UL)                 /*!< PF INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR10_Pos                (10UL)                    /*!< PF INDR: INDR10 (Bit 10)                              */
#define PF_INDR_INDR10_Msk                (0x400UL)                 /*!< PF INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR9_Pos                 (9UL)                     /*!< PF INDR: INDR9 (Bit 9)                                */
#define PF_INDR_INDR9_Msk                 (0x200UL)                 /*!< PF INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR8_Pos                 (8UL)                     /*!< PF INDR: INDR8 (Bit 8)                                */
#define PF_INDR_INDR8_Msk                 (0x100UL)                 /*!< PF INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR7_Pos                 (7UL)                     /*!< PF INDR: INDR7 (Bit 7)                                */
#define PF_INDR_INDR7_Msk                 (0x80UL)                  /*!< PF INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR6_Pos                 (6UL)                     /*!< PF INDR: INDR6 (Bit 6)                                */
#define PF_INDR_INDR6_Msk                 (0x40UL)                  /*!< PF INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR5_Pos                 (5UL)                     /*!< PF INDR: INDR5 (Bit 5)                                */
#define PF_INDR_INDR5_Msk                 (0x20UL)                  /*!< PF INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR4_Pos                 (4UL)                     /*!< PF INDR: INDR4 (Bit 4)                                */
#define PF_INDR_INDR4_Msk                 (0x10UL)                  /*!< PF INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR3_Pos                 (3UL)                     /*!< PF INDR: INDR3 (Bit 3)                                */
#define PF_INDR_INDR3_Msk                 (0x8UL)                   /*!< PF INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR2_Pos                 (2UL)                     /*!< PF INDR: INDR2 (Bit 2)                                */
#define PF_INDR_INDR2_Msk                 (0x4UL)                   /*!< PF INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR1_Pos                 (1UL)                     /*!< PF INDR: INDR1 (Bit 1)                                */
#define PF_INDR_INDR1_Msk                 (0x2UL)                   /*!< PF INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR0_Pos                 (0UL)                     /*!< PF INDR: INDR0 (Bit 0)                                */
#define PF_INDR_INDR0_Msk                 (0x1UL)                   /*!< PF INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PF_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PF OUTDR: OUTDR12 (Bit 12)                            */
#define PF_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PF OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PF OUTDR: OUTDR11 (Bit 11)                            */
#define PF_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PF OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PF OUTDR: OUTDR10 (Bit 10)                            */
#define PF_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PF OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PF OUTDR: OUTDR9 (Bit 9)                              */
#define PF_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PF OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PF OUTDR: OUTDR8 (Bit 8)                              */
#define PF_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PF OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PF OUTDR: OUTDR7 (Bit 7)                              */
#define PF_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PF OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PF OUTDR: OUTDR6 (Bit 6)                              */
#define PF_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PF OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PF OUTDR: OUTDR5 (Bit 5)                              */
#define PF_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PF OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PF OUTDR: OUTDR4 (Bit 4)                              */
#define PF_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PF OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PF OUTDR: OUTDR3 (Bit 3)                              */
#define PF_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PF OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PF OUTDR: OUTDR2 (Bit 2)                              */
#define PF_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PF OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PF OUTDR: OUTDR1 (Bit 1)                              */
#define PF_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PF OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PF OUTDR: OUTDR0 (Bit 0)                              */
#define PF_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PF OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PF_BSR_BSR12_Pos                  (12UL)                    /*!< PF BSR: BSR12 (Bit 12)                                */
#define PF_BSR_BSR12_Msk                  (0x1000UL)                /*!< PF BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR11_Pos                  (11UL)                    /*!< PF BSR: BSR11 (Bit 11)                                */
#define PF_BSR_BSR11_Msk                  (0x800UL)                 /*!< PF BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR10_Pos                  (10UL)                    /*!< PF BSR: BSR10 (Bit 10)                                */
#define PF_BSR_BSR10_Msk                  (0x400UL)                 /*!< PF BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR9_Pos                   (9UL)                     /*!< PF BSR: BSR9 (Bit 9)                                  */
#define PF_BSR_BSR9_Msk                   (0x200UL)                 /*!< PF BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR8_Pos                   (8UL)                     /*!< PF BSR: BSR8 (Bit 8)                                  */
#define PF_BSR_BSR8_Msk                   (0x100UL)                 /*!< PF BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR7_Pos                   (7UL)                     /*!< PF BSR: BSR7 (Bit 7)                                  */
#define PF_BSR_BSR7_Msk                   (0x80UL)                  /*!< PF BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR6_Pos                   (6UL)                     /*!< PF BSR: BSR6 (Bit 6)                                  */
#define PF_BSR_BSR6_Msk                   (0x40UL)                  /*!< PF BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR5_Pos                   (5UL)                     /*!< PF BSR: BSR5 (Bit 5)                                  */
#define PF_BSR_BSR5_Msk                   (0x20UL)                  /*!< PF BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR4_Pos                   (4UL)                     /*!< PF BSR: BSR4 (Bit 4)                                  */
#define PF_BSR_BSR4_Msk                   (0x10UL)                  /*!< PF BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR3_Pos                   (3UL)                     /*!< PF BSR: BSR3 (Bit 3)                                  */
#define PF_BSR_BSR3_Msk                   (0x8UL)                   /*!< PF BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR2_Pos                   (2UL)                     /*!< PF BSR: BSR2 (Bit 2)                                  */
#define PF_BSR_BSR2_Msk                   (0x4UL)                   /*!< PF BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR1_Pos                   (1UL)                     /*!< PF BSR: BSR1 (Bit 1)                                  */
#define PF_BSR_BSR1_Msk                   (0x2UL)                   /*!< PF BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR0_Pos                   (0UL)                     /*!< PF BSR: BSR0 (Bit 0)                                  */
#define PF_BSR_BSR0_Msk                   (0x1UL)                   /*!< PF BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PF_BCR_BCR12_Pos                  (12UL)                    /*!< PF BCR: BCR12 (Bit 12)                                */
#define PF_BCR_BCR12_Msk                  (0x1000UL)                /*!< PF BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR11_Pos                  (11UL)                    /*!< PF BCR: BCR11 (Bit 11)                                */
#define PF_BCR_BCR11_Msk                  (0x800UL)                 /*!< PF BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR10_Pos                  (10UL)                    /*!< PF BCR: BCR10 (Bit 10)                                */
#define PF_BCR_BCR10_Msk                  (0x400UL)                 /*!< PF BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR9_Pos                   (9UL)                     /*!< PF BCR: BCR9 (Bit 9)                                  */
#define PF_BCR_BCR9_Msk                   (0x200UL)                 /*!< PF BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR8_Pos                   (8UL)                     /*!< PF BCR: BCR8 (Bit 8)                                  */
#define PF_BCR_BCR8_Msk                   (0x100UL)                 /*!< PF BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR7_Pos                   (7UL)                     /*!< PF BCR: BCR7 (Bit 7)                                  */
#define PF_BCR_BCR7_Msk                   (0x80UL)                  /*!< PF BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR6_Pos                   (6UL)                     /*!< PF BCR: BCR6 (Bit 6)                                  */
#define PF_BCR_BCR6_Msk                   (0x40UL)                  /*!< PF BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR5_Pos                   (5UL)                     /*!< PF BCR: BCR5 (Bit 5)                                  */
#define PF_BCR_BCR5_Msk                   (0x20UL)                  /*!< PF BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR4_Pos                   (4UL)                     /*!< PF BCR: BCR4 (Bit 4)                                  */
#define PF_BCR_BCR4_Msk                   (0x10UL)                  /*!< PF BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR3_Pos                   (3UL)                     /*!< PF BCR: BCR3 (Bit 3)                                  */
#define PF_BCR_BCR3_Msk                   (0x8UL)                   /*!< PF BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR2_Pos                   (2UL)                     /*!< PF BCR: BCR2 (Bit 2)                                  */
#define PF_BCR_BCR2_Msk                   (0x4UL)                   /*!< PF BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR1_Pos                   (1UL)                     /*!< PF BCR: BCR1 (Bit 1)                                  */
#define PF_BCR_BCR1_Msk                   (0x2UL)                   /*!< PF BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR0_Pos                   (0UL)                     /*!< PF BCR: BCR0 (Bit 0)                                  */
#define PF_BCR_BCR0_Msk                   (0x1UL)                   /*!< PF BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PF_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PF OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PF_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PF OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PF OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PF_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PF OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PF OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PF_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PF OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PF OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PF_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PF OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PF OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PF_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PF OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PF OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PF_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PF OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PF OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PF_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PF OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PF OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PF_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PF OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PF OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PF_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PF OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PF OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PF_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PF OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PF OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PF_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PF OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PF OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PF_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PF OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PF OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PF_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PF OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PF_DBCR_DBCLK_Pos                 (16UL)                    /*!< PF DBCR: DBCLK (Bit 16)                               */
#define PF_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PF DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PF_DBCR_DBEN12_Pos                (12UL)                    /*!< PF DBCR: DBEN12 (Bit 12)                              */
#define PF_DBCR_DBEN12_Msk                (0x1000UL)                /*!< PF DBCR: DBEN12 (Bitfield-Mask: 0x01)                 */
#define PF_DBCR_DBEN11_Pos                (11UL)                    /*!< PF DBCR: DBEN11 (Bit 11)                              */
#define PF_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PF DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PF_DBCR_DBEN10_Pos                (10UL)                    /*!< PF DBCR: DBEN10 (Bit 10)                              */
#define PF_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PF DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PF_DBCR_DBEN9_Pos                 (9UL)                     /*!< PF DBCR: DBEN9 (Bit 9)                                */
#define PF_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PF DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN8_Pos                 (8UL)                     /*!< PF DBCR: DBEN8 (Bit 8)                                */
#define PF_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PF DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN7_Pos                 (7UL)                     /*!< PF DBCR: DBEN7 (Bit 7)                                */
#define PF_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PF DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN6_Pos                 (6UL)                     /*!< PF DBCR: DBEN6 (Bit 6)                                */
#define PF_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PF DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN5_Pos                 (5UL)                     /*!< PF DBCR: DBEN5 (Bit 5)                                */
#define PF_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PF DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN4_Pos                 (4UL)                     /*!< PF DBCR: DBEN4 (Bit 4)                                */
#define PF_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PF DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN3_Pos                 (3UL)                     /*!< PF DBCR: DBEN3 (Bit 3)                                */
#define PF_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PF DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN2_Pos                 (2UL)                     /*!< PF DBCR: DBEN2 (Bit 2)                                */
#define PF_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PF DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN1_Pos                 (1UL)                     /*!< PF DBCR: DBEN1 (Bit 1)                                */
#define PF_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PF DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN0_Pos                 (0UL)                     /*!< PF DBCR: DBEN0 (Bit 0)                                */
#define PF_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PF DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PF_MOD  ========================================================= */
#define PF_PF_MOD_MODE3_Pos               (6UL)                     /*!< PF PF_MOD: MODE3 (Bit 6)                              */
#define PF_PF_MOD_MODE3_Msk               (0xc0UL)                  /*!< PF PF_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE2_Pos               (4UL)                     /*!< PF PF_MOD: MODE2 (Bit 4)                              */
#define PF_PF_MOD_MODE2_Msk               (0x30UL)                  /*!< PF PF_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE1_Pos               (2UL)                     /*!< PF PF_MOD: MODE1 (Bit 2)                              */
#define PF_PF_MOD_MODE1_Msk               (0xcUL)                   /*!< PF PF_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE0_Pos               (0UL)                     /*!< PF PF_MOD: MODE0 (Bit 0)                              */
#define PF_PF_MOD_MODE0_Msk               (0x3UL)                   /*!< PF PF_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PF_TYP  ========================================================= */
#define PF_PF_TYP_TYP3_Pos                (3UL)                     /*!< PF PF_TYP: TYP3 (Bit 3)                               */
#define PF_PF_TYP_TYP3_Msk                (0x8UL)                   /*!< PF PF_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP2_Pos                (2UL)                     /*!< PF PF_TYP: TYP2 (Bit 2)                               */
#define PF_PF_TYP_TYP2_Msk                (0x4UL)                   /*!< PF PF_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP1_Pos                (1UL)                     /*!< PF PF_TYP: TYP1 (Bit 1)                               */
#define PF_PF_TYP_TYP1_Msk                (0x2UL)                   /*!< PF PF_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP0_Pos                (0UL)                     /*!< PF PF_TYP: TYP0 (Bit 0)                               */
#define PF_PF_TYP_TYP0_Msk                (0x1UL)                   /*!< PF PF_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PF_AFSR1  ======================================================== */
#define PF_PF_AFSR1_AFSR3_Pos             (12UL)                    /*!< PF PF_AFSR1: AFSR3 (Bit 12)                           */
#define PF_PF_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PF PF_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR2_Pos             (8UL)                     /*!< PF PF_AFSR1: AFSR2 (Bit 8)                            */
#define PF_PF_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PF PF_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR1_Pos             (4UL)                     /*!< PF PF_AFSR1: AFSR1 (Bit 4)                            */
#define PF_PF_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PF PF_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR0_Pos             (0UL)                     /*!< PF PF_AFSR1: AFSR0 (Bit 0)                            */
#define PF_PF_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PF PF_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PF_AFSR2  ======================================================== */
/* ========================================================  PF_PUPD  ======================================================== */
#define PF_PF_PUPD_PUPD3_Pos              (6UL)                     /*!< PF PF_PUPD: PUPD3 (Bit 6)                             */
#define PF_PF_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PF PF_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD2_Pos              (4UL)                     /*!< PF PF_PUPD: PUPD2 (Bit 4)                             */
#define PF_PF_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PF PF_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD1_Pos              (2UL)                     /*!< PF PF_PUPD: PUPD1 (Bit 2)                             */
#define PF_PF_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PF PF_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD0_Pos              (0UL)                     /*!< PF PF_PUPD: PUPD0 (Bit 0)                             */
#define PF_PF_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PF PF_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PF_INDR  ======================================================== */
#define PF_PF_INDR_INDR3_Pos              (3UL)                     /*!< PF PF_INDR: INDR3 (Bit 3)                             */
#define PF_PF_INDR_INDR3_Msk              (0x8UL)                   /*!< PF PF_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR2_Pos              (2UL)                     /*!< PF PF_INDR: INDR2 (Bit 2)                             */
#define PF_PF_INDR_INDR2_Msk              (0x4UL)                   /*!< PF PF_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR1_Pos              (1UL)                     /*!< PF PF_INDR: INDR1 (Bit 1)                             */
#define PF_PF_INDR_INDR1_Msk              (0x2UL)                   /*!< PF PF_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR0_Pos              (0UL)                     /*!< PF PF_INDR: INDR0 (Bit 0)                             */
#define PF_PF_INDR_INDR0_Msk              (0x1UL)                   /*!< PF PF_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PF_OUTDR  ======================================================== */
#define PF_PF_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PF PF_OUTDR: OUTDR3 (Bit 3)                           */
#define PF_PF_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PF PF_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PF PF_OUTDR: OUTDR2 (Bit 2)                           */
#define PF_PF_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PF PF_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PF PF_OUTDR: OUTDR1 (Bit 1)                           */
#define PF_PF_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PF PF_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PF PF_OUTDR: OUTDR0 (Bit 0)                           */
#define PF_PF_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PF PF_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PF_BSR  ========================================================= */
#define PF_PF_BSR_BSR3_Pos                (3UL)                     /*!< PF PF_BSR: BSR3 (Bit 3)                               */
#define PF_PF_BSR_BSR3_Msk                (0x8UL)                   /*!< PF PF_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR2_Pos                (2UL)                     /*!< PF PF_BSR: BSR2 (Bit 2)                               */
#define PF_PF_BSR_BSR2_Msk                (0x4UL)                   /*!< PF PF_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR1_Pos                (1UL)                     /*!< PF PF_BSR: BSR1 (Bit 1)                               */
#define PF_PF_BSR_BSR1_Msk                (0x2UL)                   /*!< PF PF_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR0_Pos                (0UL)                     /*!< PF PF_BSR: BSR0 (Bit 0)                               */
#define PF_PF_BSR_BSR0_Msk                (0x1UL)                   /*!< PF PF_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PF_BCR  ========================================================= */
#define PF_PF_BCR_BCR3_Pos                (3UL)                     /*!< PF PF_BCR: BCR3 (Bit 3)                               */
#define PF_PF_BCR_BCR3_Msk                (0x8UL)                   /*!< PF PF_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR2_Pos                (2UL)                     /*!< PF PF_BCR: BCR2 (Bit 2)                               */
#define PF_PF_BCR_BCR2_Msk                (0x4UL)                   /*!< PF PF_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR1_Pos                (1UL)                     /*!< PF PF_BCR: BCR1 (Bit 1)                               */
#define PF_PF_BCR_BCR1_Msk                (0x2UL)                   /*!< PF PF_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR0_Pos                (0UL)                     /*!< PF PF_BCR: BCR0 (Bit 0)                               */
#define PF_PF_BCR_BCR0_Msk                (0x1UL)                   /*!< PF PF_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PF_OUTDMSK  ======================================================= */
#define PF_PF_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PF PF_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PF_PF_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PF PF_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PF PF_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PF_PF_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PF PF_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PF PF_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PF_PF_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PF PF_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PF PF_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PF_PF_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PF PF_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PF_DBCR  ======================================================== */
#define PF_PF_DBCR_DBCLK_Pos              (16UL)                    /*!< PF PF_DBCR: DBCLK (Bit 16)                            */
#define PF_PF_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PF PF_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PF_PF_DBCR_DBEN3_Pos              (3UL)                     /*!< PF PF_DBCR: DBEN3 (Bit 3)                             */
#define PF_PF_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PF PF_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PF_PF_DBCR_DBEN2_Pos              (2UL)                     /*!< PF PF_DBCR: DBEN2 (Bit 2)                             */
#define PF_PF_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PF PF_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PF_PF_DBCR_DBEN1_Pos              (1UL)                     /*!< PF PF_DBCR: DBEN1 (Bit 1)                             */
#define PF_PF_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PF PF_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PF_PF_DBCR_DBEN0_Pos              (0UL)                     /*!< PF PF_DBCR: DBEN0 (Bit 0)                             */
#define PF_PF_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PF PF_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  PWRCR  ========================================================= */
#define PMU_PWRCR_WTIDKY_Pos              (16UL)                    /*!< PMU PWRCR: WTIDKY (Bit 16)                            */
#define PMU_PWRCR_WTIDKY_Msk              (0xffff0000UL)            /*!< PMU PWRCR: WTIDKY (Bitfield-Mask: 0xffff)             */
#define PMU_PWRCR_ALLPWR_Pos              (15UL)                    /*!< PMU PWRCR: ALLPWR (Bit 15)                            */
#define PMU_PWRCR_ALLPWR_Msk              (0x8000UL)                /*!< PMU PWRCR: ALLPWR (Bitfield-Mask: 0x01)               */
#define PMU_PWRCR_FLASHPWR_Pos            (8UL)                     /*!< PMU PWRCR: FLASHPWR (Bit 8)                           */
#define PMU_PWRCR_FLASHPWR_Msk            (0x100UL)                 /*!< PMU PWRCR: FLASHPWR (Bitfield-Mask: 0x01)             */
#define PMU_PWRCR_SRAMRTPWR_Pos           (0UL)                     /*!< PMU PWRCR: SRAMRTPWR (Bit 0)                          */
#define PMU_PWRCR_SRAMRTPWR_Msk           (0x1UL)                   /*!< PMU PWRCR: SRAMRTPWR (Bitfield-Mask: 0x01)            */
/* =========================================================  BKR0  ========================================================== */
#define PMU_BKR0_BACKUP_Pos               (0UL)                     /*!< PMU BKR0: BACKUP (Bit 0)                              */
#define PMU_BKR0_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR0: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR1  ========================================================== */
#define PMU_BKR1_BACKUP_Pos               (0UL)                     /*!< PMU BKR1: BACKUP (Bit 0)                              */
#define PMU_BKR1_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR1: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR2  ========================================================== */
#define PMU_BKR2_BACKUP_Pos               (0UL)                     /*!< PMU BKR2: BACKUP (Bit 0)                              */
#define PMU_BKR2_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR2: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR3  ========================================================== */
#define PMU_BKR3_BACKUP_Pos               (0UL)                     /*!< PMU BKR3: BACKUP (Bit 0)                              */
#define PMU_BKR3_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR3: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR4  ========================================================== */
#define PMU_BKR4_BACKUP_Pos               (0UL)                     /*!< PMU BKR4: BACKUP (Bit 0)                              */
#define PMU_BKR4_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR4: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR5  ========================================================== */
#define PMU_BKR5_BACKUP_Pos               (0UL)                     /*!< PMU BKR5: BACKUP (Bit 0)                              */
#define PMU_BKR5_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR5: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR6  ========================================================== */
#define PMU_BKR6_BACKUP_Pos               (0UL)                     /*!< PMU BKR6: BACKUP (Bit 0)                              */
#define PMU_BKR6_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR6: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR7  ========================================================== */
#define PMU_BKR7_BACKUP_Pos               (0UL)                     /*!< PMU BKR7: BACKUP (Bit 0)                              */
#define PMU_BKR7_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR7: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR8  ========================================================== */
#define PMU_BKR8_BACKUP_Pos               (0UL)                     /*!< PMU BKR8: BACKUP (Bit 0)                              */
#define PMU_BKR8_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR8: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR9  ========================================================== */
#define PMU_BKR9_BACKUP_Pos               (0UL)                     /*!< PMU BKR9: BACKUP (Bit 0)                              */
#define PMU_BKR9_BACKUP_Msk               (0xffUL)                  /*!< PMU BKR9: BACKUP (Bitfield-Mask: 0xff)                */
/* =========================================================  BKR10  ========================================================= */
#define PMU_BKR10_BACKUP_Pos              (0UL)                     /*!< PMU BKR10: BACKUP (Bit 0)                             */
#define PMU_BKR10_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR10: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR11  ========================================================= */
#define PMU_BKR11_BACKUP_Pos              (0UL)                     /*!< PMU BKR11: BACKUP (Bit 0)                             */
#define PMU_BKR11_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR11: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR12  ========================================================= */
#define PMU_BKR12_BACKUP_Pos              (0UL)                     /*!< PMU BKR12: BACKUP (Bit 0)                             */
#define PMU_BKR12_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR12: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR13  ========================================================= */
#define PMU_BKR13_BACKUP_Pos              (0UL)                     /*!< PMU BKR13: BACKUP (Bit 0)                             */
#define PMU_BKR13_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR13: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR14  ========================================================= */
#define PMU_BKR14_BACKUP_Pos              (0UL)                     /*!< PMU BKR14: BACKUP (Bit 0)                             */
#define PMU_BKR14_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR14: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR15  ========================================================= */
#define PMU_BKR15_BACKUP_Pos              (0UL)                     /*!< PMU BKR15: BACKUP (Bit 0)                             */
#define PMU_BKR15_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR15: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR16  ========================================================= */
#define PMU_BKR16_BACKUP_Pos              (0UL)                     /*!< PMU BKR16: BACKUP (Bit 0)                             */
#define PMU_BKR16_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR16: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR17  ========================================================= */
#define PMU_BKR17_BACKUP_Pos              (0UL)                     /*!< PMU BKR17: BACKUP (Bit 0)                             */
#define PMU_BKR17_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR17: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR18  ========================================================= */
#define PMU_BKR18_BACKUP_Pos              (0UL)                     /*!< PMU BKR18: BACKUP (Bit 0)                             */
#define PMU_BKR18_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR18: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR19  ========================================================= */
#define PMU_BKR19_BACKUP_Pos              (0UL)                     /*!< PMU BKR19: BACKUP (Bit 0)                             */
#define PMU_BKR19_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR19: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR20  ========================================================= */
#define PMU_BKR20_BACKUP_Pos              (0UL)                     /*!< PMU BKR20: BACKUP (Bit 0)                             */
#define PMU_BKR20_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR20: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR21  ========================================================= */
#define PMU_BKR21_BACKUP_Pos              (0UL)                     /*!< PMU BKR21: BACKUP (Bit 0)                             */
#define PMU_BKR21_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR21: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR22  ========================================================= */
#define PMU_BKR22_BACKUP_Pos              (0UL)                     /*!< PMU BKR22: BACKUP (Bit 0)                             */
#define PMU_BKR22_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR22: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR23  ========================================================= */
#define PMU_BKR23_BACKUP_Pos              (0UL)                     /*!< PMU BKR23: BACKUP (Bit 0)                             */
#define PMU_BKR23_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR23: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR24  ========================================================= */
#define PMU_BKR24_BACKUP_Pos              (0UL)                     /*!< PMU BKR24: BACKUP (Bit 0)                             */
#define PMU_BKR24_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR24: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR25  ========================================================= */
#define PMU_BKR25_BACKUP_Pos              (0UL)                     /*!< PMU BKR25: BACKUP (Bit 0)                             */
#define PMU_BKR25_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR25: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR26  ========================================================= */
#define PMU_BKR26_BACKUP_Pos              (0UL)                     /*!< PMU BKR26: BACKUP (Bit 0)                             */
#define PMU_BKR26_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR26: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR27  ========================================================= */
#define PMU_BKR27_BACKUP_Pos              (0UL)                     /*!< PMU BKR27: BACKUP (Bit 0)                             */
#define PMU_BKR27_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR27: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR28  ========================================================= */
#define PMU_BKR28_BACKUP_Pos              (0UL)                     /*!< PMU BKR28: BACKUP (Bit 0)                             */
#define PMU_BKR28_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR28: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR29  ========================================================= */
#define PMU_BKR29_BACKUP_Pos              (0UL)                     /*!< PMU BKR29: BACKUP (Bit 0)                             */
#define PMU_BKR29_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR29: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR30  ========================================================= */
#define PMU_BKR30_BACKUP_Pos              (0UL)                     /*!< PMU BKR30: BACKUP (Bit 0)                             */
#define PMU_BKR30_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR30: BACKUP (Bitfield-Mask: 0xff)               */
/* =========================================================  BKR31  ========================================================= */
#define PMU_BKR31_BACKUP_Pos              (0UL)                     /*!< PMU BKR31: BACKUP (Bit 0)                             */
#define PMU_BKR31_BACKUP_Msk              (0xffUL)                  /*!< PMU BKR31: BACKUP (Bitfield-Mask: 0xff)               */


/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ADR  ========================================================== */
#define FMC_ADR_ADDR_Pos                  (0UL)                     /*!< FMC ADR: ADDR (Bit 0)                                 */
#define FMC_ADR_ADDR_Msk                  (0xffffffffUL)            /*!< FMC ADR: ADDR (Bitfield-Mask: 0xffffffff)             */
/* =========================================================  IDR1  ========================================================== */
#define FMC_IDR1_ID1_Pos                  (0UL)                     /*!< FMC IDR1: ID1 (Bit 0)                                 */
#define FMC_IDR1_ID1_Msk                  (0xffffffffUL)            /*!< FMC IDR1: ID1 (Bitfield-Mask: 0xffffffff)             */
/* =========================================================  IDR2  ========================================================== */
#define FMC_IDR2_ID2_Pos                  (0UL)                     /*!< FMC IDR2: ID2 (Bit 0)                                 */
#define FMC_IDR2_ID2_Msk                  (0xffffffffUL)            /*!< FMC IDR2: ID2 (Bitfield-Mask: 0xffffffff)             */
/* ==========================================================  CR  =========================================================== */
#define FMC_CR_WTIDKY_Pos                 (16UL)                    /*!< FMC CR: WTIDKY (Bit 16)                               */
#define FMC_CR_WTIDKY_Msk                 (0xffff0000UL)            /*!< FMC CR: WTIDKY (Bitfield-Mask: 0xffff)                */
#define FMC_CR_FMKEY_Pos                  (8UL)                     /*!< FMC CR: FMKEY (Bit 8)                                 */
#define FMC_CR_FMKEY_Msk                  (0xff00UL)                /*!< FMC CR: FMKEY (Bitfield-Mask: 0xff)                   */
#define FMC_CR_FMBUSY_Pos                 (7UL)                     /*!< FMC CR: FMBUSY (Bit 7)                                */
#define FMC_CR_FMBUSY_Msk                 (0x80UL)                  /*!< FMC CR: FMBUSY (Bitfield-Mask: 0x01)                  */
#define FMC_CR_FMOD_Pos                   (0UL)                     /*!< FMC CR: FMOD (Bit 0)                                  */
#define FMC_CR_FMOD_Msk                   (0xfUL)                   /*!< FMC CR: FMOD (Bitfield-Mask: 0x0f)                    */
/* ==========================================================  BCR  ========================================================== */
#define FMC_BCR_WTIDKY_Pos                (16UL)                    /*!< FMC BCR: WTIDKY (Bit 16)                              */
#define FMC_BCR_WTIDKY_Msk                (0xffff0000UL)            /*!< FMC BCR: WTIDKY (Bitfield-Mask: 0xffff)               */
#define FMC_BCR_CNF3BEN_Pos               (8UL)                     /*!< FMC BCR: CNF3BEN (Bit 8)                              */
#define FMC_BCR_CNF3BEN_Msk               (0xf00UL)                 /*!< FMC BCR: CNF3BEN (Bitfield-Mask: 0x0f)                */
#define FMC_BCR_CNF2BEN_Pos               (4UL)                     /*!< FMC BCR: CNF2BEN (Bit 4)                              */
#define FMC_BCR_CNF2BEN_Msk               (0xf0UL)                  /*!< FMC BCR: CNF2BEN (Bitfield-Mask: 0x0f)                */
#define FMC_BCR_CNF1BEN_Pos               (0UL)                     /*!< FMC BCR: CNF1BEN (Bit 0)                              */
#define FMC_BCR_CNF1BEN_Msk               (0xfUL)                   /*!< FMC BCR: CNF1BEN (Bitfield-Mask: 0x0f)                */
/* ========================================================  ERFLAG  ========================================================= */
#define FMC_ERFLAG_INSTFLAG_Pos           (1UL)                     /*!< FMC ERFLAG: INSTFLAG (Bit 1)                          */
#define FMC_ERFLAG_INSTFLAG_Msk           (0x2UL)                   /*!< FMC ERFLAG: INSTFLAG (Bitfield-Mask: 0x01)            */
#define FMC_ERFLAG_FMOPFLAG_Pos           (0UL)                     /*!< FMC ERFLAG: FMOPFLAG (Bit 0)                          */
#define FMC_ERFLAG_FMOPFLAG_Msk           (0x1UL)                   /*!< FMC ERFLAG: FMOPFLAG (Bitfield-Mask: 0x01)            */
/* ========================================================  PAGEBUF  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define WDT_CR_WTIDKY_Pos                 (16UL)                    /*!< WDT CR: WTIDKY (Bit 16)                               */
#define WDT_CR_WTIDKY_Msk                 (0xffff0000UL)            /*!< WDT CR: WTIDKY (Bitfield-Mask: 0xffff)                */
#define WDT_CR_RSTEN_Pos                  (10UL)                    /*!< WDT CR: RSTEN (Bit 10)                                */
#define WDT_CR_RSTEN_Msk                  (0xfc00UL)                /*!< WDT CR: RSTEN (Bitfield-Mask: 0x3f)                   */
#define WDT_CR_CNTEN_Pos                  (4UL)                     /*!< WDT CR: CNTEN (Bit 4)                                 */
#define WDT_CR_CNTEN_Msk                  (0x3f0UL)                 /*!< WDT CR: CNTEN (Bitfield-Mask: 0x3f)                   */
#define WDT_CR_WINMIEN_Pos                (3UL)                     /*!< WDT CR: WINMIEN (Bit 3)                               */
#define WDT_CR_WINMIEN_Msk                (0x8UL)                   /*!< WDT CR: WINMIEN (Bitfield-Mask: 0x01)                 */
#define WDT_CR_UNFIEN_Pos                 (2UL)                     /*!< WDT CR: UNFIEN (Bit 2)                                */
#define WDT_CR_UNFIEN_Msk                 (0x4UL)                   /*!< WDT CR: UNFIEN (Bitfield-Mask: 0x01)                  */
#define WDT_CR_CLKDIV_Pos                 (0UL)                     /*!< WDT CR: CLKDIV (Bit 0)                                */
#define WDT_CR_CLKDIV_Msk                 (0x3UL)                   /*!< WDT CR: CLKDIV (Bitfield-Mask: 0x03)                  */
/* ==========================================================  SR  =========================================================== */
#define WDT_SR_DBGCNTEN_Pos               (7UL)                     /*!< WDT SR: DBGCNTEN (Bit 7)                              */
#define WDT_SR_DBGCNTEN_Msk               (0x80UL)                  /*!< WDT SR: DBGCNTEN (Bitfield-Mask: 0x01)                */
#define WDT_SR_WINMIFLAG_Pos              (1UL)                     /*!< WDT SR: WINMIFLAG (Bit 1)                             */
#define WDT_SR_WINMIFLAG_Msk              (0x2UL)                   /*!< WDT SR: WINMIFLAG (Bitfield-Mask: 0x01)               */
#define WDT_SR_UNFIFLAG_Pos               (0UL)                     /*!< WDT SR: UNFIFLAG (Bit 0)                              */
#define WDT_SR_UNFIFLAG_Msk               (0x1UL)                   /*!< WDT SR: UNFIFLAG (Bitfield-Mask: 0x01)                */
/* ==========================================================  DR  =========================================================== */
#define WDT_DR_DATA_Pos                   (0UL)                     /*!< WDT DR: DATA (Bit 0)                                  */
#define WDT_DR_DATA_Msk                   (0xffffffUL)              /*!< WDT DR: DATA (Bitfield-Mask: 0xffffff)                */
/* ==========================================================  CNT  ========================================================== */
#define WDT_CNT_CNT_Pos                   (0UL)                     /*!< WDT CNT: CNT (Bit 0)                                  */
#define WDT_CNT_CNT_Msk                   (0xffffffUL)              /*!< WDT CNT: CNT (Bitfield-Mask: 0xffffff)                */
/* =========================================================  WINDR  ========================================================= */
#define WDT_WINDR_WDATA_Pos               (0UL)                     /*!< WDT WINDR: WDATA (Bit 0)                              */
#define WDT_WINDR_WDATA_Msk               (0xffffffUL)              /*!< WDT WINDR: WDATA (Bitfield-Mask: 0xffffff)            */
/* =========================================================  CNTR  ========================================================== */
#define WDT_CNTR_CNTR_Pos                 (0UL)                     /*!< WDT CNTR: CNTR (Bit 0)                                */
#define WDT_CNTR_CNTR_Msk                 (0xffUL)                  /*!< WDT CNTR: CNTR (Bitfield-Mask: 0xff)                  */


/* =========================================================================================================================== */
/* ================                                           RTCC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define RTCC_CR_RTEN_Pos                  (15UL)                    /*!< RTCC CR: RTEN (Bit 15)                                */
#define RTCC_CR_RTEN_Msk                  (0x8000UL)                /*!< RTCC CR: RTEN (Bitfield-Mask: 0x01)                   */
#define RTCC_CR_RTIN_Pos                  (12UL)                    /*!< RTCC CR: RTIN (Bit 12)                                */
#define RTCC_CR_RTIN_Msk                  (0x7000UL)                /*!< RTCC CR: RTIN (Bitfield-Mask: 0x07)                   */
#define RTCC_CR_RTIFLAG_Pos               (11UL)                    /*!< RTCC CR: RTIFLAG (Bit 11)                             */
#define RTCC_CR_RTIFLAG_Msk               (0x800UL)                 /*!< RTCC CR: RTIFLAG (Bitfield-Mask: 0x01)                */
#define RTCC_CR_HS24_Pos                  (10UL)                    /*!< RTCC CR: HS24 (Bit 10)                                */
#define RTCC_CR_HS24_Msk                  (0x400UL)                 /*!< RTCC CR: HS24 (Bitfield-Mask: 0x01)                   */
#define RTCC_CR_OUTSEL_Pos                (8UL)                     /*!< RTCC CR: OUTSEL (Bit 8)                               */
#define RTCC_CR_OUTSEL_Msk                (0x100UL)                 /*!< RTCC CR: OUTSEL (Bitfield-Mask: 0x01)                 */
#define RTCC_CR_ALEN_Pos                  (7UL)                     /*!< RTCC CR: ALEN (Bit 7)                                 */
#define RTCC_CR_ALEN_Msk                  (0x80UL)                  /*!< RTCC CR: ALEN (Bitfield-Mask: 0x01)                   */
#define RTCC_CR_ALIEN_Pos                 (6UL)                     /*!< RTCC CR: ALIEN (Bit 6)                                */
#define RTCC_CR_ALIEN_Msk                 (0x40UL)                  /*!< RTCC CR: ALIEN (Bitfield-Mask: 0x01)                  */
#define RTCC_CR_ALIFLAG_Pos               (5UL)                     /*!< RTCC CR: ALIFLAG (Bit 5)                              */
#define RTCC_CR_ALIFLAG_Msk               (0x20UL)                  /*!< RTCC CR: ALIFLAG (Bitfield-Mask: 0x01)                */
#define RTCC_CR_RTWST_Pos                 (1UL)                     /*!< RTCC CR: RTWST (Bit 1)                                */
#define RTCC_CR_RTWST_Msk                 (0x2UL)                   /*!< RTCC CR: RTWST (Bitfield-Mask: 0x01)                  */
#define RTCC_CR_RTWAIT_Pos                (0UL)                     /*!< RTCC CR: RTWAIT (Bit 0)                               */
#define RTCC_CR_RTWAIT_Msk                (0x1UL)                   /*!< RTCC CR: RTWAIT (Bitfield-Mask: 0x01)                 */
/* ==========================================================  ECR  ========================================================== */
#define RTCC_ECR_ECTM_Pos                 (7UL)                     /*!< RTCC ECR: ECTM (Bit 7)                                */
#define RTCC_ECR_ECTM_Msk                 (0x80UL)                  /*!< RTCC ECR: ECTM (Bitfield-Mask: 0x01)                  */
#define RTCC_ECR_ECSIGN_Pos               (6UL)                     /*!< RTCC ECR: ECSIGN (Bit 6)                              */
#define RTCC_ECR_ECSIGN_Msk               (0x40UL)                  /*!< RTCC ECR: ECSIGN (Bitfield-Mask: 0x01)                */
#define RTCC_ECR_ECV_Pos                  (0UL)                     /*!< RTCC ECR: ECV (Bit 0)                                 */
#define RTCC_ECR_ECV_Msk                  (0x3fUL)                  /*!< RTCC ECR: ECV (Bitfield-Mask: 0x3f)                   */
/* =========================================================  SCNT  ========================================================== */
#define RTCC_SCNT_RTCNT_Pos               (0UL)                     /*!< RTCC SCNT: RTCNT (Bit 0)                              */
#define RTCC_SCNT_RTCNT_Msk               (0xffffUL)                /*!< RTCC SCNT: RTCNT (Bitfield-Mask: 0xffff)              */
/* ==========================================================  SEC  ========================================================== */
#define RTCC_SEC_RSEC_Pos                 (0UL)                     /*!< RTCC SEC: RSEC (Bit 0)                                */
#define RTCC_SEC_RSEC_Msk                 (0x7fUL)                  /*!< RTCC SEC: RSEC (Bitfield-Mask: 0x7f)                  */
/* ==========================================================  MIN  ========================================================== */
#define RTCC_MIN_RMIN_Pos                 (0UL)                     /*!< RTCC MIN: RMIN (Bit 0)                                */
#define RTCC_MIN_RMIN_Msk                 (0x7fUL)                  /*!< RTCC MIN: RMIN (Bitfield-Mask: 0x7f)                  */
/* =========================================================  HOUR  ========================================================== */
#define RTCC_HOUR_RHOUR_Pos               (0UL)                     /*!< RTCC HOUR: RHOUR (Bit 0)                              */
#define RTCC_HOUR_RHOUR_Msk               (0x7fUL)                  /*!< RTCC HOUR: RHOUR (Bitfield-Mask: 0x7f)                */
/* ==========================================================  DAY  ========================================================== */
#define RTCC_DAY_RDAY_Pos                 (0UL)                     /*!< RTCC DAY: RDAY (Bit 0)                                */
#define RTCC_DAY_RDAY_Msk                 (0x3fUL)                  /*!< RTCC DAY: RDAY (Bitfield-Mask: 0x3f)                  */
/* =========================================================  WEEK  ========================================================== */
#define RTCC_WEEK_RWEEK_Pos               (0UL)                     /*!< RTCC WEEK: RWEEK (Bit 0)                              */
#define RTCC_WEEK_RWEEK_Msk               (0x7UL)                   /*!< RTCC WEEK: RWEEK (Bitfield-Mask: 0x07)                */
/* =========================================================  MONTH  ========================================================= */
#define RTCC_MONTH_RMONTH_Pos             (0UL)                     /*!< RTCC MONTH: RMONTH (Bit 0)                            */
#define RTCC_MONTH_RMONTH_Msk             (0x1fUL)                  /*!< RTCC MONTH: RMONTH (Bitfield-Mask: 0x1f)              */
/* =========================================================  YEAR  ========================================================== */
#define RTCC_YEAR_RYEAR_Pos               (0UL)                     /*!< RTCC YEAR: RYEAR (Bit 0)                              */
#define RTCC_YEAR_RYEAR_Msk               (0xffUL)                  /*!< RTCC YEAR: RYEAR (Bitfield-Mask: 0xff)                */
/* =========================================================  ALMIN  ========================================================= */
#define RTCC_ALMIN_AMIN_Pos               (0UL)                     /*!< RTCC ALMIN: AMIN (Bit 0)                              */
#define RTCC_ALMIN_AMIN_Msk               (0x7fUL)                  /*!< RTCC ALMIN: AMIN (Bitfield-Mask: 0x7f)                */
/* ========================================================  ALHOUR  ========================================================= */
#define RTCC_ALHOUR_AHOUR_Pos             (0UL)                     /*!< RTCC ALHOUR: AHOUR (Bit 0)                            */
#define RTCC_ALHOUR_AHOUR_Msk             (0x3fUL)                  /*!< RTCC ALHOUR: AHOUR (Bitfield-Mask: 0x3f)              */
/* ========================================================  ALWEEK  ========================================================= */
#define RTCC_ALWEEK_AWEEK6_Pos            (6UL)                     /*!< RTCC ALWEEK: AWEEK6 (Bit 6)                           */
#define RTCC_ALWEEK_AWEEK6_Msk            (0x40UL)                  /*!< RTCC ALWEEK: AWEEK6 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK5_Pos            (5UL)                     /*!< RTCC ALWEEK: AWEEK5 (Bit 5)                           */
#define RTCC_ALWEEK_AWEEK5_Msk            (0x20UL)                  /*!< RTCC ALWEEK: AWEEK5 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK4_Pos            (4UL)                     /*!< RTCC ALWEEK: AWEEK4 (Bit 4)                           */
#define RTCC_ALWEEK_AWEEK4_Msk            (0x10UL)                  /*!< RTCC ALWEEK: AWEEK4 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK3_Pos            (3UL)                     /*!< RTCC ALWEEK: AWEEK3 (Bit 3)                           */
#define RTCC_ALWEEK_AWEEK3_Msk            (0x8UL)                   /*!< RTCC ALWEEK: AWEEK3 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK2_Pos            (2UL)                     /*!< RTCC ALWEEK: AWEEK2 (Bit 2)                           */
#define RTCC_ALWEEK_AWEEK2_Msk            (0x4UL)                   /*!< RTCC ALWEEK: AWEEK2 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK1_Pos            (1UL)                     /*!< RTCC ALWEEK: AWEEK1 (Bit 1)                           */
#define RTCC_ALWEEK_AWEEK1_Msk            (0x2UL)                   /*!< RTCC ALWEEK: AWEEK1 (Bitfield-Mask: 0x01)             */
#define RTCC_ALWEEK_AWEEK0_Pos            (0UL)                     /*!< RTCC ALWEEK: AWEEK0 (Bit 0)                           */
#define RTCC_ALWEEK_AWEEK0_Msk            (0x1UL)                   /*!< RTCC ALWEEK: AWEEK0 (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                          TIMER4n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER4n_CR_T4nFRCEN_Pos           (23UL)                    /*!< TIMER4n CR: T4nFRCEN (Bit 23)                         */
#define TIMER4n_CR_T4nFRCEN_Msk           (0x800000UL)              /*!< TIMER4n CR: T4nFRCEN (Bitfield-Mask: 0x01)            */
#define TIMER4n_CR_T4nFRCS_Pos            (20UL)                    /*!< TIMER4n CR: T4nFRCS (Bit 20)                          */
#define TIMER4n_CR_T4nFRCS_Msk            (0x300000UL)              /*!< TIMER4n CR: T4nFRCS (Bitfield-Mask: 0x03)             */
#define TIMER4n_CR_CNTSHEN_Pos            (19UL)                    /*!< TIMER4n CR: CNTSHEN (Bit 19)                          */
#define TIMER4n_CR_CNTSHEN_Msk            (0x80000UL)               /*!< TIMER4n CR: CNTSHEN (Bitfield-Mask: 0x01)             */
#define TIMER4n_CR_CNTSH_Pos              (16UL)                    /*!< TIMER4n CR: CNTSH (Bit 16)                            */
#define TIMER4n_CR_CNTSH_Msk              (0x30000UL)               /*!< TIMER4n CR: CNTSH (Bitfield-Mask: 0x03)               */
#define TIMER4n_CR_T4nEN_Pos              (15UL)                    /*!< TIMER4n CR: T4nEN (Bit 15)                            */
#define TIMER4n_CR_T4nEN_Msk              (0x8000UL)                /*!< TIMER4n CR: T4nEN (Bitfield-Mask: 0x01)               */
#define TIMER4n_CR_T4nCLK_Pos             (14UL)                    /*!< TIMER4n CR: T4nCLK (Bit 14)                           */
#define TIMER4n_CR_T4nCLK_Msk             (0x4000UL)                /*!< TIMER4n CR: T4nCLK (Bitfield-Mask: 0x01)              */
#define TIMER4n_CR_T4nMS_Pos              (12UL)                    /*!< TIMER4n CR: T4nMS (Bit 12)                            */
#define TIMER4n_CR_T4nMS_Msk              (0x3000UL)                /*!< TIMER4n CR: T4nMS (Bitfield-Mask: 0x03)               */
#define TIMER4n_CR_T4nECE_Pos             (11UL)                    /*!< TIMER4n CR: T4nECE (Bit 11)                           */
#define TIMER4n_CR_T4nECE_Msk             (0x800UL)                 /*!< TIMER4n CR: T4nECE (Bitfield-Mask: 0x01)              */
#define TIMER4n_CR_T4nOPAIR_Pos           (10UL)                    /*!< TIMER4n CR: T4nOPAIR (Bit 10)                         */
#define TIMER4n_CR_T4nOPAIR_Msk           (0x400UL)                 /*!< TIMER4n CR: T4nOPAIR (Bitfield-Mask: 0x01)            */
#define TIMER4n_CR_DLYEN_Pos              (9UL)                     /*!< TIMER4n CR: DLYEN (Bit 9)                             */
#define TIMER4n_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER4n CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER4n_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER4n CR: DLYPOS (Bit 8)                            */
#define TIMER4n_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER4n CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER4n_CR_UPDT_Pos               (6UL)                     /*!< TIMER4n CR: UPDT (Bit 6)                              */
#define TIMER4n_CR_UPDT_Msk               (0xc0UL)                  /*!< TIMER4n CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER4n_CR_T4nINPOL_Pos           (4UL)                     /*!< TIMER4n CR: T4nINPOL (Bit 4)                          */
#define TIMER4n_CR_T4nINPOL_Msk           (0x30UL)                  /*!< TIMER4n CR: T4nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER4n_CR_T4nPAU_Pos             (1UL)                     /*!< TIMER4n CR: T4nPAU (Bit 1)                            */
#define TIMER4n_CR_T4nPAU_Msk             (0x2UL)                   /*!< TIMER4n CR: T4nPAU (Bitfield-Mask: 0x01)              */
#define TIMER4n_CR_T4nCLR_Pos             (0UL)                     /*!< TIMER4n CR: T4nCLR (Bit 0)                            */
#define TIMER4n_CR_T4nCLR_Msk             (0x1UL)                   /*!< TIMER4n CR: T4nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER4n_PDR_PDATA_Pos             (0UL)                     /*!< TIMER4n PDR: PDATA (Bit 0)                            */
#define TIMER4n_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER4n PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER4n_ADR_ADATA_Pos             (0UL)                     /*!< TIMER4n ADR: ADATA (Bit 0)                            */
#define TIMER4n_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER4n ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER4n_BDR_BDATA_Pos             (0UL)                     /*!< TIMER4n BDR: BDATA (Bit 0)                            */
#define TIMER4n_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER4n BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER4n_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER4n CAPDR: CAPD (Bit 0)                           */
#define TIMER4n_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER4n CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER4n_PREDR_PRED_Pos            (0UL)                     /*!< TIMER4n PREDR: PRED (Bit 0)                           */
#define TIMER4n_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER4n PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER4n_CNT_CNT_Pos               (0UL)                     /*!< TIMER4n CNT: CNT (Bit 0)                              */
#define TIMER4n_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER4n CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER4n_OUTCR_POLB_Pos            (9UL)                     /*!< TIMER4n OUTCR: POLB (Bit 9)                           */
#define TIMER4n_OUTCR_POLB_Msk            (0x200UL)                 /*!< TIMER4n OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER4n_OUTCR_POLA_Pos            (8UL)                     /*!< TIMER4n OUTCR: POLA (Bit 8)                           */
#define TIMER4n_OUTCR_POLA_Msk            (0x100UL)                 /*!< TIMER4n OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER4n_OUTCR_T4nBOE_Pos          (5UL)                     /*!< TIMER4n OUTCR: T4nBOE (Bit 5)                         */
#define TIMER4n_OUTCR_T4nBOE_Msk          (0x20UL)                  /*!< TIMER4n OUTCR: T4nBOE (Bitfield-Mask: 0x01)           */
#define TIMER4n_OUTCR_T4nAOE_Pos          (4UL)                     /*!< TIMER4n OUTCR: T4nAOE (Bit 4)                         */
#define TIMER4n_OUTCR_T4nAOE_Msk          (0x10UL)                  /*!< TIMER4n OUTCR: T4nAOE (Bitfield-Mask: 0x01)           */
#define TIMER4n_OUTCR_LVLB_Pos            (1UL)                     /*!< TIMER4n OUTCR: LVLB (Bit 1)                           */
#define TIMER4n_OUTCR_LVLB_Msk            (0x2UL)                   /*!< TIMER4n OUTCR: LVLB (Bitfield-Mask: 0x01)             */
#define TIMER4n_OUTCR_LVLA_Pos            (0UL)                     /*!< TIMER4n OUTCR: LVLA (Bit 0)                           */
#define TIMER4n_OUTCR_LVLA_Msk            (0x1UL)                   /*!< TIMER4n OUTCR: LVLA (Bitfield-Mask: 0x01)             */
/* ==========================================================  DLY  ========================================================== */
#define TIMER4n_DLY_DLY_Pos               (0UL)                     /*!< TIMER4n DLY: DLY (Bit 0)                              */
#define TIMER4n_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER4n DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER4n_INTCR_T4nFRCIEN_Pos       (11UL)                    /*!< TIMER4n INTCR: T4nFRCIEN (Bit 11)                     */
#define TIMER4n_INTCR_T4nFRCIEN_Msk       (0x800UL)                 /*!< TIMER4n INTCR: T4nFRCIEN (Bitfield-Mask: 0x01)        */
#define TIMER4n_INTCR_T4nCIEN_Pos         (10UL)                    /*!< TIMER4n INTCR: T4nCIEN (Bit 10)                       */
#define TIMER4n_INTCR_T4nCIEN_Msk         (0x400UL)                 /*!< TIMER4n INTCR: T4nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER4n_INTCR_T4nBTIEN_Pos        (9UL)                     /*!< TIMER4n INTCR: T4nBTIEN (Bit 9)                       */
#define TIMER4n_INTCR_T4nBTIEN_Msk        (0x200UL)                 /*!< TIMER4n INTCR: T4nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER4n_INTCR_T4nPMIEN_Pos        (8UL)                     /*!< TIMER4n INTCR: T4nPMIEN (Bit 8)                       */
#define TIMER4n_INTCR_T4nPMIEN_Msk        (0x100UL)                 /*!< TIMER4n INTCR: T4nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER4n_INTCR_T4nBMIEN_Pos        (2UL)                     /*!< TIMER4n INTCR: T4nBMIEN (Bit 2)                       */
#define TIMER4n_INTCR_T4nBMIEN_Msk        (0xcUL)                   /*!< TIMER4n INTCR: T4nBMIEN (Bitfield-Mask: 0x03)         */
#define TIMER4n_INTCR_T4nAMIEN_Pos        (0UL)                     /*!< TIMER4n INTCR: T4nAMIEN (Bit 0)                       */
#define TIMER4n_INTCR_T4nAMIEN_Msk        (0x3UL)                   /*!< TIMER4n INTCR: T4nAMIEN (Bitfield-Mask: 0x03)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER4n_INTFLAG_T4nFRCIFLAG_Pos   (7UL)                     /*!< TIMER4n INTFLAG: T4nFRCIFLAG (Bit 7)                  */
#define TIMER4n_INTFLAG_T4nFRCIFLAG_Msk   (0x80UL)                  /*!< TIMER4n INTFLAG: T4nFRCIFLAG (Bitfield-Mask: 0x01)    */
#define TIMER4n_INTFLAG_T4nCIFLAG_Pos     (6UL)                     /*!< TIMER4n INTFLAG: T4nCIFLAG (Bit 6)                    */
#define TIMER4n_INTFLAG_T4nCIFLAG_Msk     (0x40UL)                  /*!< TIMER4n INTFLAG: T4nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER4n_INTFLAG_T4nBTIFLAG_Pos    (5UL)                     /*!< TIMER4n INTFLAG: T4nBTIFLAG (Bit 5)                   */
#define TIMER4n_INTFLAG_T4nBTIFLAG_Msk    (0x20UL)                  /*!< TIMER4n INTFLAG: T4nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER4n_INTFLAG_T4nPMIFLAG_Pos    (4UL)                     /*!< TIMER4n INTFLAG: T4nPMIFLAG (Bit 4)                   */
#define TIMER4n_INTFLAG_T4nPMIFLAG_Msk    (0x10UL)                  /*!< TIMER4n INTFLAG: T4nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER4n_INTFLAG_T4nBMIFLAG_Pos    (1UL)                     /*!< TIMER4n INTFLAG: T4nBMIFLAG (Bit 1)                   */
#define TIMER4n_INTFLAG_T4nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER4n INTFLAG: T4nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER4n_INTFLAG_T4nAMIFLAG_Pos    (0UL)                     /*!< TIMER4n INTFLAG: T4nAMIFLAG (Bit 0)                   */
#define TIMER4n_INTFLAG_T4nAMIFLAG_Msk    (0x1UL)                   /*!< TIMER4n INTFLAG: T4nAMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER4n_ADTCR_T4nBTTG_Pos         (9UL)                     /*!< TIMER4n ADTCR: T4nBTTG (Bit 9)                        */
#define TIMER4n_ADTCR_T4nBTTG_Msk         (0x200UL)                 /*!< TIMER4n ADTCR: T4nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER4n_ADTCR_T4nPMTG_Pos         (8UL)                     /*!< TIMER4n ADTCR: T4nPMTG (Bit 8)                        */
#define TIMER4n_ADTCR_T4nPMTG_Msk         (0x100UL)                 /*!< TIMER4n ADTCR: T4nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER4n_ADTCR_T4nBMTG_Pos         (2UL)                     /*!< TIMER4n ADTCR: T4nBMTG (Bit 2)                        */
#define TIMER4n_ADTCR_T4nBMTG_Msk         (0xcUL)                   /*!< TIMER4n ADTCR: T4nBMTG (Bitfield-Mask: 0x03)          */
#define TIMER4n_ADTCR_T4nAMTG_Pos         (0UL)                     /*!< TIMER4n ADTCR: T4nAMTG (Bit 0)                        */
#define TIMER4n_ADTCR_T4nAMTG_Msk         (0x3UL)                   /*!< TIMER4n ADTCR: T4nAMTG (Bitfield-Mask: 0x03)          */


/* =========================================================================================================================== */
/* ================                                          TIMER40                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER40_CR_T4nFRCEN_Pos           (23UL)                    /*!< TIMER40 CR: T4nFRCEN (Bit 23)                         */
#define TIMER40_CR_T4nFRCEN_Msk           (0x800000UL)              /*!< TIMER40 CR: T4nFRCEN (Bitfield-Mask: 0x01)            */
#define TIMER40_CR_T4nFRCS_Pos            (20UL)                    /*!< TIMER40 CR: T4nFRCS (Bit 20)                          */
#define TIMER40_CR_T4nFRCS_Msk            (0x300000UL)              /*!< TIMER40 CR: T4nFRCS (Bitfield-Mask: 0x03)             */
#define TIMER40_CR_CNTSHEN_Pos            (19UL)                    /*!< TIMER40 CR: CNTSHEN (Bit 19)                          */
#define TIMER40_CR_CNTSHEN_Msk            (0x80000UL)               /*!< TIMER40 CR: CNTSHEN (Bitfield-Mask: 0x01)             */
#define TIMER40_CR_CNTSH_Pos              (16UL)                    /*!< TIMER40 CR: CNTSH (Bit 16)                            */
#define TIMER40_CR_CNTSH_Msk              (0x30000UL)               /*!< TIMER40 CR: CNTSH (Bitfield-Mask: 0x03)               */
#define TIMER40_CR_T4nEN_Pos              (15UL)                    /*!< TIMER40 CR: T4nEN (Bit 15)                            */
#define TIMER40_CR_T4nEN_Msk              (0x8000UL)                /*!< TIMER40 CR: T4nEN (Bitfield-Mask: 0x01)               */
#define TIMER40_CR_T4nCLK_Pos             (14UL)                    /*!< TIMER40 CR: T4nCLK (Bit 14)                           */
#define TIMER40_CR_T4nCLK_Msk             (0x4000UL)                /*!< TIMER40 CR: T4nCLK (Bitfield-Mask: 0x01)              */
#define TIMER40_CR_T4nMS_Pos              (12UL)                    /*!< TIMER40 CR: T4nMS (Bit 12)                            */
#define TIMER40_CR_T4nMS_Msk              (0x3000UL)                /*!< TIMER40 CR: T4nMS (Bitfield-Mask: 0x03)               */
#define TIMER40_CR_T4nECE_Pos             (11UL)                    /*!< TIMER40 CR: T4nECE (Bit 11)                           */
#define TIMER40_CR_T4nECE_Msk             (0x800UL)                 /*!< TIMER40 CR: T4nECE (Bitfield-Mask: 0x01)              */
#define TIMER40_CR_T4nOPAIR_Pos           (10UL)                    /*!< TIMER40 CR: T4nOPAIR (Bit 10)                         */
#define TIMER40_CR_T4nOPAIR_Msk           (0x400UL)                 /*!< TIMER40 CR: T4nOPAIR (Bitfield-Mask: 0x01)            */
#define TIMER40_CR_DLYEN_Pos              (9UL)                     /*!< TIMER40 CR: DLYEN (Bit 9)                             */
#define TIMER40_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER40 CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER40_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER40 CR: DLYPOS (Bit 8)                            */
#define TIMER40_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER40 CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER40_CR_UPDT_Pos               (6UL)                     /*!< TIMER40 CR: UPDT (Bit 6)                              */
#define TIMER40_CR_UPDT_Msk               (0xc0UL)                  /*!< TIMER40 CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER40_CR_T4nINPOL_Pos           (4UL)                     /*!< TIMER40 CR: T4nINPOL (Bit 4)                          */
#define TIMER40_CR_T4nINPOL_Msk           (0x30UL)                  /*!< TIMER40 CR: T4nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER40_CR_T4nPAU_Pos             (1UL)                     /*!< TIMER40 CR: T4nPAU (Bit 1)                            */
#define TIMER40_CR_T4nPAU_Msk             (0x2UL)                   /*!< TIMER40 CR: T4nPAU (Bitfield-Mask: 0x01)              */
#define TIMER40_CR_T4nCLR_Pos             (0UL)                     /*!< TIMER40 CR: T4nCLR (Bit 0)                            */
#define TIMER40_CR_T4nCLR_Msk             (0x1UL)                   /*!< TIMER40 CR: T4nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER40_PDR_PDATA_Pos             (0UL)                     /*!< TIMER40 PDR: PDATA (Bit 0)                            */
#define TIMER40_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER40 PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER40_ADR_ADATA_Pos             (0UL)                     /*!< TIMER40 ADR: ADATA (Bit 0)                            */
#define TIMER40_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER40 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER40_BDR_BDATA_Pos             (0UL)                     /*!< TIMER40 BDR: BDATA (Bit 0)                            */
#define TIMER40_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER40 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER40_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER40 CAPDR: CAPD (Bit 0)                           */
#define TIMER40_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER40 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER40_PREDR_PRED_Pos            (0UL)                     /*!< TIMER40 PREDR: PRED (Bit 0)                           */
#define TIMER40_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER40 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER40_CNT_CNT_Pos               (0UL)                     /*!< TIMER40 CNT: CNT (Bit 0)                              */
#define TIMER40_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER40 CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER40_OUTCR_POLB_Pos            (9UL)                     /*!< TIMER40 OUTCR: POLB (Bit 9)                           */
#define TIMER40_OUTCR_POLB_Msk            (0x200UL)                 /*!< TIMER40 OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER40_OUTCR_POLA_Pos            (8UL)                     /*!< TIMER40 OUTCR: POLA (Bit 8)                           */
#define TIMER40_OUTCR_POLA_Msk            (0x100UL)                 /*!< TIMER40 OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER40_OUTCR_T4nBOE_Pos          (5UL)                     /*!< TIMER40 OUTCR: T4nBOE (Bit 5)                         */
#define TIMER40_OUTCR_T4nBOE_Msk          (0x20UL)                  /*!< TIMER40 OUTCR: T4nBOE (Bitfield-Mask: 0x01)           */
#define TIMER40_OUTCR_T4nAOE_Pos          (4UL)                     /*!< TIMER40 OUTCR: T4nAOE (Bit 4)                         */
#define TIMER40_OUTCR_T4nAOE_Msk          (0x10UL)                  /*!< TIMER40 OUTCR: T4nAOE (Bitfield-Mask: 0x01)           */
#define TIMER40_OUTCR_LVLB_Pos            (1UL)                     /*!< TIMER40 OUTCR: LVLB (Bit 1)                           */
#define TIMER40_OUTCR_LVLB_Msk            (0x2UL)                   /*!< TIMER40 OUTCR: LVLB (Bitfield-Mask: 0x01)             */
#define TIMER40_OUTCR_LVLA_Pos            (0UL)                     /*!< TIMER40 OUTCR: LVLA (Bit 0)                           */
#define TIMER40_OUTCR_LVLA_Msk            (0x1UL)                   /*!< TIMER40 OUTCR: LVLA (Bitfield-Mask: 0x01)             */
/* ==========================================================  DLY  ========================================================== */
#define TIMER40_DLY_DLY_Pos               (0UL)                     /*!< TIMER40 DLY: DLY (Bit 0)                              */
#define TIMER40_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER40 DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER40_INTCR_T4nFRCIEN_Pos       (11UL)                    /*!< TIMER40 INTCR: T4nFRCIEN (Bit 11)                     */
#define TIMER40_INTCR_T4nFRCIEN_Msk       (0x800UL)                 /*!< TIMER40 INTCR: T4nFRCIEN (Bitfield-Mask: 0x01)        */
#define TIMER40_INTCR_T4nCIEN_Pos         (10UL)                    /*!< TIMER40 INTCR: T4nCIEN (Bit 10)                       */
#define TIMER40_INTCR_T4nCIEN_Msk         (0x400UL)                 /*!< TIMER40 INTCR: T4nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER40_INTCR_T4nBTIEN_Pos        (9UL)                     /*!< TIMER40 INTCR: T4nBTIEN (Bit 9)                       */
#define TIMER40_INTCR_T4nBTIEN_Msk        (0x200UL)                 /*!< TIMER40 INTCR: T4nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER40_INTCR_T4nPMIEN_Pos        (8UL)                     /*!< TIMER40 INTCR: T4nPMIEN (Bit 8)                       */
#define TIMER40_INTCR_T4nPMIEN_Msk        (0x100UL)                 /*!< TIMER40 INTCR: T4nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER40_INTCR_T4nBMIEN_Pos        (2UL)                     /*!< TIMER40 INTCR: T4nBMIEN (Bit 2)                       */
#define TIMER40_INTCR_T4nBMIEN_Msk        (0xcUL)                   /*!< TIMER40 INTCR: T4nBMIEN (Bitfield-Mask: 0x03)         */
#define TIMER40_INTCR_T4nAMIEN_Pos        (0UL)                     /*!< TIMER40 INTCR: T4nAMIEN (Bit 0)                       */
#define TIMER40_INTCR_T4nAMIEN_Msk        (0x3UL)                   /*!< TIMER40 INTCR: T4nAMIEN (Bitfield-Mask: 0x03)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER40_INTFLAG_T4nFRCIFLAG_Pos   (7UL)                     /*!< TIMER40 INTFLAG: T4nFRCIFLAG (Bit 7)                  */
#define TIMER40_INTFLAG_T4nFRCIFLAG_Msk   (0x80UL)                  /*!< TIMER40 INTFLAG: T4nFRCIFLAG (Bitfield-Mask: 0x01)    */
#define TIMER40_INTFLAG_T4nCIFLAG_Pos     (6UL)                     /*!< TIMER40 INTFLAG: T4nCIFLAG (Bit 6)                    */
#define TIMER40_INTFLAG_T4nCIFLAG_Msk     (0x40UL)                  /*!< TIMER40 INTFLAG: T4nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER40_INTFLAG_T4nBTIFLAG_Pos    (5UL)                     /*!< TIMER40 INTFLAG: T4nBTIFLAG (Bit 5)                   */
#define TIMER40_INTFLAG_T4nBTIFLAG_Msk    (0x20UL)                  /*!< TIMER40 INTFLAG: T4nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER40_INTFLAG_T4nPMIFLAG_Pos    (4UL)                     /*!< TIMER40 INTFLAG: T4nPMIFLAG (Bit 4)                   */
#define TIMER40_INTFLAG_T4nPMIFLAG_Msk    (0x10UL)                  /*!< TIMER40 INTFLAG: T4nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER40_INTFLAG_T4nBMIFLAG_Pos    (1UL)                     /*!< TIMER40 INTFLAG: T4nBMIFLAG (Bit 1)                   */
#define TIMER40_INTFLAG_T4nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER40 INTFLAG: T4nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER40_INTFLAG_T4nAMIFLAG_Pos    (0UL)                     /*!< TIMER40 INTFLAG: T4nAMIFLAG (Bit 0)                   */
#define TIMER40_INTFLAG_T4nAMIFLAG_Msk    (0x1UL)                   /*!< TIMER40 INTFLAG: T4nAMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER40_ADTCR_T4nBTTG_Pos         (9UL)                     /*!< TIMER40 ADTCR: T4nBTTG (Bit 9)                        */
#define TIMER40_ADTCR_T4nBTTG_Msk         (0x200UL)                 /*!< TIMER40 ADTCR: T4nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER40_ADTCR_T4nPMTG_Pos         (8UL)                     /*!< TIMER40 ADTCR: T4nPMTG (Bit 8)                        */
#define TIMER40_ADTCR_T4nPMTG_Msk         (0x100UL)                 /*!< TIMER40 ADTCR: T4nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER40_ADTCR_T4nBMTG_Pos         (2UL)                     /*!< TIMER40 ADTCR: T4nBMTG (Bit 2)                        */
#define TIMER40_ADTCR_T4nBMTG_Msk         (0xcUL)                   /*!< TIMER40 ADTCR: T4nBMTG (Bitfield-Mask: 0x03)          */
#define TIMER40_ADTCR_T4nAMTG_Pos         (0UL)                     /*!< TIMER40 ADTCR: T4nAMTG (Bit 0)                        */
#define TIMER40_ADTCR_T4nAMTG_Msk         (0x3UL)                   /*!< TIMER40 ADTCR: T4nAMTG (Bitfield-Mask: 0x03)          */


/* =========================================================================================================================== */
/* ================                                          TIMER41                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER41_CR_T4nFRCEN_Pos           (23UL)                    /*!< TIMER41 CR: T4nFRCEN (Bit 23)                         */
#define TIMER41_CR_T4nFRCEN_Msk           (0x800000UL)              /*!< TIMER41 CR: T4nFRCEN (Bitfield-Mask: 0x01)            */
#define TIMER41_CR_T4nFRCS_Pos            (20UL)                    /*!< TIMER41 CR: T4nFRCS (Bit 20)                          */
#define TIMER41_CR_T4nFRCS_Msk            (0x300000UL)              /*!< TIMER41 CR: T4nFRCS (Bitfield-Mask: 0x03)             */
#define TIMER41_CR_CNTSHEN_Pos            (19UL)                    /*!< TIMER41 CR: CNTSHEN (Bit 19)                          */
#define TIMER41_CR_CNTSHEN_Msk            (0x80000UL)               /*!< TIMER41 CR: CNTSHEN (Bitfield-Mask: 0x01)             */
#define TIMER41_CR_CNTSH_Pos              (16UL)                    /*!< TIMER41 CR: CNTSH (Bit 16)                            */
#define TIMER41_CR_CNTSH_Msk              (0x30000UL)               /*!< TIMER41 CR: CNTSH (Bitfield-Mask: 0x03)               */
#define TIMER41_CR_T4nEN_Pos              (15UL)                    /*!< TIMER41 CR: T4nEN (Bit 15)                            */
#define TIMER41_CR_T4nEN_Msk              (0x8000UL)                /*!< TIMER41 CR: T4nEN (Bitfield-Mask: 0x01)               */
#define TIMER41_CR_T4nCLK_Pos             (14UL)                    /*!< TIMER41 CR: T4nCLK (Bit 14)                           */
#define TIMER41_CR_T4nCLK_Msk             (0x4000UL)                /*!< TIMER41 CR: T4nCLK (Bitfield-Mask: 0x01)              */
#define TIMER41_CR_T4nMS_Pos              (12UL)                    /*!< TIMER41 CR: T4nMS (Bit 12)                            */
#define TIMER41_CR_T4nMS_Msk              (0x3000UL)                /*!< TIMER41 CR: T4nMS (Bitfield-Mask: 0x03)               */
#define TIMER41_CR_T4nECE_Pos             (11UL)                    /*!< TIMER41 CR: T4nECE (Bit 11)                           */
#define TIMER41_CR_T4nECE_Msk             (0x800UL)                 /*!< TIMER41 CR: T4nECE (Bitfield-Mask: 0x01)              */
#define TIMER41_CR_T4nOPAIR_Pos           (10UL)                    /*!< TIMER41 CR: T4nOPAIR (Bit 10)                         */
#define TIMER41_CR_T4nOPAIR_Msk           (0x400UL)                 /*!< TIMER41 CR: T4nOPAIR (Bitfield-Mask: 0x01)            */
#define TIMER41_CR_DLYEN_Pos              (9UL)                     /*!< TIMER41 CR: DLYEN (Bit 9)                             */
#define TIMER41_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER41 CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER41_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER41 CR: DLYPOS (Bit 8)                            */
#define TIMER41_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER41 CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER41_CR_UPDT_Pos               (6UL)                     /*!< TIMER41 CR: UPDT (Bit 6)                              */
#define TIMER41_CR_UPDT_Msk               (0xc0UL)                  /*!< TIMER41 CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER41_CR_T4nINPOL_Pos           (4UL)                     /*!< TIMER41 CR: T4nINPOL (Bit 4)                          */
#define TIMER41_CR_T4nINPOL_Msk           (0x30UL)                  /*!< TIMER41 CR: T4nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER41_CR_T4nPAU_Pos             (1UL)                     /*!< TIMER41 CR: T4nPAU (Bit 1)                            */
#define TIMER41_CR_T4nPAU_Msk             (0x2UL)                   /*!< TIMER41 CR: T4nPAU (Bitfield-Mask: 0x01)              */
#define TIMER41_CR_T4nCLR_Pos             (0UL)                     /*!< TIMER41 CR: T4nCLR (Bit 0)                            */
#define TIMER41_CR_T4nCLR_Msk             (0x1UL)                   /*!< TIMER41 CR: T4nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER41_PDR_PDATA_Pos             (0UL)                     /*!< TIMER41 PDR: PDATA (Bit 0)                            */
#define TIMER41_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER41 PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER41_ADR_ADATA_Pos             (0UL)                     /*!< TIMER41 ADR: ADATA (Bit 0)                            */
#define TIMER41_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER41 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER41_BDR_BDATA_Pos             (0UL)                     /*!< TIMER41 BDR: BDATA (Bit 0)                            */
#define TIMER41_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER41 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER41_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER41 CAPDR: CAPD (Bit 0)                           */
#define TIMER41_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER41 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER41_PREDR_PRED_Pos            (0UL)                     /*!< TIMER41 PREDR: PRED (Bit 0)                           */
#define TIMER41_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER41 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER41_CNT_CNT_Pos               (0UL)                     /*!< TIMER41 CNT: CNT (Bit 0)                              */
#define TIMER41_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER41 CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER41_OUTCR_POLB_Pos            (9UL)                     /*!< TIMER41 OUTCR: POLB (Bit 9)                           */
#define TIMER41_OUTCR_POLB_Msk            (0x200UL)                 /*!< TIMER41 OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER41_OUTCR_POLA_Pos            (8UL)                     /*!< TIMER41 OUTCR: POLA (Bit 8)                           */
#define TIMER41_OUTCR_POLA_Msk            (0x100UL)                 /*!< TIMER41 OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER41_OUTCR_T4nBOE_Pos          (5UL)                     /*!< TIMER41 OUTCR: T4nBOE (Bit 5)                         */
#define TIMER41_OUTCR_T4nBOE_Msk          (0x20UL)                  /*!< TIMER41 OUTCR: T4nBOE (Bitfield-Mask: 0x01)           */
#define TIMER41_OUTCR_T4nAOE_Pos          (4UL)                     /*!< TIMER41 OUTCR: T4nAOE (Bit 4)                         */
#define TIMER41_OUTCR_T4nAOE_Msk          (0x10UL)                  /*!< TIMER41 OUTCR: T4nAOE (Bitfield-Mask: 0x01)           */
#define TIMER41_OUTCR_LVLB_Pos            (1UL)                     /*!< TIMER41 OUTCR: LVLB (Bit 1)                           */
#define TIMER41_OUTCR_LVLB_Msk            (0x2UL)                   /*!< TIMER41 OUTCR: LVLB (Bitfield-Mask: 0x01)             */
#define TIMER41_OUTCR_LVLA_Pos            (0UL)                     /*!< TIMER41 OUTCR: LVLA (Bit 0)                           */
#define TIMER41_OUTCR_LVLA_Msk            (0x1UL)                   /*!< TIMER41 OUTCR: LVLA (Bitfield-Mask: 0x01)             */
/* ==========================================================  DLY  ========================================================== */
#define TIMER41_DLY_DLY_Pos               (0UL)                     /*!< TIMER41 DLY: DLY (Bit 0)                              */
#define TIMER41_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER41 DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER41_INTCR_T4nFRCIEN_Pos       (11UL)                    /*!< TIMER41 INTCR: T4nFRCIEN (Bit 11)                     */
#define TIMER41_INTCR_T4nFRCIEN_Msk       (0x800UL)                 /*!< TIMER41 INTCR: T4nFRCIEN (Bitfield-Mask: 0x01)        */
#define TIMER41_INTCR_T4nCIEN_Pos         (10UL)                    /*!< TIMER41 INTCR: T4nCIEN (Bit 10)                       */
#define TIMER41_INTCR_T4nCIEN_Msk         (0x400UL)                 /*!< TIMER41 INTCR: T4nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER41_INTCR_T4nBTIEN_Pos        (9UL)                     /*!< TIMER41 INTCR: T4nBTIEN (Bit 9)                       */
#define TIMER41_INTCR_T4nBTIEN_Msk        (0x200UL)                 /*!< TIMER41 INTCR: T4nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER41_INTCR_T4nPMIEN_Pos        (8UL)                     /*!< TIMER41 INTCR: T4nPMIEN (Bit 8)                       */
#define TIMER41_INTCR_T4nPMIEN_Msk        (0x100UL)                 /*!< TIMER41 INTCR: T4nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER41_INTCR_T4nBMIEN_Pos        (2UL)                     /*!< TIMER41 INTCR: T4nBMIEN (Bit 2)                       */
#define TIMER41_INTCR_T4nBMIEN_Msk        (0xcUL)                   /*!< TIMER41 INTCR: T4nBMIEN (Bitfield-Mask: 0x03)         */
#define TIMER41_INTCR_T4nAMIEN_Pos        (0UL)                     /*!< TIMER41 INTCR: T4nAMIEN (Bit 0)                       */
#define TIMER41_INTCR_T4nAMIEN_Msk        (0x3UL)                   /*!< TIMER41 INTCR: T4nAMIEN (Bitfield-Mask: 0x03)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER41_INTFLAG_T4nFRCIFLAG_Pos   (7UL)                     /*!< TIMER41 INTFLAG: T4nFRCIFLAG (Bit 7)                  */
#define TIMER41_INTFLAG_T4nFRCIFLAG_Msk   (0x80UL)                  /*!< TIMER41 INTFLAG: T4nFRCIFLAG (Bitfield-Mask: 0x01)    */
#define TIMER41_INTFLAG_T4nCIFLAG_Pos     (6UL)                     /*!< TIMER41 INTFLAG: T4nCIFLAG (Bit 6)                    */
#define TIMER41_INTFLAG_T4nCIFLAG_Msk     (0x40UL)                  /*!< TIMER41 INTFLAG: T4nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER41_INTFLAG_T4nBTIFLAG_Pos    (5UL)                     /*!< TIMER41 INTFLAG: T4nBTIFLAG (Bit 5)                   */
#define TIMER41_INTFLAG_T4nBTIFLAG_Msk    (0x20UL)                  /*!< TIMER41 INTFLAG: T4nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER41_INTFLAG_T4nPMIFLAG_Pos    (4UL)                     /*!< TIMER41 INTFLAG: T4nPMIFLAG (Bit 4)                   */
#define TIMER41_INTFLAG_T4nPMIFLAG_Msk    (0x10UL)                  /*!< TIMER41 INTFLAG: T4nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER41_INTFLAG_T4nBMIFLAG_Pos    (1UL)                     /*!< TIMER41 INTFLAG: T4nBMIFLAG (Bit 1)                   */
#define TIMER41_INTFLAG_T4nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER41 INTFLAG: T4nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER41_INTFLAG_T4nAMIFLAG_Pos    (0UL)                     /*!< TIMER41 INTFLAG: T4nAMIFLAG (Bit 0)                   */
#define TIMER41_INTFLAG_T4nAMIFLAG_Msk    (0x1UL)                   /*!< TIMER41 INTFLAG: T4nAMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER41_ADTCR_T4nBTTG_Pos         (9UL)                     /*!< TIMER41 ADTCR: T4nBTTG (Bit 9)                        */
#define TIMER41_ADTCR_T4nBTTG_Msk         (0x200UL)                 /*!< TIMER41 ADTCR: T4nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER41_ADTCR_T4nPMTG_Pos         (8UL)                     /*!< TIMER41 ADTCR: T4nPMTG (Bit 8)                        */
#define TIMER41_ADTCR_T4nPMTG_Msk         (0x100UL)                 /*!< TIMER41 ADTCR: T4nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER41_ADTCR_T4nBMTG_Pos         (2UL)                     /*!< TIMER41 ADTCR: T4nBMTG (Bit 2)                        */
#define TIMER41_ADTCR_T4nBMTG_Msk         (0xcUL)                   /*!< TIMER41 ADTCR: T4nBMTG (Bitfield-Mask: 0x03)          */
#define TIMER41_ADTCR_T4nAMTG_Pos         (0UL)                     /*!< TIMER41 ADTCR: T4nAMTG (Bit 0)                        */
#define TIMER41_ADTCR_T4nAMTG_Msk         (0x3UL)                   /*!< TIMER41 ADTCR: T4nAMTG (Bitfield-Mask: 0x03)          */


/* =========================================================================================================================== */
/* ================                                          TIMER42                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER42_CR_T4nFRCEN_Pos           (23UL)                    /*!< TIMER42 CR: T4nFRCEN (Bit 23)                         */
#define TIMER42_CR_T4nFRCEN_Msk           (0x800000UL)              /*!< TIMER42 CR: T4nFRCEN (Bitfield-Mask: 0x01)            */
#define TIMER42_CR_T4nFRCS_Pos            (20UL)                    /*!< TIMER42 CR: T4nFRCS (Bit 20)                          */
#define TIMER42_CR_T4nFRCS_Msk            (0x300000UL)              /*!< TIMER42 CR: T4nFRCS (Bitfield-Mask: 0x03)             */
#define TIMER42_CR_CNTSHEN_Pos            (19UL)                    /*!< TIMER42 CR: CNTSHEN (Bit 19)                          */
#define TIMER42_CR_CNTSHEN_Msk            (0x80000UL)               /*!< TIMER42 CR: CNTSHEN (Bitfield-Mask: 0x01)             */
#define TIMER42_CR_CNTSH_Pos              (16UL)                    /*!< TIMER42 CR: CNTSH (Bit 16)                            */
#define TIMER42_CR_CNTSH_Msk              (0x30000UL)               /*!< TIMER42 CR: CNTSH (Bitfield-Mask: 0x03)               */
#define TIMER42_CR_T4nEN_Pos              (15UL)                    /*!< TIMER42 CR: T4nEN (Bit 15)                            */
#define TIMER42_CR_T4nEN_Msk              (0x8000UL)                /*!< TIMER42 CR: T4nEN (Bitfield-Mask: 0x01)               */
#define TIMER42_CR_T4nCLK_Pos             (14UL)                    /*!< TIMER42 CR: T4nCLK (Bit 14)                           */
#define TIMER42_CR_T4nCLK_Msk             (0x4000UL)                /*!< TIMER42 CR: T4nCLK (Bitfield-Mask: 0x01)              */
#define TIMER42_CR_T4nMS_Pos              (12UL)                    /*!< TIMER42 CR: T4nMS (Bit 12)                            */
#define TIMER42_CR_T4nMS_Msk              (0x3000UL)                /*!< TIMER42 CR: T4nMS (Bitfield-Mask: 0x03)               */
#define TIMER42_CR_T4nECE_Pos             (11UL)                    /*!< TIMER42 CR: T4nECE (Bit 11)                           */
#define TIMER42_CR_T4nECE_Msk             (0x800UL)                 /*!< TIMER42 CR: T4nECE (Bitfield-Mask: 0x01)              */
#define TIMER42_CR_T4nOPAIR_Pos           (10UL)                    /*!< TIMER42 CR: T4nOPAIR (Bit 10)                         */
#define TIMER42_CR_T4nOPAIR_Msk           (0x400UL)                 /*!< TIMER42 CR: T4nOPAIR (Bitfield-Mask: 0x01)            */
#define TIMER42_CR_DLYEN_Pos              (9UL)                     /*!< TIMER42 CR: DLYEN (Bit 9)                             */
#define TIMER42_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER42 CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER42_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER42 CR: DLYPOS (Bit 8)                            */
#define TIMER42_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER42 CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER42_CR_UPDT_Pos               (6UL)                     /*!< TIMER42 CR: UPDT (Bit 6)                              */
#define TIMER42_CR_UPDT_Msk               (0xc0UL)                  /*!< TIMER42 CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER42_CR_T4nINPOL_Pos           (4UL)                     /*!< TIMER42 CR: T4nINPOL (Bit 4)                          */
#define TIMER42_CR_T4nINPOL_Msk           (0x30UL)                  /*!< TIMER42 CR: T4nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER42_CR_T4nPAU_Pos             (1UL)                     /*!< TIMER42 CR: T4nPAU (Bit 1)                            */
#define TIMER42_CR_T4nPAU_Msk             (0x2UL)                   /*!< TIMER42 CR: T4nPAU (Bitfield-Mask: 0x01)              */
#define TIMER42_CR_T4nCLR_Pos             (0UL)                     /*!< TIMER42 CR: T4nCLR (Bit 0)                            */
#define TIMER42_CR_T4nCLR_Msk             (0x1UL)                   /*!< TIMER42 CR: T4nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER42_PDR_PDATA_Pos             (0UL)                     /*!< TIMER42 PDR: PDATA (Bit 0)                            */
#define TIMER42_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER42 PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER42_ADR_ADATA_Pos             (0UL)                     /*!< TIMER42 ADR: ADATA (Bit 0)                            */
#define TIMER42_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER42 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER42_BDR_BDATA_Pos             (0UL)                     /*!< TIMER42 BDR: BDATA (Bit 0)                            */
#define TIMER42_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER42 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER42_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER42 CAPDR: CAPD (Bit 0)                           */
#define TIMER42_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER42 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER42_PREDR_PRED_Pos            (0UL)                     /*!< TIMER42 PREDR: PRED (Bit 0)                           */
#define TIMER42_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER42 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER42_CNT_CNT_Pos               (0UL)                     /*!< TIMER42 CNT: CNT (Bit 0)                              */
#define TIMER42_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER42 CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER42_OUTCR_POLB_Pos            (9UL)                     /*!< TIMER42 OUTCR: POLB (Bit 9)                           */
#define TIMER42_OUTCR_POLB_Msk            (0x200UL)                 /*!< TIMER42 OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER42_OUTCR_POLA_Pos            (8UL)                     /*!< TIMER42 OUTCR: POLA (Bit 8)                           */
#define TIMER42_OUTCR_POLA_Msk            (0x100UL)                 /*!< TIMER42 OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER42_OUTCR_T4nBOE_Pos          (5UL)                     /*!< TIMER42 OUTCR: T4nBOE (Bit 5)                         */
#define TIMER42_OUTCR_T4nBOE_Msk          (0x20UL)                  /*!< TIMER42 OUTCR: T4nBOE (Bitfield-Mask: 0x01)           */
#define TIMER42_OUTCR_T4nAOE_Pos          (4UL)                     /*!< TIMER42 OUTCR: T4nAOE (Bit 4)                         */
#define TIMER42_OUTCR_T4nAOE_Msk          (0x10UL)                  /*!< TIMER42 OUTCR: T4nAOE (Bitfield-Mask: 0x01)           */
#define TIMER42_OUTCR_LVLB_Pos            (1UL)                     /*!< TIMER42 OUTCR: LVLB (Bit 1)                           */
#define TIMER42_OUTCR_LVLB_Msk            (0x2UL)                   /*!< TIMER42 OUTCR: LVLB (Bitfield-Mask: 0x01)             */
#define TIMER42_OUTCR_LVLA_Pos            (0UL)                     /*!< TIMER42 OUTCR: LVLA (Bit 0)                           */
#define TIMER42_OUTCR_LVLA_Msk            (0x1UL)                   /*!< TIMER42 OUTCR: LVLA (Bitfield-Mask: 0x01)             */
/* ==========================================================  DLY  ========================================================== */
#define TIMER42_DLY_DLY_Pos               (0UL)                     /*!< TIMER42 DLY: DLY (Bit 0)                              */
#define TIMER42_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER42 DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER42_INTCR_T4nFRCIEN_Pos       (11UL)                    /*!< TIMER42 INTCR: T4nFRCIEN (Bit 11)                     */
#define TIMER42_INTCR_T4nFRCIEN_Msk       (0x800UL)                 /*!< TIMER42 INTCR: T4nFRCIEN (Bitfield-Mask: 0x01)        */
#define TIMER42_INTCR_T4nCIEN_Pos         (10UL)                    /*!< TIMER42 INTCR: T4nCIEN (Bit 10)                       */
#define TIMER42_INTCR_T4nCIEN_Msk         (0x400UL)                 /*!< TIMER42 INTCR: T4nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER42_INTCR_T4nBTIEN_Pos        (9UL)                     /*!< TIMER42 INTCR: T4nBTIEN (Bit 9)                       */
#define TIMER42_INTCR_T4nBTIEN_Msk        (0x200UL)                 /*!< TIMER42 INTCR: T4nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER42_INTCR_T4nPMIEN_Pos        (8UL)                     /*!< TIMER42 INTCR: T4nPMIEN (Bit 8)                       */
#define TIMER42_INTCR_T4nPMIEN_Msk        (0x100UL)                 /*!< TIMER42 INTCR: T4nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER42_INTCR_T4nBMIEN_Pos        (2UL)                     /*!< TIMER42 INTCR: T4nBMIEN (Bit 2)                       */
#define TIMER42_INTCR_T4nBMIEN_Msk        (0xcUL)                   /*!< TIMER42 INTCR: T4nBMIEN (Bitfield-Mask: 0x03)         */
#define TIMER42_INTCR_T4nAMIEN_Pos        (0UL)                     /*!< TIMER42 INTCR: T4nAMIEN (Bit 0)                       */
#define TIMER42_INTCR_T4nAMIEN_Msk        (0x3UL)                   /*!< TIMER42 INTCR: T4nAMIEN (Bitfield-Mask: 0x03)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER42_INTFLAG_T4nFRCIFLAG_Pos   (7UL)                     /*!< TIMER42 INTFLAG: T4nFRCIFLAG (Bit 7)                  */
#define TIMER42_INTFLAG_T4nFRCIFLAG_Msk   (0x80UL)                  /*!< TIMER42 INTFLAG: T4nFRCIFLAG (Bitfield-Mask: 0x01)    */
#define TIMER42_INTFLAG_T4nCIFLAG_Pos     (6UL)                     /*!< TIMER42 INTFLAG: T4nCIFLAG (Bit 6)                    */
#define TIMER42_INTFLAG_T4nCIFLAG_Msk     (0x40UL)                  /*!< TIMER42 INTFLAG: T4nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER42_INTFLAG_T4nBTIFLAG_Pos    (5UL)                     /*!< TIMER42 INTFLAG: T4nBTIFLAG (Bit 5)                   */
#define TIMER42_INTFLAG_T4nBTIFLAG_Msk    (0x20UL)                  /*!< TIMER42 INTFLAG: T4nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER42_INTFLAG_T4nPMIFLAG_Pos    (4UL)                     /*!< TIMER42 INTFLAG: T4nPMIFLAG (Bit 4)                   */
#define TIMER42_INTFLAG_T4nPMIFLAG_Msk    (0x10UL)                  /*!< TIMER42 INTFLAG: T4nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER42_INTFLAG_T4nBMIFLAG_Pos    (1UL)                     /*!< TIMER42 INTFLAG: T4nBMIFLAG (Bit 1)                   */
#define TIMER42_INTFLAG_T4nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER42 INTFLAG: T4nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER42_INTFLAG_T4nAMIFLAG_Pos    (0UL)                     /*!< TIMER42 INTFLAG: T4nAMIFLAG (Bit 0)                   */
#define TIMER42_INTFLAG_T4nAMIFLAG_Msk    (0x1UL)                   /*!< TIMER42 INTFLAG: T4nAMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER42_ADTCR_T4nBTTG_Pos         (9UL)                     /*!< TIMER42 ADTCR: T4nBTTG (Bit 9)                        */
#define TIMER42_ADTCR_T4nBTTG_Msk         (0x200UL)                 /*!< TIMER42 ADTCR: T4nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER42_ADTCR_T4nPMTG_Pos         (8UL)                     /*!< TIMER42 ADTCR: T4nPMTG (Bit 8)                        */
#define TIMER42_ADTCR_T4nPMTG_Msk         (0x100UL)                 /*!< TIMER42 ADTCR: T4nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER42_ADTCR_T4nBMTG_Pos         (2UL)                     /*!< TIMER42 ADTCR: T4nBMTG (Bit 2)                        */
#define TIMER42_ADTCR_T4nBMTG_Msk         (0xcUL)                   /*!< TIMER42 ADTCR: T4nBMTG (Bitfield-Mask: 0x03)          */
#define TIMER42_ADTCR_T4nAMTG_Pos         (0UL)                     /*!< TIMER42 ADTCR: T4nAMTG (Bit 0)                        */
#define TIMER42_ADTCR_T4nAMTG_Msk         (0x3UL)                   /*!< TIMER42 ADTCR: T4nAMTG (Bitfield-Mask: 0x03)          */


/* =========================================================================================================================== */
/* ================                                          TIMER43                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER43_CR_T4nFRCEN_Pos           (23UL)                    /*!< TIMER43 CR: T4nFRCEN (Bit 23)                         */
#define TIMER43_CR_T4nFRCEN_Msk           (0x800000UL)              /*!< TIMER43 CR: T4nFRCEN (Bitfield-Mask: 0x01)            */
#define TIMER43_CR_T4nFRCS_Pos            (20UL)                    /*!< TIMER43 CR: T4nFRCS (Bit 20)                          */
#define TIMER43_CR_T4nFRCS_Msk            (0x300000UL)              /*!< TIMER43 CR: T4nFRCS (Bitfield-Mask: 0x03)             */
#define TIMER43_CR_CNTSHEN_Pos            (19UL)                    /*!< TIMER43 CR: CNTSHEN (Bit 19)                          */
#define TIMER43_CR_CNTSHEN_Msk            (0x80000UL)               /*!< TIMER43 CR: CNTSHEN (Bitfield-Mask: 0x01)             */
#define TIMER43_CR_CNTSH_Pos              (16UL)                    /*!< TIMER43 CR: CNTSH (Bit 16)                            */
#define TIMER43_CR_CNTSH_Msk              (0x30000UL)               /*!< TIMER43 CR: CNTSH (Bitfield-Mask: 0x03)               */
#define TIMER43_CR_T4nEN_Pos              (15UL)                    /*!< TIMER43 CR: T4nEN (Bit 15)                            */
#define TIMER43_CR_T4nEN_Msk              (0x8000UL)                /*!< TIMER43 CR: T4nEN (Bitfield-Mask: 0x01)               */
#define TIMER43_CR_T4nCLK_Pos             (14UL)                    /*!< TIMER43 CR: T4nCLK (Bit 14)                           */
#define TIMER43_CR_T4nCLK_Msk             (0x4000UL)                /*!< TIMER43 CR: T4nCLK (Bitfield-Mask: 0x01)              */
#define TIMER43_CR_T4nMS_Pos              (12UL)                    /*!< TIMER43 CR: T4nMS (Bit 12)                            */
#define TIMER43_CR_T4nMS_Msk              (0x3000UL)                /*!< TIMER43 CR: T4nMS (Bitfield-Mask: 0x03)               */
#define TIMER43_CR_T4nECE_Pos             (11UL)                    /*!< TIMER43 CR: T4nECE (Bit 11)                           */
#define TIMER43_CR_T4nECE_Msk             (0x800UL)                 /*!< TIMER43 CR: T4nECE (Bitfield-Mask: 0x01)              */
#define TIMER43_CR_T4nOPAIR_Pos           (10UL)                    /*!< TIMER43 CR: T4nOPAIR (Bit 10)                         */
#define TIMER43_CR_T4nOPAIR_Msk           (0x400UL)                 /*!< TIMER43 CR: T4nOPAIR (Bitfield-Mask: 0x01)            */
#define TIMER43_CR_DLYEN_Pos              (9UL)                     /*!< TIMER43 CR: DLYEN (Bit 9)                             */
#define TIMER43_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER43 CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER43_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER43 CR: DLYPOS (Bit 8)                            */
#define TIMER43_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER43 CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER43_CR_UPDT_Pos               (6UL)                     /*!< TIMER43 CR: UPDT (Bit 6)                              */
#define TIMER43_CR_UPDT_Msk               (0xc0UL)                  /*!< TIMER43 CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER43_CR_T4nINPOL_Pos           (4UL)                     /*!< TIMER43 CR: T4nINPOL (Bit 4)                          */
#define TIMER43_CR_T4nINPOL_Msk           (0x30UL)                  /*!< TIMER43 CR: T4nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER43_CR_T4nPAU_Pos             (1UL)                     /*!< TIMER43 CR: T4nPAU (Bit 1)                            */
#define TIMER43_CR_T4nPAU_Msk             (0x2UL)                   /*!< TIMER43 CR: T4nPAU (Bitfield-Mask: 0x01)              */
#define TIMER43_CR_T4nCLR_Pos             (0UL)                     /*!< TIMER43 CR: T4nCLR (Bit 0)                            */
#define TIMER43_CR_T4nCLR_Msk             (0x1UL)                   /*!< TIMER43 CR: T4nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER43_PDR_PDATA_Pos             (0UL)                     /*!< TIMER43 PDR: PDATA (Bit 0)                            */
#define TIMER43_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER43 PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER43_ADR_ADATA_Pos             (0UL)                     /*!< TIMER43 ADR: ADATA (Bit 0)                            */
#define TIMER43_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER43 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER43_BDR_BDATA_Pos             (0UL)                     /*!< TIMER43 BDR: BDATA (Bit 0)                            */
#define TIMER43_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER43 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER43_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER43 CAPDR: CAPD (Bit 0)                           */
#define TIMER43_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER43 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER43_PREDR_PRED_Pos            (0UL)                     /*!< TIMER43 PREDR: PRED (Bit 0)                           */
#define TIMER43_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER43 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER43_CNT_CNT_Pos               (0UL)                     /*!< TIMER43 CNT: CNT (Bit 0)                              */
#define TIMER43_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER43 CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER43_OUTCR_POLB_Pos            (9UL)                     /*!< TIMER43 OUTCR: POLB (Bit 9)                           */
#define TIMER43_OUTCR_POLB_Msk            (0x200UL)                 /*!< TIMER43 OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER43_OUTCR_POLA_Pos            (8UL)                     /*!< TIMER43 OUTCR: POLA (Bit 8)                           */
#define TIMER43_OUTCR_POLA_Msk            (0x100UL)                 /*!< TIMER43 OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER43_OUTCR_T4nBOE_Pos          (5UL)                     /*!< TIMER43 OUTCR: T4nBOE (Bit 5)                         */
#define TIMER43_OUTCR_T4nBOE_Msk          (0x20UL)                  /*!< TIMER43 OUTCR: T4nBOE (Bitfield-Mask: 0x01)           */
#define TIMER43_OUTCR_T4nAOE_Pos          (4UL)                     /*!< TIMER43 OUTCR: T4nAOE (Bit 4)                         */
#define TIMER43_OUTCR_T4nAOE_Msk          (0x10UL)                  /*!< TIMER43 OUTCR: T4nAOE (Bitfield-Mask: 0x01)           */
#define TIMER43_OUTCR_LVLB_Pos            (1UL)                     /*!< TIMER43 OUTCR: LVLB (Bit 1)                           */
#define TIMER43_OUTCR_LVLB_Msk            (0x2UL)                   /*!< TIMER43 OUTCR: LVLB (Bitfield-Mask: 0x01)             */
#define TIMER43_OUTCR_LVLA_Pos            (0UL)                     /*!< TIMER43 OUTCR: LVLA (Bit 0)                           */
#define TIMER43_OUTCR_LVLA_Msk            (0x1UL)                   /*!< TIMER43 OUTCR: LVLA (Bitfield-Mask: 0x01)             */
/* ==========================================================  DLY  ========================================================== */
#define TIMER43_DLY_DLY_Pos               (0UL)                     /*!< TIMER43 DLY: DLY (Bit 0)                              */
#define TIMER43_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER43 DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER43_INTCR_T4nFRCIEN_Pos       (11UL)                    /*!< TIMER43 INTCR: T4nFRCIEN (Bit 11)                     */
#define TIMER43_INTCR_T4nFRCIEN_Msk       (0x800UL)                 /*!< TIMER43 INTCR: T4nFRCIEN (Bitfield-Mask: 0x01)        */
#define TIMER43_INTCR_T4nCIEN_Pos         (10UL)                    /*!< TIMER43 INTCR: T4nCIEN (Bit 10)                       */
#define TIMER43_INTCR_T4nCIEN_Msk         (0x400UL)                 /*!< TIMER43 INTCR: T4nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER43_INTCR_T4nBTIEN_Pos        (9UL)                     /*!< TIMER43 INTCR: T4nBTIEN (Bit 9)                       */
#define TIMER43_INTCR_T4nBTIEN_Msk        (0x200UL)                 /*!< TIMER43 INTCR: T4nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER43_INTCR_T4nPMIEN_Pos        (8UL)                     /*!< TIMER43 INTCR: T4nPMIEN (Bit 8)                       */
#define TIMER43_INTCR_T4nPMIEN_Msk        (0x100UL)                 /*!< TIMER43 INTCR: T4nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER43_INTCR_T4nBMIEN_Pos        (2UL)                     /*!< TIMER43 INTCR: T4nBMIEN (Bit 2)                       */
#define TIMER43_INTCR_T4nBMIEN_Msk        (0xcUL)                   /*!< TIMER43 INTCR: T4nBMIEN (Bitfield-Mask: 0x03)         */
#define TIMER43_INTCR_T4nAMIEN_Pos        (0UL)                     /*!< TIMER43 INTCR: T4nAMIEN (Bit 0)                       */
#define TIMER43_INTCR_T4nAMIEN_Msk        (0x3UL)                   /*!< TIMER43 INTCR: T4nAMIEN (Bitfield-Mask: 0x03)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER43_INTFLAG_T4nFRCIFLAG_Pos   (7UL)                     /*!< TIMER43 INTFLAG: T4nFRCIFLAG (Bit 7)                  */
#define TIMER43_INTFLAG_T4nFRCIFLAG_Msk   (0x80UL)                  /*!< TIMER43 INTFLAG: T4nFRCIFLAG (Bitfield-Mask: 0x01)    */
#define TIMER43_INTFLAG_T4nCIFLAG_Pos     (6UL)                     /*!< TIMER43 INTFLAG: T4nCIFLAG (Bit 6)                    */
#define TIMER43_INTFLAG_T4nCIFLAG_Msk     (0x40UL)                  /*!< TIMER43 INTFLAG: T4nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER43_INTFLAG_T4nBTIFLAG_Pos    (5UL)                     /*!< TIMER43 INTFLAG: T4nBTIFLAG (Bit 5)                   */
#define TIMER43_INTFLAG_T4nBTIFLAG_Msk    (0x20UL)                  /*!< TIMER43 INTFLAG: T4nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER43_INTFLAG_T4nPMIFLAG_Pos    (4UL)                     /*!< TIMER43 INTFLAG: T4nPMIFLAG (Bit 4)                   */
#define TIMER43_INTFLAG_T4nPMIFLAG_Msk    (0x10UL)                  /*!< TIMER43 INTFLAG: T4nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER43_INTFLAG_T4nBMIFLAG_Pos    (1UL)                     /*!< TIMER43 INTFLAG: T4nBMIFLAG (Bit 1)                   */
#define TIMER43_INTFLAG_T4nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER43 INTFLAG: T4nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER43_INTFLAG_T4nAMIFLAG_Pos    (0UL)                     /*!< TIMER43 INTFLAG: T4nAMIFLAG (Bit 0)                   */
#define TIMER43_INTFLAG_T4nAMIFLAG_Msk    (0x1UL)                   /*!< TIMER43 INTFLAG: T4nAMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER43_ADTCR_T4nBTTG_Pos         (9UL)                     /*!< TIMER43 ADTCR: T4nBTTG (Bit 9)                        */
#define TIMER43_ADTCR_T4nBTTG_Msk         (0x200UL)                 /*!< TIMER43 ADTCR: T4nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER43_ADTCR_T4nPMTG_Pos         (8UL)                     /*!< TIMER43 ADTCR: T4nPMTG (Bit 8)                        */
#define TIMER43_ADTCR_T4nPMTG_Msk         (0x100UL)                 /*!< TIMER43 ADTCR: T4nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER43_ADTCR_T4nBMTG_Pos         (2UL)                     /*!< TIMER43 ADTCR: T4nBMTG (Bit 2)                        */
#define TIMER43_ADTCR_T4nBMTG_Msk         (0xcUL)                   /*!< TIMER43 ADTCR: T4nBMTG (Bitfield-Mask: 0x03)          */
#define TIMER43_ADTCR_T4nAMTG_Pos         (0UL)                     /*!< TIMER43 ADTCR: T4nAMTG (Bit 0)                        */
#define TIMER43_ADTCR_T4nAMTG_Msk         (0x3UL)                   /*!< TIMER43 ADTCR: T4nAMTG (Bitfield-Mask: 0x03)          */


/* =========================================================================================================================== */
/* ================                                          TIMER5n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER5n_CR_T5nCLEN_Pos            (20UL)                    /*!< TIMER5n CR: T5nCLEN (Bit 20)                          */
#define TIMER5n_CR_T5nCLEN_Msk            (0x100000UL)              /*!< TIMER5n CR: T5nCLEN (Bitfield-Mask: 0x01)             */
#define TIMER5n_CR_T5nINSEL_Pos           (18UL)                    /*!< TIMER5n CR: T5nINSEL (Bit 18)                         */
#define TIMER5n_CR_T5nINSEL_Msk           (0xc0000UL)               /*!< TIMER5n CR: T5nINSEL (Bitfield-Mask: 0x03)            */
#define TIMER5n_CR_T5nINPOL_Pos           (16UL)                    /*!< TIMER5n CR: T5nINPOL (Bit 16)                         */
#define TIMER5n_CR_T5nINPOL_Msk           (0x30000UL)               /*!< TIMER5n CR: T5nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER5n_CR_T5nEN_Pos              (15UL)                    /*!< TIMER5n CR: T5nEN (Bit 15)                            */
#define TIMER5n_CR_T5nEN_Msk              (0x8000UL)                /*!< TIMER5n CR: T5nEN (Bitfield-Mask: 0x01)               */
#define TIMER5n_CR_T5nCLK_Pos             (14UL)                    /*!< TIMER5n CR: T5nCLK (Bit 14)                           */
#define TIMER5n_CR_T5nCLK_Msk             (0x4000UL)                /*!< TIMER5n CR: T5nCLK (Bitfield-Mask: 0x01)              */
#define TIMER5n_CR_T5nMS_Pos              (12UL)                    /*!< TIMER5n CR: T5nMS (Bit 12)                            */
#define TIMER5n_CR_T5nMS_Msk              (0x3000UL)                /*!< TIMER5n CR: T5nMS (Bitfield-Mask: 0x03)               */
#define TIMER5n_CR_T5nECE_Pos             (11UL)                    /*!< TIMER5n CR: T5nECE (Bit 11)                           */
#define TIMER5n_CR_T5nECE_Msk             (0x800UL)                 /*!< TIMER5n CR: T5nECE (Bitfield-Mask: 0x01)              */
#define TIMER5n_CR_T5nOPOL_Pos            (9UL)                     /*!< TIMER5n CR: T5nOPOL (Bit 9)                           */
#define TIMER5n_CR_T5nOPOL_Msk            (0x200UL)                 /*!< TIMER5n CR: T5nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER5n_CR_T5nPAU_Pos             (8UL)                     /*!< TIMER5n CR: T5nPAU (Bit 8)                            */
#define TIMER5n_CR_T5nPAU_Msk             (0x100UL)                 /*!< TIMER5n CR: T5nPAU (Bitfield-Mask: 0x01)              */
#define TIMER5n_CR_T5nMIEN_Pos            (7UL)                     /*!< TIMER5n CR: T5nMIEN (Bit 7)                           */
#define TIMER5n_CR_T5nMIEN_Msk            (0x80UL)                  /*!< TIMER5n CR: T5nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER5n_CR_T5nCIEN_Pos            (6UL)                     /*!< TIMER5n CR: T5nCIEN (Bit 6)                           */
#define TIMER5n_CR_T5nCIEN_Msk            (0x40UL)                  /*!< TIMER5n CR: T5nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER5n_CR_T5nCLIEN_Pos           (5UL)                     /*!< TIMER5n CR: T5nCLIEN (Bit 5)                          */
#define TIMER5n_CR_T5nCLIEN_Msk           (0x20UL)                  /*!< TIMER5n CR: T5nCLIEN (Bitfield-Mask: 0x01)            */
#define TIMER5n_CR_T5nMIFLAG_Pos          (3UL)                     /*!< TIMER5n CR: T5nMIFLAG (Bit 3)                         */
#define TIMER5n_CR_T5nMIFLAG_Msk          (0x8UL)                   /*!< TIMER5n CR: T5nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER5n_CR_T5nCIFLAG_Pos          (2UL)                     /*!< TIMER5n CR: T5nCIFLAG (Bit 2)                         */
#define TIMER5n_CR_T5nCIFLAG_Msk          (0x4UL)                   /*!< TIMER5n CR: T5nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER5n_CR_T5nCLIFLAG_Pos         (1UL)                     /*!< TIMER5n CR: T5nCLIFLAG (Bit 1)                        */
#define TIMER5n_CR_T5nCLIFLAG_Msk         (0x2UL)                   /*!< TIMER5n CR: T5nCLIFLAG (Bitfield-Mask: 0x01)          */
#define TIMER5n_CR_T5nCLR_Pos             (0UL)                     /*!< TIMER5n CR: T5nCLR (Bit 0)                            */
#define TIMER5n_CR_T5nCLR_Msk             (0x1UL)                   /*!< TIMER5n CR: T5nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER5n_ADR_ADATA_Pos             (0UL)                     /*!< TIMER5n ADR: ADATA (Bit 0)                            */
#define TIMER5n_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER5n ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER5n_BDR_BDATA_Pos             (0UL)                     /*!< TIMER5n BDR: BDATA (Bit 0)                            */
#define TIMER5n_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER5n BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER5n_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER5n CAPDR: CAPD (Bit 0)                           */
#define TIMER5n_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER5n CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER5n_PREDR_PRED_Pos            (0UL)                     /*!< TIMER5n PREDR: PRED (Bit 0)                           */
#define TIMER5n_PREDR_PRED_Msk            (0xffUL)                  /*!< TIMER5n PREDR: PRED (Bitfield-Mask: 0xff)             */
/* ==========================================================  CNT  ========================================================== */
#define TIMER5n_CNT_CNT_Pos               (0UL)                     /*!< TIMER5n CNT: CNT (Bit 0)                              */
#define TIMER5n_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER5n CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER50                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER50_CR_T5nCLEN_Pos            (20UL)                    /*!< TIMER50 CR: T5nCLEN (Bit 20)                          */
#define TIMER50_CR_T5nCLEN_Msk            (0x100000UL)              /*!< TIMER50 CR: T5nCLEN (Bitfield-Mask: 0x01)             */
#define TIMER50_CR_T5nINSEL_Pos           (18UL)                    /*!< TIMER50 CR: T5nINSEL (Bit 18)                         */
#define TIMER50_CR_T5nINSEL_Msk           (0xc0000UL)               /*!< TIMER50 CR: T5nINSEL (Bitfield-Mask: 0x03)            */
#define TIMER50_CR_T5nINPOL_Pos           (16UL)                    /*!< TIMER50 CR: T5nINPOL (Bit 16)                         */
#define TIMER50_CR_T5nINPOL_Msk           (0x30000UL)               /*!< TIMER50 CR: T5nINPOL (Bitfield-Mask: 0x03)            */
#define TIMER50_CR_T5nEN_Pos              (15UL)                    /*!< TIMER50 CR: T5nEN (Bit 15)                            */
#define TIMER50_CR_T5nEN_Msk              (0x8000UL)                /*!< TIMER50 CR: T5nEN (Bitfield-Mask: 0x01)               */
#define TIMER50_CR_T5nCLK_Pos             (14UL)                    /*!< TIMER50 CR: T5nCLK (Bit 14)                           */
#define TIMER50_CR_T5nCLK_Msk             (0x4000UL)                /*!< TIMER50 CR: T5nCLK (Bitfield-Mask: 0x01)              */
#define TIMER50_CR_T5nMS_Pos              (12UL)                    /*!< TIMER50 CR: T5nMS (Bit 12)                            */
#define TIMER50_CR_T5nMS_Msk              (0x3000UL)                /*!< TIMER50 CR: T5nMS (Bitfield-Mask: 0x03)               */
#define TIMER50_CR_T5nECE_Pos             (11UL)                    /*!< TIMER50 CR: T5nECE (Bit 11)                           */
#define TIMER50_CR_T5nECE_Msk             (0x800UL)                 /*!< TIMER50 CR: T5nECE (Bitfield-Mask: 0x01)              */
#define TIMER50_CR_T5nOPOL_Pos            (9UL)                     /*!< TIMER50 CR: T5nOPOL (Bit 9)                           */
#define TIMER50_CR_T5nOPOL_Msk            (0x200UL)                 /*!< TIMER50 CR: T5nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER50_CR_T5nPAU_Pos             (8UL)                     /*!< TIMER50 CR: T5nPAU (Bit 8)                            */
#define TIMER50_CR_T5nPAU_Msk             (0x100UL)                 /*!< TIMER50 CR: T5nPAU (Bitfield-Mask: 0x01)              */
#define TIMER50_CR_T5nMIEN_Pos            (7UL)                     /*!< TIMER50 CR: T5nMIEN (Bit 7)                           */
#define TIMER50_CR_T5nMIEN_Msk            (0x80UL)                  /*!< TIMER50 CR: T5nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER50_CR_T5nCIEN_Pos            (6UL)                     /*!< TIMER50 CR: T5nCIEN (Bit 6)                           */
#define TIMER50_CR_T5nCIEN_Msk            (0x40UL)                  /*!< TIMER50 CR: T5nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER50_CR_T5nCLIEN_Pos           (5UL)                     /*!< TIMER50 CR: T5nCLIEN (Bit 5)                          */
#define TIMER50_CR_T5nCLIEN_Msk           (0x20UL)                  /*!< TIMER50 CR: T5nCLIEN (Bitfield-Mask: 0x01)            */
#define TIMER50_CR_T5nMIFLAG_Pos          (3UL)                     /*!< TIMER50 CR: T5nMIFLAG (Bit 3)                         */
#define TIMER50_CR_T5nMIFLAG_Msk          (0x8UL)                   /*!< TIMER50 CR: T5nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER50_CR_T5nCIFLAG_Pos          (2UL)                     /*!< TIMER50 CR: T5nCIFLAG (Bit 2)                         */
#define TIMER50_CR_T5nCIFLAG_Msk          (0x4UL)                   /*!< TIMER50 CR: T5nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER50_CR_T5nCLIFLAG_Pos         (1UL)                     /*!< TIMER50 CR: T5nCLIFLAG (Bit 1)                        */
#define TIMER50_CR_T5nCLIFLAG_Msk         (0x2UL)                   /*!< TIMER50 CR: T5nCLIFLAG (Bitfield-Mask: 0x01)          */
#define TIMER50_CR_T5nCLR_Pos             (0UL)                     /*!< TIMER50 CR: T5nCLR (Bit 0)                            */
#define TIMER50_CR_T5nCLR_Msk             (0x1UL)                   /*!< TIMER50 CR: T5nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER50_ADR_ADATA_Pos             (0UL)                     /*!< TIMER50 ADR: ADATA (Bit 0)                            */
#define TIMER50_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER50 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER50_BDR_BDATA_Pos             (0UL)                     /*!< TIMER50 BDR: BDATA (Bit 0)                            */
#define TIMER50_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER50 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER50_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER50 CAPDR: CAPD (Bit 0)                           */
#define TIMER50_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER50 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER50_PREDR_PRED_Pos            (0UL)                     /*!< TIMER50 PREDR: PRED (Bit 0)                           */
#define TIMER50_PREDR_PRED_Msk            (0xffUL)                  /*!< TIMER50 PREDR: PRED (Bitfield-Mask: 0xff)             */
/* ==========================================================  CNT  ========================================================== */
#define TIMER50_CNT_CNT_Pos               (0UL)                     /*!< TIMER50 CNT: CNT (Bit 0)                              */
#define TIMER50_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER50 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define ADC_CR_ADCEN_Pos                  (15UL)                    /*!< ADC CR: ADCEN (Bit 15)                                */
#define ADC_CR_ADCEN_Msk                  (0x8000UL)                /*!< ADC CR: ADCEN (Bitfield-Mask: 0x01)                   */
#define ADC_CR_TRIG_Pos                   (10UL)                    /*!< ADC CR: TRIG (Bit 10)                                 */
#define ADC_CR_TRIG_Msk                   (0x1c00UL)                /*!< ADC CR: TRIG (Bitfield-Mask: 0x07)                    */
#define ADC_CR_ETRGP_Pos                  (8UL)                     /*!< ADC CR: ETRGP (Bit 8)                                 */
#define ADC_CR_ETRGP_Msk                  (0x300UL)                 /*!< ADC CR: ETRGP (Bitfield-Mask: 0x03)                   */
#define ADC_CR_ADRDY_Pos                  (7UL)                     /*!< ADC CR: ADRDY (Bit 7)                                 */
#define ADC_CR_ADRDY_Msk                  (0x80UL)                  /*!< ADC CR: ADRDY (Bitfield-Mask: 0x01)                   */
#define ADC_CR_MDSEL_Pos                  (3UL)                     /*!< ADC CR: MDSEL (Bit 3)                                 */
#define ADC_CR_MDSEL_Msk                  (0x18UL)                  /*!< ADC CR: MDSEL (Bitfield-Mask: 0x03)                   */
#define ADC_CR_ADST_Pos                   (0UL)                     /*!< ADC CR: ADST (Bit 0)                                  */
#define ADC_CR_ADST_Msk                   (0x1UL)                   /*!< ADC CR: ADST (Bitfield-Mask: 0x01)                    */
/* =========================================================  OVSCR  ========================================================= */
#define ADC_OVSCR_OVSMPEN_Pos             (15UL)                    /*!< ADC OVSCR: OVSMPEN (Bit 15)                           */
#define ADC_OVSCR_OVSMPEN_Msk             (0x8000UL)                /*!< ADC OVSCR: OVSMPEN (Bitfield-Mask: 0x01)              */
#define ADC_OVSCR_OVSMPR_Pos              (5UL)                     /*!< ADC OVSCR: OVSMPR (Bit 5)                             */
#define ADC_OVSCR_OVSMPR_Msk              (0xe0UL)                  /*!< ADC OVSCR: OVSMPR (Bitfield-Mask: 0x07)               */
#define ADC_OVSCR_OVSHT_Pos               (0UL)                     /*!< ADC OVSCR: OVSHT (Bit 0)                              */
#define ADC_OVSCR_OVSHT_Msk               (0xfUL)                   /*!< ADC OVSCR: OVSHT (Bitfield-Mask: 0x0f)                */
/* =========================================================  IESR  ========================================================== */
#define ADC_IESR_LASTCH_Pos               (16UL)                    /*!< ADC IESR: LASTCH (Bit 16)                             */
#define ADC_IESR_LASTCH_Msk               (0x1f0000UL)              /*!< ADC IESR: LASTCH (Bitfield-Mask: 0x1f)                */
#define ADC_IESR_STBIEN_Pos               (11UL)                    /*!< ADC IESR: STBIEN (Bit 11)                             */
#define ADC_IESR_STBIEN_Msk               (0x800UL)                 /*!< ADC IESR: STBIEN (Bitfield-Mask: 0x01)                */
#define ADC_IESR_OVRUNIEN_Pos             (10UL)                    /*!< ADC IESR: OVRUNIEN (Bit 10)                           */
#define ADC_IESR_OVRUNIEN_Msk             (0x400UL)                 /*!< ADC IESR: OVRUNIEN (Bitfield-Mask: 0x01)              */
#define ADC_IESR_EOCIEN_Pos               (9UL)                     /*!< ADC IESR: EOCIEN (Bit 9)                              */
#define ADC_IESR_EOCIEN_Msk               (0x200UL)                 /*!< ADC IESR: EOCIEN (Bitfield-Mask: 0x01)                */
#define ADC_IESR_EOSIEN_Pos               (8UL)                     /*!< ADC IESR: EOSIEN (Bit 8)                              */
#define ADC_IESR_EOSIEN_Msk               (0x100UL)                 /*!< ADC IESR: EOSIEN (Bitfield-Mask: 0x01)                */
#define ADC_IESR_STBIFLAG_Pos             (3UL)                     /*!< ADC IESR: STBIFLAG (Bit 3)                            */
#define ADC_IESR_STBIFLAG_Msk             (0x8UL)                   /*!< ADC IESR: STBIFLAG (Bitfield-Mask: 0x01)              */
#define ADC_IESR_OVRUNIFLAG_Pos           (2UL)                     /*!< ADC IESR: OVRUNIFLAG (Bit 2)                          */
#define ADC_IESR_OVRUNIFLAG_Msk           (0x4UL)                   /*!< ADC IESR: OVRUNIFLAG (Bitfield-Mask: 0x01)            */
#define ADC_IESR_EOCIFLAG_Pos             (1UL)                     /*!< ADC IESR: EOCIFLAG (Bit 1)                            */
#define ADC_IESR_EOCIFLAG_Msk             (0x2UL)                   /*!< ADC IESR: EOCIFLAG (Bitfield-Mask: 0x01)              */
#define ADC_IESR_EOSIFLAG_Pos             (0UL)                     /*!< ADC IESR: EOSIFLAG (Bit 0)                            */
#define ADC_IESR_EOSIFLAG_Msk             (0x1UL)                   /*!< ADC IESR: EOSIFLAG (Bitfield-Mask: 0x01)              */
/* ==========================================================  DR  =========================================================== */
#define ADC_DR_ADDATA_Pos                 (0UL)                     /*!< ADC DR: ADDATA (Bit 0)                                */
#define ADC_DR_ADDATA_Msk                 (0xffffUL)                /*!< ADC DR: ADDATA (Bitfield-Mask: 0xffff)                */
/* =========================================================  PREDR  ========================================================= */
#define ADC_PREDR_PRED_Pos                (0UL)                     /*!< ADC PREDR: PRED (Bit 0)                               */
#define ADC_PREDR_PRED_Msk                (0xfUL)                   /*!< ADC PREDR: PRED (Bitfield-Mask: 0x0f)                 */
/* =========================================================  SAMR  ========================================================== */
#define ADC_SAMR_SAMCK_Pos                (0UL)                     /*!< ADC SAMR: SAMCK (Bit 0)                               */
#define ADC_SAMR_SAMCK_Msk                (0x1fUL)                  /*!< ADC SAMR: SAMCK (Bitfield-Mask: 0x1f)                 */
/* ========================================================  CHSELR  ========================================================= */
#define ADC_CHSELR_AN19_Pos               (19UL)                    /*!< ADC CHSELR: AN19 (Bit 19)                             */
#define ADC_CHSELR_AN19_Msk               (0x80000UL)               /*!< ADC CHSELR: AN19 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN18_Pos               (18UL)                    /*!< ADC CHSELR: AN18 (Bit 18)                             */
#define ADC_CHSELR_AN18_Msk               (0x40000UL)               /*!< ADC CHSELR: AN18 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN16_Pos               (16UL)                    /*!< ADC CHSELR: AN16 (Bit 16)                             */
#define ADC_CHSELR_AN16_Msk               (0x10000UL)               /*!< ADC CHSELR: AN16 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN15_Pos               (15UL)                    /*!< ADC CHSELR: AN15 (Bit 15)                             */
#define ADC_CHSELR_AN15_Msk               (0x8000UL)                /*!< ADC CHSELR: AN15 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN14_Pos               (14UL)                    /*!< ADC CHSELR: AN14 (Bit 14)                             */
#define ADC_CHSELR_AN14_Msk               (0x4000UL)                /*!< ADC CHSELR: AN14 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN13_Pos               (13UL)                    /*!< ADC CHSELR: AN13 (Bit 13)                             */
#define ADC_CHSELR_AN13_Msk               (0x2000UL)                /*!< ADC CHSELR: AN13 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN12_Pos               (12UL)                    /*!< ADC CHSELR: AN12 (Bit 12)                             */
#define ADC_CHSELR_AN12_Msk               (0x1000UL)                /*!< ADC CHSELR: AN12 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN11_Pos               (11UL)                    /*!< ADC CHSELR: AN11 (Bit 11)                             */
#define ADC_CHSELR_AN11_Msk               (0x800UL)                 /*!< ADC CHSELR: AN11 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN10_Pos               (10UL)                    /*!< ADC CHSELR: AN10 (Bit 10)                             */
#define ADC_CHSELR_AN10_Msk               (0x400UL)                 /*!< ADC CHSELR: AN10 (Bitfield-Mask: 0x01)                */
#define ADC_CHSELR_AN9_Pos                (9UL)                     /*!< ADC CHSELR: AN9 (Bit 9)                               */
#define ADC_CHSELR_AN9_Msk                (0x200UL)                 /*!< ADC CHSELR: AN9 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN8_Pos                (8UL)                     /*!< ADC CHSELR: AN8 (Bit 8)                               */
#define ADC_CHSELR_AN8_Msk                (0x100UL)                 /*!< ADC CHSELR: AN8 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN7_Pos                (7UL)                     /*!< ADC CHSELR: AN7 (Bit 7)                               */
#define ADC_CHSELR_AN7_Msk                (0x80UL)                  /*!< ADC CHSELR: AN7 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN6_Pos                (6UL)                     /*!< ADC CHSELR: AN6 (Bit 6)                               */
#define ADC_CHSELR_AN6_Msk                (0x40UL)                  /*!< ADC CHSELR: AN6 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN5_Pos                (5UL)                     /*!< ADC CHSELR: AN5 (Bit 5)                               */
#define ADC_CHSELR_AN5_Msk                (0x20UL)                  /*!< ADC CHSELR: AN5 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN4_Pos                (4UL)                     /*!< ADC CHSELR: AN4 (Bit 4)                               */
#define ADC_CHSELR_AN4_Msk                (0x10UL)                  /*!< ADC CHSELR: AN4 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN3_Pos                (3UL)                     /*!< ADC CHSELR: AN3 (Bit 3)                               */
#define ADC_CHSELR_AN3_Msk                (0x8UL)                   /*!< ADC CHSELR: AN3 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN2_Pos                (2UL)                     /*!< ADC CHSELR: AN2 (Bit 2)                               */
#define ADC_CHSELR_AN2_Msk                (0x4UL)                   /*!< ADC CHSELR: AN2 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN1_Pos                (1UL)                     /*!< ADC CHSELR: AN1 (Bit 1)                               */
#define ADC_CHSELR_AN1_Msk                (0x2UL)                   /*!< ADC CHSELR: AN1 (Bitfield-Mask: 0x01)                 */
#define ADC_CHSELR_AN0_Pos                (0UL)                     /*!< ADC CHSELR: AN0 (Bit 0)                               */
#define ADC_CHSELR_AN0_Msk                (0x1UL)                   /*!< ADC CHSELR: AN0 (Bitfield-Mask: 0x01)                 */


/* =========================================================================================================================== */
/* ================                                           CMPn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define CMPn_CR_CMPnEN_Pos                (15UL)                    /*!< CMPn CR: CMPnEN (Bit 15)                              */
#define CMPn_CR_CMPnEN_Msk                (0x8000UL)                /*!< CMPn CR: CMPnEN (Bitfield-Mask: 0x01)                 */
#define CMPn_CR_CMPnNEG_Pos               (12UL)                    /*!< CMPn CR: CMPnNEG (Bit 12)                             */
#define CMPn_CR_CMPnNEG_Msk               (0x7000UL)                /*!< CMPn CR: CMPnNEG (Bitfield-Mask: 0x07)                */
#define CMPn_CR_CMPnPOS_Pos               (9UL)                     /*!< CMPn CR: CMPnPOS (Bit 9)                              */
#define CMPn_CR_CMPnPOS_Msk               (0xe00UL)                 /*!< CMPn CR: CMPnPOS (Bitfield-Mask: 0x07)                */
#define CMPn_CR_HYSnEN_Pos                (8UL)                     /*!< CMPn CR: HYSnEN (Bit 8)                               */
#define CMPn_CR_HYSnEN_Msk                (0x100UL)                 /*!< CMPn CR: HYSnEN (Bitfield-Mask: 0x01)                 */
#define CMPn_CR_CMPnSPD_Pos               (6UL)                     /*!< CMPn CR: CMPnSPD (Bit 6)                              */
#define CMPn_CR_CMPnSPD_Msk               (0x40UL)                  /*!< CMPn CR: CMPnSPD (Bitfield-Mask: 0x01)                */
#define CMPn_CR_CMPnPOL_Pos               (4UL)                     /*!< CMPn CR: CMPnPOL (Bit 4)                              */
#define CMPn_CR_CMPnPOL_Msk               (0x30UL)                  /*!< CMPn CR: CMPnPOL (Bitfield-Mask: 0x03)                */
#define CMPn_CR_NFCKn_Pos                 (0UL)                     /*!< CMPn CR: NFCKn (Bit 0)                                */
#define CMPn_CR_NFCKn_Msk                 (0x7UL)                   /*!< CMPn CR: NFCKn (Bitfield-Mask: 0x07)                  */
/* ==========================================================  SR  =========================================================== */
#define CMPn_SR_CMPnIFLAG_Pos             (4UL)                     /*!< CMPn SR: CMPnIFLAG (Bit 4)                            */
#define CMPn_SR_CMPnIFLAG_Msk             (0x10UL)                  /*!< CMPn SR: CMPnIFLAG (Bitfield-Mask: 0x01)              */
#define CMPn_SR_CMPnST_Pos                (0UL)                     /*!< CMPn SR: CMPnST (Bit 0)                               */
#define CMPn_SR_CMPnST_Msk                (0x1UL)                   /*!< CMPn SR: CMPnST (Bitfield-Mask: 0x01)                 */
/* ==========================================================  RCR  ========================================================== */
#define CMPn_RCR_REFnEN_Pos               (7UL)                     /*!< CMPn RCR: REFnEN (Bit 7)                              */
#define CMPn_RCR_REFnEN_Msk               (0x80UL)                  /*!< CMPn RCR: REFnEN (Bitfield-Mask: 0x01)                */
#define CMPn_RCR_CMPnREF_Pos              (0UL)                     /*!< CMPn RCR: CMPnREF (Bit 0)                             */
#define CMPn_RCR_CMPnREF_Msk              (0x7UL)                   /*!< CMPn RCR: CMPnREF (Bitfield-Mask: 0x07)               */


/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define CMP0_CR_CMPnEN_Pos                (15UL)                    /*!< CMP0 CR: CMPnEN (Bit 15)                              */
#define CMP0_CR_CMPnEN_Msk                (0x8000UL)                /*!< CMP0 CR: CMPnEN (Bitfield-Mask: 0x01)                 */
#define CMP0_CR_CMPnNEG_Pos               (12UL)                    /*!< CMP0 CR: CMPnNEG (Bit 12)                             */
#define CMP0_CR_CMPnNEG_Msk               (0x7000UL)                /*!< CMP0 CR: CMPnNEG (Bitfield-Mask: 0x07)                */
#define CMP0_CR_CMPnPOS_Pos               (9UL)                     /*!< CMP0 CR: CMPnPOS (Bit 9)                              */
#define CMP0_CR_CMPnPOS_Msk               (0xe00UL)                 /*!< CMP0 CR: CMPnPOS (Bitfield-Mask: 0x07)                */
#define CMP0_CR_HYSnEN_Pos                (8UL)                     /*!< CMP0 CR: HYSnEN (Bit 8)                               */
#define CMP0_CR_HYSnEN_Msk                (0x100UL)                 /*!< CMP0 CR: HYSnEN (Bitfield-Mask: 0x01)                 */
#define CMP0_CR_CMPnSPD_Pos               (6UL)                     /*!< CMP0 CR: CMPnSPD (Bit 6)                              */
#define CMP0_CR_CMPnSPD_Msk               (0x40UL)                  /*!< CMP0 CR: CMPnSPD (Bitfield-Mask: 0x01)                */
#define CMP0_CR_CMPnPOL_Pos               (4UL)                     /*!< CMP0 CR: CMPnPOL (Bit 4)                              */
#define CMP0_CR_CMPnPOL_Msk               (0x30UL)                  /*!< CMP0 CR: CMPnPOL (Bitfield-Mask: 0x03)                */
#define CMP0_CR_NFCKn_Pos                 (0UL)                     /*!< CMP0 CR: NFCKn (Bit 0)                                */
#define CMP0_CR_NFCKn_Msk                 (0x7UL)                   /*!< CMP0 CR: NFCKn (Bitfield-Mask: 0x07)                  */
/* ==========================================================  SR  =========================================================== */
#define CMP0_SR_CMPnIFLAG_Pos             (4UL)                     /*!< CMP0 SR: CMPnIFLAG (Bit 4)                            */
#define CMP0_SR_CMPnIFLAG_Msk             (0x10UL)                  /*!< CMP0 SR: CMPnIFLAG (Bitfield-Mask: 0x01)              */
#define CMP0_SR_CMPnST_Pos                (0UL)                     /*!< CMP0 SR: CMPnST (Bit 0)                               */
#define CMP0_SR_CMPnST_Msk                (0x1UL)                   /*!< CMP0 SR: CMPnST (Bitfield-Mask: 0x01)                 */
/* ==========================================================  RCR  ========================================================== */
#define CMP0_RCR_REFnEN_Pos               (7UL)                     /*!< CMP0 RCR: REFnEN (Bit 7)                              */
#define CMP0_RCR_REFnEN_Msk               (0x80UL)                  /*!< CMP0 RCR: REFnEN (Bitfield-Mask: 0x01)                */
#define CMP0_RCR_CMPnREF_Pos              (0UL)                     /*!< CMP0 RCR: CMPnREF (Bit 0)                             */
#define CMP0_RCR_CMPnREF_Msk              (0x7UL)                   /*!< CMP0 RCR: CMPnREF (Bitfield-Mask: 0x07)               */
/* ========================================================  CMP0_CR  ======================================================== */
#define CMP0_CMP0_CR_CMPnEN_Pos           (15UL)                    /*!< CMP0 CMP0_CR: CMPnEN (Bit 15)                         */
#define CMP0_CMP0_CR_CMPnEN_Msk           (0x8000UL)                /*!< CMP0 CMP0_CR: CMPnEN (Bitfield-Mask: 0x01)            */
#define CMP0_CMP0_CR_CMPnNEG_Pos          (12UL)                    /*!< CMP0 CMP0_CR: CMPnNEG (Bit 12)                        */
#define CMP0_CMP0_CR_CMPnNEG_Msk          (0x7000UL)                /*!< CMP0 CMP0_CR: CMPnNEG (Bitfield-Mask: 0x07)           */
#define CMP0_CMP0_CR_CMPnPOS_Pos          (9UL)                     /*!< CMP0 CMP0_CR: CMPnPOS (Bit 9)                         */
#define CMP0_CMP0_CR_CMPnPOS_Msk          (0xe00UL)                 /*!< CMP0 CMP0_CR: CMPnPOS (Bitfield-Mask: 0x07)           */
#define CMP0_CMP0_CR_HYSnEN_Pos           (8UL)                     /*!< CMP0 CMP0_CR: HYSnEN (Bit 8)                          */
#define CMP0_CMP0_CR_HYSnEN_Msk           (0x100UL)                 /*!< CMP0 CMP0_CR: HYSnEN (Bitfield-Mask: 0x01)            */
#define CMP0_CMP0_CR_CMPnSPD_Pos          (6UL)                     /*!< CMP0 CMP0_CR: CMPnSPD (Bit 6)                         */
#define CMP0_CMP0_CR_CMPnSPD_Msk          (0x40UL)                  /*!< CMP0 CMP0_CR: CMPnSPD (Bitfield-Mask: 0x01)           */
#define CMP0_CMP0_CR_CMPnPOL_Pos          (4UL)                     /*!< CMP0 CMP0_CR: CMPnPOL (Bit 4)                         */
#define CMP0_CMP0_CR_CMPnPOL_Msk          (0x30UL)                  /*!< CMP0 CMP0_CR: CMPnPOL (Bitfield-Mask: 0x03)           */
#define CMP0_CMP0_CR_NFCKn_Pos            (0UL)                     /*!< CMP0 CMP0_CR: NFCKn (Bit 0)                           */
#define CMP0_CMP0_CR_NFCKn_Msk            (0x7UL)                   /*!< CMP0 CMP0_CR: NFCKn (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           CMP1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define CMP1_CR_CMPnEN_Pos                (15UL)                    /*!< CMP1 CR: CMPnEN (Bit 15)                              */
#define CMP1_CR_CMPnEN_Msk                (0x8000UL)                /*!< CMP1 CR: CMPnEN (Bitfield-Mask: 0x01)                 */
#define CMP1_CR_CMPnNEG_Pos               (12UL)                    /*!< CMP1 CR: CMPnNEG (Bit 12)                             */
#define CMP1_CR_CMPnNEG_Msk               (0x7000UL)                /*!< CMP1 CR: CMPnNEG (Bitfield-Mask: 0x07)                */
#define CMP1_CR_CMPnPOS_Pos               (9UL)                     /*!< CMP1 CR: CMPnPOS (Bit 9)                              */
#define CMP1_CR_CMPnPOS_Msk               (0xe00UL)                 /*!< CMP1 CR: CMPnPOS (Bitfield-Mask: 0x07)                */
#define CMP1_CR_HYSnEN_Pos                (8UL)                     /*!< CMP1 CR: HYSnEN (Bit 8)                               */
#define CMP1_CR_HYSnEN_Msk                (0x100UL)                 /*!< CMP1 CR: HYSnEN (Bitfield-Mask: 0x01)                 */
#define CMP1_CR_CMPnSPD_Pos               (6UL)                     /*!< CMP1 CR: CMPnSPD (Bit 6)                              */
#define CMP1_CR_CMPnSPD_Msk               (0x40UL)                  /*!< CMP1 CR: CMPnSPD (Bitfield-Mask: 0x01)                */
#define CMP1_CR_CMPnPOL_Pos               (4UL)                     /*!< CMP1 CR: CMPnPOL (Bit 4)                              */
#define CMP1_CR_CMPnPOL_Msk               (0x30UL)                  /*!< CMP1 CR: CMPnPOL (Bitfield-Mask: 0x03)                */
#define CMP1_CR_NFCKn_Pos                 (0UL)                     /*!< CMP1 CR: NFCKn (Bit 0)                                */
#define CMP1_CR_NFCKn_Msk                 (0x7UL)                   /*!< CMP1 CR: NFCKn (Bitfield-Mask: 0x07)                  */
/* ==========================================================  SR  =========================================================== */
#define CMP1_SR_CMPnIFLAG_Pos             (4UL)                     /*!< CMP1 SR: CMPnIFLAG (Bit 4)                            */
#define CMP1_SR_CMPnIFLAG_Msk             (0x10UL)                  /*!< CMP1 SR: CMPnIFLAG (Bitfield-Mask: 0x01)              */
#define CMP1_SR_CMPnST_Pos                (0UL)                     /*!< CMP1 SR: CMPnST (Bit 0)                               */
#define CMP1_SR_CMPnST_Msk                (0x1UL)                   /*!< CMP1 SR: CMPnST (Bitfield-Mask: 0x01)                 */
/* ==========================================================  RCR  ========================================================== */
#define CMP1_RCR_REFnEN_Pos               (7UL)                     /*!< CMP1 RCR: REFnEN (Bit 7)                              */
#define CMP1_RCR_REFnEN_Msk               (0x80UL)                  /*!< CMP1 RCR: REFnEN (Bitfield-Mask: 0x01)                */
#define CMP1_RCR_CMPnREF_Pos              (0UL)                     /*!< CMP1 RCR: CMPnREF (Bit 0)                             */
#define CMP1_RCR_CMPnREF_Msk              (0x7UL)                   /*!< CMP1 RCR: CMPnREF (Bitfield-Mask: 0x07)               */
/* ========================================================  CMP1_CR  ======================================================== */
#define CMP1_CMP1_CR_CMPnEN_Pos           (15UL)                    /*!< CMP1 CMP1_CR: CMPnEN (Bit 15)                         */
#define CMP1_CMP1_CR_CMPnEN_Msk           (0x8000UL)                /*!< CMP1 CMP1_CR: CMPnEN (Bitfield-Mask: 0x01)            */
#define CMP1_CMP1_CR_CMPnNEG_Pos          (12UL)                    /*!< CMP1 CMP1_CR: CMPnNEG (Bit 12)                        */
#define CMP1_CMP1_CR_CMPnNEG_Msk          (0x7000UL)                /*!< CMP1 CMP1_CR: CMPnNEG (Bitfield-Mask: 0x07)           */
#define CMP1_CMP1_CR_CMPnPOS_Pos          (9UL)                     /*!< CMP1 CMP1_CR: CMPnPOS (Bit 9)                         */
#define CMP1_CMP1_CR_CMPnPOS_Msk          (0xe00UL)                 /*!< CMP1 CMP1_CR: CMPnPOS (Bitfield-Mask: 0x07)           */
#define CMP1_CMP1_CR_HYSnEN_Pos           (8UL)                     /*!< CMP1 CMP1_CR: HYSnEN (Bit 8)                          */
#define CMP1_CMP1_CR_HYSnEN_Msk           (0x100UL)                 /*!< CMP1 CMP1_CR: HYSnEN (Bitfield-Mask: 0x01)            */
#define CMP1_CMP1_CR_CMPnSPD_Pos          (6UL)                     /*!< CMP1 CMP1_CR: CMPnSPD (Bit 6)                         */
#define CMP1_CMP1_CR_CMPnSPD_Msk          (0x40UL)                  /*!< CMP1 CMP1_CR: CMPnSPD (Bitfield-Mask: 0x01)           */
#define CMP1_CMP1_CR_CMPnPOL_Pos          (4UL)                     /*!< CMP1 CMP1_CR: CMPnPOL (Bit 4)                         */
#define CMP1_CMP1_CR_CMPnPOL_Msk          (0x30UL)                  /*!< CMP1 CMP1_CR: CMPnPOL (Bitfield-Mask: 0x03)           */
#define CMP1_CMP1_CR_NFCKn_Pos            (0UL)                     /*!< CMP1 CMP1_CR: NFCKn (Bit 0)                           */
#define CMP1_CMP1_CR_NFCKn_Msk            (0x7UL)                   /*!< CMP1 CMP1_CR: NFCKn (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART1n_CR1_USTnMS_Pos            (14UL)                    /*!< USART1n CR1: USTnMS (Bit 14)                          */
#define USART1n_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART1n CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART1n_CR1_USTnP_Pos             (12UL)                    /*!< USART1n CR1: USTnP (Bit 12)                           */
#define USART1n_CR1_USTnP_Msk             (0x3000UL)                /*!< USART1n CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART1n_CR1_USTnS_Pos             (9UL)                     /*!< USART1n CR1: USTnS (Bit 9)                            */
#define USART1n_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART1n CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART1n_CR1_ORDn_Pos              (8UL)                     /*!< USART1n CR1: ORDn (Bit 8)                             */
#define USART1n_CR1_ORDn_Msk              (0x100UL)                 /*!< USART1n CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART1n_CR1_CPOLn_Pos             (7UL)                     /*!< USART1n CR1: CPOLn (Bit 7)                            */
#define USART1n_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART1n CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_CPHAn_Pos             (6UL)                     /*!< USART1n CR1: CPHAn (Bit 6)                            */
#define USART1n_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART1n CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_DRIEn_Pos             (5UL)                     /*!< USART1n CR1: DRIEn (Bit 5)                            */
#define USART1n_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART1n CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_TXCIEn_Pos            (4UL)                     /*!< USART1n CR1: TXCIEn (Bit 4)                           */
#define USART1n_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART1n CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR1_RXCIEn_Pos            (3UL)                     /*!< USART1n CR1: RXCIEn (Bit 3)                           */
#define USART1n_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART1n CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART1n CR1: WAKEIEn (Bit 2)                          */
#define USART1n_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART1n CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART1n_CR1_TXEn_Pos              (1UL)                     /*!< USART1n CR1: TXEn (Bit 1)                             */
#define USART1n_CR1_TXEn_Msk              (0x2UL)                   /*!< USART1n CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART1n_CR1_RXEn_Pos              (0UL)                     /*!< USART1n CR1: RXEn (Bit 0)                             */
#define USART1n_CR1_RXEn_Msk              (0x1UL)                   /*!< USART1n CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART1n_CR2_USTnEN_Pos            (9UL)                     /*!< USART1n CR2: USTnEN (Bit 9)                           */
#define USART1n_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART1n CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART1n_CR2_DBLSn_Pos             (8UL)                     /*!< USART1n CR2: DBLSn (Bit 8)                            */
#define USART1n_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART1n CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART1n_CR2_MASTERn_Pos           (7UL)                     /*!< USART1n CR2: MASTERn (Bit 7)                          */
#define USART1n_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART1n CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART1n_CR2_LOOPSn_Pos            (6UL)                     /*!< USART1n CR2: LOOPSn (Bit 6)                           */
#define USART1n_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART1n CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART1n_CR2_DISSCKn_Pos           (5UL)                     /*!< USART1n CR2: DISSCKn (Bit 5)                          */
#define USART1n_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART1n CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART1n_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART1n CR2: USTnSSEN (Bit 4)                         */
#define USART1n_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART1n CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART1n_CR2_FXCHn_Pos             (3UL)                     /*!< USART1n CR2: FXCHn (Bit 3)                            */
#define USART1n_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART1n CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART1n_CR2_USTnSB_Pos            (2UL)                     /*!< USART1n CR2: USTnSB (Bit 2)                           */
#define USART1n_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART1n CR2: USTnSB (Bitfield-Mask: 0x01)             */
/* ==========================================================  CR3  ========================================================== */
#define USART1n_CR3_RCDENn_Pos            (10UL)                    /*!< USART1n CR3: RCDENn (Bit 10)                          */
#define USART1n_CR3_RCDENn_Msk            (0x400UL)                 /*!< USART1n CR3: RCDENn (Bitfield-Mask: 0x01)             */
#define USART1n_CR3_RTOENn_Pos            (9UL)                     /*!< USART1n CR3: RTOENn (Bit 9)                           */
#define USART1n_CR3_RTOENn_Msk            (0x200UL)                 /*!< USART1n CR3: RTOENn (Bitfield-Mask: 0x01)             */
#define USART1n_CR3_RCDIEn_Pos            (7UL)                     /*!< USART1n CR3: RCDIEn (Bit 7)                           */
#define USART1n_CR3_RCDIEn_Msk            (0x80UL)                  /*!< USART1n CR3: RCDIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR3_RTOIEn_Pos            (6UL)                     /*!< USART1n CR3: RTOIEn (Bit 6)                           */
#define USART1n_CR3_RTOIEn_Msk            (0x40UL)                  /*!< USART1n CR3: RTOIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR3_RCDnIFLAG_Pos         (4UL)                     /*!< USART1n CR3: RCDnIFLAG (Bit 4)                        */
#define USART1n_CR3_RCDnIFLAG_Msk         (0x10UL)                  /*!< USART1n CR3: RCDnIFLAG (Bitfield-Mask: 0x01)          */
#define USART1n_CR3_RTOnIFLAG_Pos         (3UL)                     /*!< USART1n CR3: RTOnIFLAG (Bit 3)                        */
#define USART1n_CR3_RTOnIFLAG_Msk         (0x8UL)                   /*!< USART1n CR3: RTOnIFLAG (Bitfield-Mask: 0x01)          */
#define USART1n_CR3_BRDIVn_Pos            (0UL)                     /*!< USART1n CR3: BRDIVn (Bit 0)                           */
#define USART1n_CR3_BRDIVn_Msk            (0x3UL)                   /*!< USART1n CR3: BRDIVn (Bitfield-Mask: 0x03)             */
/* ==========================================================  ST  =========================================================== */
#define USART1n_ST_DREn_Pos               (7UL)                     /*!< USART1n ST: DREn (Bit 7)                              */
#define USART1n_ST_DREn_Msk               (0x80UL)                  /*!< USART1n ST: DREn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_TXCn_Pos               (6UL)                     /*!< USART1n ST: TXCn (Bit 6)                              */
#define USART1n_ST_TXCn_Msk               (0x40UL)                  /*!< USART1n ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_RXCn_Pos               (5UL)                     /*!< USART1n ST: RXCn (Bit 5)                              */
#define USART1n_ST_RXCn_Msk               (0x20UL)                  /*!< USART1n ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_WAKEn_Pos              (4UL)                     /*!< USART1n ST: WAKEn (Bit 4)                             */
#define USART1n_ST_WAKEn_Msk              (0x10UL)                  /*!< USART1n ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART1n_ST_DORn_Pos               (2UL)                     /*!< USART1n ST: DORn (Bit 2)                              */
#define USART1n_ST_DORn_Msk               (0x4UL)                   /*!< USART1n ST: DORn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_FEn_Pos                (1UL)                     /*!< USART1n ST: FEn (Bit 1)                               */
#define USART1n_ST_FEn_Msk                (0x2UL)                   /*!< USART1n ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART1n_ST_PEn_Pos                (0UL)                     /*!< USART1n ST: PEn (Bit 0)                               */
#define USART1n_ST_PEn_Msk                (0x1UL)                   /*!< USART1n ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART1n_BDR_BDATA_Pos             (0UL)                     /*!< USART1n BDR: BDATA (Bit 0)                            */
#define USART1n_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART1n BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  RDR  ========================================================== */
#define USART1n_RDR_RDATA_Pos             (0UL)                     /*!< USART1n RDR: RDATA (Bit 0)                            */
#define USART1n_RDR_RDATA_Msk             (0x1ffUL)                 /*!< USART1n RDR: RDATA (Bitfield-Mask: 0x1ff)             */
/* ==========================================================  TDR  ========================================================== */
#define USART1n_TDR_TDATA_Pos             (0UL)                     /*!< USART1n TDR: TDATA (Bit 0)                            */
#define USART1n_TDR_TDATA_Msk             (0x1ffUL)                 /*!< USART1n TDR: TDATA (Bitfield-Mask: 0x1ff)             */
/* =========================================================  RTODR  ========================================================= */
#define USART1n_RTODR_RTOD_Pos            (0UL)                     /*!< USART1n RTODR: RTOD (Bit 0)                           */
#define USART1n_RTODR_RTOD_Msk            (0xffUL)                  /*!< USART1n RTODR: RTOD (Bitfield-Mask: 0xff)             */
/* =========================================================  RCDR  ========================================================== */
#define USART1n_RCDR_RCDD_Pos             (0UL)                     /*!< USART1n RCDR: RCDD (Bit 0)                            */
#define USART1n_RCDR_RCDD_Msk             (0xffUL)                  /*!< USART1n RCDR: RCDD (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART10_CR1_USTnMS_Pos            (14UL)                    /*!< USART10 CR1: USTnMS (Bit 14)                          */
#define USART10_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART10 CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART10_CR1_USTnP_Pos             (12UL)                    /*!< USART10 CR1: USTnP (Bit 12)                           */
#define USART10_CR1_USTnP_Msk             (0x3000UL)                /*!< USART10 CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART10_CR1_USTnS_Pos             (9UL)                     /*!< USART10 CR1: USTnS (Bit 9)                            */
#define USART10_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART10 CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART10_CR1_ORDn_Pos              (8UL)                     /*!< USART10 CR1: ORDn (Bit 8)                             */
#define USART10_CR1_ORDn_Msk              (0x100UL)                 /*!< USART10 CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART10_CR1_CPOLn_Pos             (7UL)                     /*!< USART10 CR1: CPOLn (Bit 7)                            */
#define USART10_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART10 CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_CPHAn_Pos             (6UL)                     /*!< USART10 CR1: CPHAn (Bit 6)                            */
#define USART10_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART10 CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_DRIEn_Pos             (5UL)                     /*!< USART10 CR1: DRIEn (Bit 5)                            */
#define USART10_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART10 CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_TXCIEn_Pos            (4UL)                     /*!< USART10 CR1: TXCIEn (Bit 4)                           */
#define USART10_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART10 CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR1_RXCIEn_Pos            (3UL)                     /*!< USART10 CR1: RXCIEn (Bit 3)                           */
#define USART10_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART10 CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART10 CR1: WAKEIEn (Bit 2)                          */
#define USART10_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART10 CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART10_CR1_TXEn_Pos              (1UL)                     /*!< USART10 CR1: TXEn (Bit 1)                             */
#define USART10_CR1_TXEn_Msk              (0x2UL)                   /*!< USART10 CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART10_CR1_RXEn_Pos              (0UL)                     /*!< USART10 CR1: RXEn (Bit 0)                             */
#define USART10_CR1_RXEn_Msk              (0x1UL)                   /*!< USART10 CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART10_CR2_USTnEN_Pos            (9UL)                     /*!< USART10 CR2: USTnEN (Bit 9)                           */
#define USART10_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART10 CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART10_CR2_DBLSn_Pos             (8UL)                     /*!< USART10 CR2: DBLSn (Bit 8)                            */
#define USART10_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART10 CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART10_CR2_MASTERn_Pos           (7UL)                     /*!< USART10 CR2: MASTERn (Bit 7)                          */
#define USART10_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART10 CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART10_CR2_LOOPSn_Pos            (6UL)                     /*!< USART10 CR2: LOOPSn (Bit 6)                           */
#define USART10_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART10 CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART10_CR2_DISSCKn_Pos           (5UL)                     /*!< USART10 CR2: DISSCKn (Bit 5)                          */
#define USART10_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART10 CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART10_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART10 CR2: USTnSSEN (Bit 4)                         */
#define USART10_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART10 CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART10_CR2_FXCHn_Pos             (3UL)                     /*!< USART10 CR2: FXCHn (Bit 3)                            */
#define USART10_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART10 CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART10_CR2_USTnSB_Pos            (2UL)                     /*!< USART10 CR2: USTnSB (Bit 2)                           */
#define USART10_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART10 CR2: USTnSB (Bitfield-Mask: 0x01)             */
/* ==========================================================  CR3  ========================================================== */
#define USART10_CR3_RCDENn_Pos            (10UL)                    /*!< USART10 CR3: RCDENn (Bit 10)                          */
#define USART10_CR3_RCDENn_Msk            (0x400UL)                 /*!< USART10 CR3: RCDENn (Bitfield-Mask: 0x01)             */
#define USART10_CR3_RTOENn_Pos            (9UL)                     /*!< USART10 CR3: RTOENn (Bit 9)                           */
#define USART10_CR3_RTOENn_Msk            (0x200UL)                 /*!< USART10 CR3: RTOENn (Bitfield-Mask: 0x01)             */
#define USART10_CR3_RCDIEn_Pos            (7UL)                     /*!< USART10 CR3: RCDIEn (Bit 7)                           */
#define USART10_CR3_RCDIEn_Msk            (0x80UL)                  /*!< USART10 CR3: RCDIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR3_RTOIEn_Pos            (6UL)                     /*!< USART10 CR3: RTOIEn (Bit 6)                           */
#define USART10_CR3_RTOIEn_Msk            (0x40UL)                  /*!< USART10 CR3: RTOIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR3_RCDnIFLAG_Pos         (4UL)                     /*!< USART10 CR3: RCDnIFLAG (Bit 4)                        */
#define USART10_CR3_RCDnIFLAG_Msk         (0x10UL)                  /*!< USART10 CR3: RCDnIFLAG (Bitfield-Mask: 0x01)          */
#define USART10_CR3_RTOnIFLAG_Pos         (3UL)                     /*!< USART10 CR3: RTOnIFLAG (Bit 3)                        */
#define USART10_CR3_RTOnIFLAG_Msk         (0x8UL)                   /*!< USART10 CR3: RTOnIFLAG (Bitfield-Mask: 0x01)          */
#define USART10_CR3_BRDIVn_Pos            (0UL)                     /*!< USART10 CR3: BRDIVn (Bit 0)                           */
#define USART10_CR3_BRDIVn_Msk            (0x3UL)                   /*!< USART10 CR3: BRDIVn (Bitfield-Mask: 0x03)             */
/* ==========================================================  ST  =========================================================== */
#define USART10_ST_DREn_Pos               (7UL)                     /*!< USART10 ST: DREn (Bit 7)                              */
#define USART10_ST_DREn_Msk               (0x80UL)                  /*!< USART10 ST: DREn (Bitfield-Mask: 0x01)                */
#define USART10_ST_TXCn_Pos               (6UL)                     /*!< USART10 ST: TXCn (Bit 6)                              */
#define USART10_ST_TXCn_Msk               (0x40UL)                  /*!< USART10 ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART10_ST_RXCn_Pos               (5UL)                     /*!< USART10 ST: RXCn (Bit 5)                              */
#define USART10_ST_RXCn_Msk               (0x20UL)                  /*!< USART10 ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART10_ST_WAKEn_Pos              (4UL)                     /*!< USART10 ST: WAKEn (Bit 4)                             */
#define USART10_ST_WAKEn_Msk              (0x10UL)                  /*!< USART10 ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART10_ST_DORn_Pos               (2UL)                     /*!< USART10 ST: DORn (Bit 2)                              */
#define USART10_ST_DORn_Msk               (0x4UL)                   /*!< USART10 ST: DORn (Bitfield-Mask: 0x01)                */
#define USART10_ST_FEn_Pos                (1UL)                     /*!< USART10 ST: FEn (Bit 1)                               */
#define USART10_ST_FEn_Msk                (0x2UL)                   /*!< USART10 ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART10_ST_PEn_Pos                (0UL)                     /*!< USART10 ST: PEn (Bit 0)                               */
#define USART10_ST_PEn_Msk                (0x1UL)                   /*!< USART10 ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART10_BDR_BDATA_Pos             (0UL)                     /*!< USART10 BDR: BDATA (Bit 0)                            */
#define USART10_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART10 BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  RDR  ========================================================== */
#define USART10_RDR_RDATA_Pos             (0UL)                     /*!< USART10 RDR: RDATA (Bit 0)                            */
#define USART10_RDR_RDATA_Msk             (0x1ffUL)                 /*!< USART10 RDR: RDATA (Bitfield-Mask: 0x1ff)             */
/* ==========================================================  TDR  ========================================================== */
#define USART10_TDR_TDATA_Pos             (0UL)                     /*!< USART10 TDR: TDATA (Bit 0)                            */
#define USART10_TDR_TDATA_Msk             (0x1ffUL)                 /*!< USART10 TDR: TDATA (Bitfield-Mask: 0x1ff)             */
/* =========================================================  RTODR  ========================================================= */
#define USART10_RTODR_RTOD_Pos            (0UL)                     /*!< USART10 RTODR: RTOD (Bit 0)                           */
#define USART10_RTODR_RTOD_Msk            (0xffUL)                  /*!< USART10 RTODR: RTOD (Bitfield-Mask: 0xff)             */
/* =========================================================  RCDR  ========================================================== */
#define USART10_RCDR_RCDD_Pos             (0UL)                     /*!< USART10 RCDR: RCDD (Bit 0)                            */
#define USART10_RCDR_RCDD_Msk             (0xffUL)                  /*!< USART10 RCDR: RCDD (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UARTn_RBR_RBR_Pos                 (0UL)                     /*!< UARTn RBR: RBR (Bit 0)                                */
#define UARTn_RBR_RBR_Msk                 (0xffUL)                  /*!< UARTn RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UARTn_THR_THR_Pos                 (0UL)                     /*!< UARTn THR: THR (Bit 0)                                */
#define UARTn_THR_THR_Msk                 (0xffUL)                  /*!< UARTn THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UARTn_IER_TXEIE_Pos               (3UL)                     /*!< UARTn IER: TXEIE (Bit 3)                              */
#define UARTn_IER_TXEIE_Msk               (0x8UL)                   /*!< UARTn IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UARTn_IER_RLSIE_Pos               (2UL)                     /*!< UARTn IER: RLSIE (Bit 2)                              */
#define UARTn_IER_RLSIE_Msk               (0x4UL)                   /*!< UARTn IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UARTn_IER_THREIE_Pos              (1UL)                     /*!< UARTn IER: THREIE (Bit 1)                             */
#define UARTn_IER_THREIE_Msk              (0x2UL)                   /*!< UARTn IER: THREIE (Bitfield-Mask: 0x01)               */
#define UARTn_IER_DRIE_Pos                (0UL)                     /*!< UARTn IER: DRIE (Bit 0)                               */
#define UARTn_IER_DRIE_Msk                (0x1UL)                   /*!< UARTn IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UARTn_IIR_TXE_Pos                 (4UL)                     /*!< UARTn IIR: TXE (Bit 4)                                */
#define UARTn_IIR_TXE_Msk                 (0x10UL)                  /*!< UARTn IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UARTn_IIR_IID_Pos                 (1UL)                     /*!< UARTn IIR: IID (Bit 1)                                */
#define UARTn_IIR_IID_Msk                 (0x6UL)                   /*!< UARTn IIR: IID (Bitfield-Mask: 0x03)                  */
#define UARTn_IIR_IPEN_Pos                (0UL)                     /*!< UARTn IIR: IPEN (Bit 0)                               */
#define UARTn_IIR_IPEN_Msk                (0x1UL)                   /*!< UARTn IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UARTn_LCR_BREAK_Pos               (6UL)                     /*!< UARTn LCR: BREAK (Bit 6)                              */
#define UARTn_LCR_BREAK_Msk               (0x40UL)                  /*!< UARTn LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UARTn_LCR_STICKP_Pos              (5UL)                     /*!< UARTn LCR: STICKP (Bit 5)                             */
#define UARTn_LCR_STICKP_Msk              (0x20UL)                  /*!< UARTn LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UARTn_LCR_PARITY_Pos              (4UL)                     /*!< UARTn LCR: PARITY (Bit 4)                             */
#define UARTn_LCR_PARITY_Msk              (0x10UL)                  /*!< UARTn LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UARTn_LCR_PEN_Pos                 (3UL)                     /*!< UARTn LCR: PEN (Bit 3)                                */
#define UARTn_LCR_PEN_Msk                 (0x8UL)                   /*!< UARTn LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UARTn_LCR_STOPBIT_Pos             (2UL)                     /*!< UARTn LCR: STOPBIT (Bit 2)                            */
#define UARTn_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UARTn LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UARTn_LCR_DLEN_Pos                (0UL)                     /*!< UARTn LCR: DLEN (Bit 0)                               */
#define UARTn_LCR_DLEN_Msk                (0x3UL)                   /*!< UARTn LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UARTn_DCR_LBON_Pos                (4UL)                     /*!< UARTn DCR: LBON (Bit 4)                               */
#define UARTn_DCR_LBON_Msk                (0x10UL)                  /*!< UARTn DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UARTn_DCR_RXINV_Pos               (3UL)                     /*!< UARTn DCR: RXINV (Bit 3)                              */
#define UARTn_DCR_RXINV_Msk               (0x8UL)                   /*!< UARTn DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UARTn_DCR_TXINV_Pos               (2UL)                     /*!< UARTn DCR: TXINV (Bit 2)                              */
#define UARTn_DCR_TXINV_Msk               (0x4UL)                   /*!< UARTn DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UARTn_LSR_TEMT_Pos                (6UL)                     /*!< UARTn LSR: TEMT (Bit 6)                               */
#define UARTn_LSR_TEMT_Msk                (0x40UL)                  /*!< UARTn LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UARTn_LSR_THRE_Pos                (5UL)                     /*!< UARTn LSR: THRE (Bit 5)                               */
#define UARTn_LSR_THRE_Msk                (0x20UL)                  /*!< UARTn LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UARTn_LSR_BI_Pos                  (4UL)                     /*!< UARTn LSR: BI (Bit 4)                                 */
#define UARTn_LSR_BI_Msk                  (0x10UL)                  /*!< UARTn LSR: BI (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_FE_Pos                  (3UL)                     /*!< UARTn LSR: FE (Bit 3)                                 */
#define UARTn_LSR_FE_Msk                  (0x8UL)                   /*!< UARTn LSR: FE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_PE_Pos                  (2UL)                     /*!< UARTn LSR: PE (Bit 2)                                 */
#define UARTn_LSR_PE_Msk                  (0x4UL)                   /*!< UARTn LSR: PE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_OE_Pos                  (1UL)                     /*!< UARTn LSR: OE (Bit 1)                                 */
#define UARTn_LSR_OE_Msk                  (0x2UL)                   /*!< UARTn LSR: OE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_DR_Pos                  (0UL)                     /*!< UARTn LSR: DR (Bit 0)                                 */
#define UARTn_LSR_DR_Msk                  (0x1UL)                   /*!< UARTn LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UARTn_BDR_BDR_Pos                 (0UL)                     /*!< UARTn BDR: BDR (Bit 0)                                */
#define UARTn_BDR_BDR_Msk                 (0xffffUL)                /*!< UARTn BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UARTn_BFR_BFR_Pos                 (0UL)                     /*!< UARTn BFR: BFR (Bit 0)                                */
#define UARTn_BFR_BFR_Msk                 (0xffUL)                  /*!< UARTn BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UARTn_IDTR_SMS_Pos                (7UL)                     /*!< UARTn IDTR: SMS (Bit 7)                               */
#define UARTn_IDTR_SMS_Msk                (0x80UL)                  /*!< UARTn IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UARTn_IDTR_DMS_Pos                (6UL)                     /*!< UARTn IDTR: DMS (Bit 6)                               */
#define UARTn_IDTR_DMS_Msk                (0x40UL)                  /*!< UARTn IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UARTn_IDTR_WAITVAL_Pos            (0UL)                     /*!< UARTn IDTR: WAITVAL (Bit 0)                           */
#define UARTn_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UARTn IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UART0_RBR_RBR_Pos                 (0UL)                     /*!< UART0 RBR: RBR (Bit 0)                                */
#define UART0_RBR_RBR_Msk                 (0xffUL)                  /*!< UART0 RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UART0_THR_THR_Pos                 (0UL)                     /*!< UART0 THR: THR (Bit 0)                                */
#define UART0_THR_THR_Msk                 (0xffUL)                  /*!< UART0 THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UART0_IER_TXEIE_Pos               (3UL)                     /*!< UART0 IER: TXEIE (Bit 3)                              */
#define UART0_IER_TXEIE_Msk               (0x8UL)                   /*!< UART0 IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UART0_IER_RLSIE_Pos               (2UL)                     /*!< UART0 IER: RLSIE (Bit 2)                              */
#define UART0_IER_RLSIE_Msk               (0x4UL)                   /*!< UART0 IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UART0_IER_THREIE_Pos              (1UL)                     /*!< UART0 IER: THREIE (Bit 1)                             */
#define UART0_IER_THREIE_Msk              (0x2UL)                   /*!< UART0 IER: THREIE (Bitfield-Mask: 0x01)               */
#define UART0_IER_DRIE_Pos                (0UL)                     /*!< UART0 IER: DRIE (Bit 0)                               */
#define UART0_IER_DRIE_Msk                (0x1UL)                   /*!< UART0 IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UART0_IIR_TXE_Pos                 (4UL)                     /*!< UART0 IIR: TXE (Bit 4)                                */
#define UART0_IIR_TXE_Msk                 (0x10UL)                  /*!< UART0 IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UART0_IIR_IID_Pos                 (1UL)                     /*!< UART0 IIR: IID (Bit 1)                                */
#define UART0_IIR_IID_Msk                 (0x6UL)                   /*!< UART0 IIR: IID (Bitfield-Mask: 0x03)                  */
#define UART0_IIR_IPEN_Pos                (0UL)                     /*!< UART0 IIR: IPEN (Bit 0)                               */
#define UART0_IIR_IPEN_Msk                (0x1UL)                   /*!< UART0 IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UART0_LCR_BREAK_Pos               (6UL)                     /*!< UART0 LCR: BREAK (Bit 6)                              */
#define UART0_LCR_BREAK_Msk               (0x40UL)                  /*!< UART0 LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UART0_LCR_STICKP_Pos              (5UL)                     /*!< UART0 LCR: STICKP (Bit 5)                             */
#define UART0_LCR_STICKP_Msk              (0x20UL)                  /*!< UART0 LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UART0_LCR_PARITY_Pos              (4UL)                     /*!< UART0 LCR: PARITY (Bit 4)                             */
#define UART0_LCR_PARITY_Msk              (0x10UL)                  /*!< UART0 LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UART0_LCR_PEN_Pos                 (3UL)                     /*!< UART0 LCR: PEN (Bit 3)                                */
#define UART0_LCR_PEN_Msk                 (0x8UL)                   /*!< UART0 LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UART0_LCR_STOPBIT_Pos             (2UL)                     /*!< UART0 LCR: STOPBIT (Bit 2)                            */
#define UART0_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UART0 LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UART0_LCR_DLEN_Pos                (0UL)                     /*!< UART0 LCR: DLEN (Bit 0)                               */
#define UART0_LCR_DLEN_Msk                (0x3UL)                   /*!< UART0 LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UART0_DCR_LBON_Pos                (4UL)                     /*!< UART0 DCR: LBON (Bit 4)                               */
#define UART0_DCR_LBON_Msk                (0x10UL)                  /*!< UART0 DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UART0_DCR_RXINV_Pos               (3UL)                     /*!< UART0 DCR: RXINV (Bit 3)                              */
#define UART0_DCR_RXINV_Msk               (0x8UL)                   /*!< UART0 DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UART0_DCR_TXINV_Pos               (2UL)                     /*!< UART0 DCR: TXINV (Bit 2)                              */
#define UART0_DCR_TXINV_Msk               (0x4UL)                   /*!< UART0 DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UART0_LSR_TEMT_Pos                (6UL)                     /*!< UART0 LSR: TEMT (Bit 6)                               */
#define UART0_LSR_TEMT_Msk                (0x40UL)                  /*!< UART0 LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UART0_LSR_THRE_Pos                (5UL)                     /*!< UART0 LSR: THRE (Bit 5)                               */
#define UART0_LSR_THRE_Msk                (0x20UL)                  /*!< UART0 LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UART0_LSR_BI_Pos                  (4UL)                     /*!< UART0 LSR: BI (Bit 4)                                 */
#define UART0_LSR_BI_Msk                  (0x10UL)                  /*!< UART0 LSR: BI (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_FE_Pos                  (3UL)                     /*!< UART0 LSR: FE (Bit 3)                                 */
#define UART0_LSR_FE_Msk                  (0x8UL)                   /*!< UART0 LSR: FE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_PE_Pos                  (2UL)                     /*!< UART0 LSR: PE (Bit 2)                                 */
#define UART0_LSR_PE_Msk                  (0x4UL)                   /*!< UART0 LSR: PE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_OE_Pos                  (1UL)                     /*!< UART0 LSR: OE (Bit 1)                                 */
#define UART0_LSR_OE_Msk                  (0x2UL)                   /*!< UART0 LSR: OE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_DR_Pos                  (0UL)                     /*!< UART0 LSR: DR (Bit 0)                                 */
#define UART0_LSR_DR_Msk                  (0x1UL)                   /*!< UART0 LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UART0_BDR_BDR_Pos                 (0UL)                     /*!< UART0 BDR: BDR (Bit 0)                                */
#define UART0_BDR_BDR_Msk                 (0xffffUL)                /*!< UART0 BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UART0_BFR_BFR_Pos                 (0UL)                     /*!< UART0 BFR: BFR (Bit 0)                                */
#define UART0_BFR_BFR_Msk                 (0xffUL)                  /*!< UART0 BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UART0_IDTR_SMS_Pos                (7UL)                     /*!< UART0 IDTR: SMS (Bit 7)                               */
#define UART0_IDTR_SMS_Msk                (0x80UL)                  /*!< UART0 IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UART0_IDTR_DMS_Pos                (6UL)                     /*!< UART0 IDTR: DMS (Bit 6)                               */
#define UART0_IDTR_DMS_Msk                (0x40UL)                  /*!< UART0 IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UART0_IDTR_WAITVAL_Pos            (0UL)                     /*!< UART0 IDTR: WAITVAL (Bit 0)                           */
#define UART0_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UART0 IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UART1_RBR_RBR_Pos                 (0UL)                     /*!< UART1 RBR: RBR (Bit 0)                                */
#define UART1_RBR_RBR_Msk                 (0xffUL)                  /*!< UART1 RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UART1_THR_THR_Pos                 (0UL)                     /*!< UART1 THR: THR (Bit 0)                                */
#define UART1_THR_THR_Msk                 (0xffUL)                  /*!< UART1 THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UART1_IER_TXEIE_Pos               (3UL)                     /*!< UART1 IER: TXEIE (Bit 3)                              */
#define UART1_IER_TXEIE_Msk               (0x8UL)                   /*!< UART1 IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UART1_IER_RLSIE_Pos               (2UL)                     /*!< UART1 IER: RLSIE (Bit 2)                              */
#define UART1_IER_RLSIE_Msk               (0x4UL)                   /*!< UART1 IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UART1_IER_THREIE_Pos              (1UL)                     /*!< UART1 IER: THREIE (Bit 1)                             */
#define UART1_IER_THREIE_Msk              (0x2UL)                   /*!< UART1 IER: THREIE (Bitfield-Mask: 0x01)               */
#define UART1_IER_DRIE_Pos                (0UL)                     /*!< UART1 IER: DRIE (Bit 0)                               */
#define UART1_IER_DRIE_Msk                (0x1UL)                   /*!< UART1 IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UART1_IIR_TXE_Pos                 (4UL)                     /*!< UART1 IIR: TXE (Bit 4)                                */
#define UART1_IIR_TXE_Msk                 (0x10UL)                  /*!< UART1 IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UART1_IIR_IID_Pos                 (1UL)                     /*!< UART1 IIR: IID (Bit 1)                                */
#define UART1_IIR_IID_Msk                 (0x6UL)                   /*!< UART1 IIR: IID (Bitfield-Mask: 0x03)                  */
#define UART1_IIR_IPEN_Pos                (0UL)                     /*!< UART1 IIR: IPEN (Bit 0)                               */
#define UART1_IIR_IPEN_Msk                (0x1UL)                   /*!< UART1 IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UART1_LCR_BREAK_Pos               (6UL)                     /*!< UART1 LCR: BREAK (Bit 6)                              */
#define UART1_LCR_BREAK_Msk               (0x40UL)                  /*!< UART1 LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UART1_LCR_STICKP_Pos              (5UL)                     /*!< UART1 LCR: STICKP (Bit 5)                             */
#define UART1_LCR_STICKP_Msk              (0x20UL)                  /*!< UART1 LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UART1_LCR_PARITY_Pos              (4UL)                     /*!< UART1 LCR: PARITY (Bit 4)                             */
#define UART1_LCR_PARITY_Msk              (0x10UL)                  /*!< UART1 LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UART1_LCR_PEN_Pos                 (3UL)                     /*!< UART1 LCR: PEN (Bit 3)                                */
#define UART1_LCR_PEN_Msk                 (0x8UL)                   /*!< UART1 LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UART1_LCR_STOPBIT_Pos             (2UL)                     /*!< UART1 LCR: STOPBIT (Bit 2)                            */
#define UART1_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UART1 LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UART1_LCR_DLEN_Pos                (0UL)                     /*!< UART1 LCR: DLEN (Bit 0)                               */
#define UART1_LCR_DLEN_Msk                (0x3UL)                   /*!< UART1 LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UART1_DCR_LBON_Pos                (4UL)                     /*!< UART1 DCR: LBON (Bit 4)                               */
#define UART1_DCR_LBON_Msk                (0x10UL)                  /*!< UART1 DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UART1_DCR_RXINV_Pos               (3UL)                     /*!< UART1 DCR: RXINV (Bit 3)                              */
#define UART1_DCR_RXINV_Msk               (0x8UL)                   /*!< UART1 DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UART1_DCR_TXINV_Pos               (2UL)                     /*!< UART1 DCR: TXINV (Bit 2)                              */
#define UART1_DCR_TXINV_Msk               (0x4UL)                   /*!< UART1 DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UART1_LSR_TEMT_Pos                (6UL)                     /*!< UART1 LSR: TEMT (Bit 6)                               */
#define UART1_LSR_TEMT_Msk                (0x40UL)                  /*!< UART1 LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UART1_LSR_THRE_Pos                (5UL)                     /*!< UART1 LSR: THRE (Bit 5)                               */
#define UART1_LSR_THRE_Msk                (0x20UL)                  /*!< UART1 LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UART1_LSR_BI_Pos                  (4UL)                     /*!< UART1 LSR: BI (Bit 4)                                 */
#define UART1_LSR_BI_Msk                  (0x10UL)                  /*!< UART1 LSR: BI (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_FE_Pos                  (3UL)                     /*!< UART1 LSR: FE (Bit 3)                                 */
#define UART1_LSR_FE_Msk                  (0x8UL)                   /*!< UART1 LSR: FE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_PE_Pos                  (2UL)                     /*!< UART1 LSR: PE (Bit 2)                                 */
#define UART1_LSR_PE_Msk                  (0x4UL)                   /*!< UART1 LSR: PE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_OE_Pos                  (1UL)                     /*!< UART1 LSR: OE (Bit 1)                                 */
#define UART1_LSR_OE_Msk                  (0x2UL)                   /*!< UART1 LSR: OE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_DR_Pos                  (0UL)                     /*!< UART1 LSR: DR (Bit 0)                                 */
#define UART1_LSR_DR_Msk                  (0x1UL)                   /*!< UART1 LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UART1_BDR_BDR_Pos                 (0UL)                     /*!< UART1 BDR: BDR (Bit 0)                                */
#define UART1_BDR_BDR_Msk                 (0xffffUL)                /*!< UART1 BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UART1_BFR_BFR_Pos                 (0UL)                     /*!< UART1 BFR: BFR (Bit 0)                                */
#define UART1_BFR_BFR_Msk                 (0xffUL)                  /*!< UART1 BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UART1_IDTR_SMS_Pos                (7UL)                     /*!< UART1 IDTR: SMS (Bit 7)                               */
#define UART1_IDTR_SMS_Msk                (0x80UL)                  /*!< UART1 IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UART1_IDTR_DMS_Pos                (6UL)                     /*!< UART1 IDTR: DMS (Bit 6)                               */
#define UART1_IDTR_DMS_Msk                (0x40UL)                  /*!< UART1 IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UART1_IDTR_WAITVAL_Pos            (0UL)                     /*!< UART1 IDTR: WAITVAL (Bit 0)                           */
#define UART1_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UART1 IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                          LPUART                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define LPUART_CR1_PEN_Pos                (14UL)                    /*!< LPUART CR1: PEN (Bit 14)                              */
#define LPUART_CR1_PEN_Msk                (0x4000UL)                /*!< LPUART CR1: PEN (Bitfield-Mask: 0x01)                 */
#define LPUART_CR1_STKPEN_Pos             (13UL)                    /*!< LPUART CR1: STKPEN (Bit 13)                           */
#define LPUART_CR1_STKPEN_Msk             (0x2000UL)                /*!< LPUART CR1: STKPEN (Bitfield-Mask: 0x01)              */
#define LPUART_CR1_PSEL_Pos               (12UL)                    /*!< LPUART CR1: PSEL (Bit 12)                             */
#define LPUART_CR1_PSEL_Msk               (0x1000UL)                /*!< LPUART CR1: PSEL (Bitfield-Mask: 0x01)                */
#define LPUART_CR1_DLEN_Pos               (9UL)                     /*!< LPUART CR1: DLEN (Bit 9)                              */
#define LPUART_CR1_DLEN_Msk               (0x600UL)                 /*!< LPUART CR1: DLEN (Bitfield-Mask: 0x03)                */
#define LPUART_CR1_STOPB_Pos              (7UL)                     /*!< LPUART CR1: STOPB (Bit 7)                             */
#define LPUART_CR1_STOPB_Msk              (0x80UL)                  /*!< LPUART CR1: STOPB (Bitfield-Mask: 0x01)               */
#define LPUART_CR1_OVRS_Pos               (5UL)                     /*!< LPUART CR1: OVRS (Bit 5)                              */
#define LPUART_CR1_OVRS_Msk               (0x60UL)                  /*!< LPUART CR1: OVRS (Bitfield-Mask: 0x03)                */
#define LPUART_CR1_HDCOM_Pos              (4UL)                     /*!< LPUART CR1: HDCOM (Bit 4)                             */
#define LPUART_CR1_HDCOM_Msk              (0x10UL)                  /*!< LPUART CR1: HDCOM (Bitfield-Mask: 0x01)               */
#define LPUART_CR1_TXE_Pos                (3UL)                     /*!< LPUART CR1: TXE (Bit 3)                               */
#define LPUART_CR1_TXE_Msk                (0x8UL)                   /*!< LPUART CR1: TXE (Bitfield-Mask: 0x01)                 */
#define LPUART_CR1_RXE_Pos                (2UL)                     /*!< LPUART CR1: RXE (Bit 2)                               */
#define LPUART_CR1_RXE_Msk                (0x4UL)                   /*!< LPUART CR1: RXE (Bitfield-Mask: 0x01)                 */
#define LPUART_CR1_WAKEN_Pos              (1UL)                     /*!< LPUART CR1: WAKEN (Bit 1)                             */
#define LPUART_CR1_WAKEN_Msk              (0x2UL)                   /*!< LPUART CR1: WAKEN (Bitfield-Mask: 0x01)               */
#define LPUART_CR1_LPUEN_Pos              (0UL)                     /*!< LPUART CR1: LPUEN (Bit 0)                             */
#define LPUART_CR1_LPUEN_Msk              (0x1UL)                   /*!< LPUART CR1: LPUEN (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define LPUART_CR2_DEALST_Pos             (16UL)                    /*!< LPUART CR2: DEALST (Bit 16)                           */
#define LPUART_CR2_DEALST_Msk             (0x1f0000UL)              /*!< LPUART CR2: DEALST (Bitfield-Mask: 0x1f)              */
#define LPUART_CR2_DEALFT_Pos             (8UL)                     /*!< LPUART CR2: DEALFT (Bit 8)                            */
#define LPUART_CR2_DEALFT_Msk             (0x1f00UL)                /*!< LPUART CR2: DEALFT (Bitfield-Mask: 0x1f)              */
#define LPUART_CR2_DEPOL_Pos              (7UL)                     /*!< LPUART CR2: DEPOL (Bit 7)                             */
#define LPUART_CR2_DEPOL_Msk              (0x80UL)                  /*!< LPUART CR2: DEPOL (Bitfield-Mask: 0x01)               */
#define LPUART_CR2_DEPEN_Pos              (6UL)                     /*!< LPUART CR2: DEPEN (Bit 6)                             */
#define LPUART_CR2_DEPEN_Msk              (0x40UL)                  /*!< LPUART CR2: DEPEN (Bitfield-Mask: 0x01)               */
#define LPUART_CR2_RCDEN_Pos              (4UL)                     /*!< LPUART CR2: RCDEN (Bit 4)                             */
#define LPUART_CR2_RCDEN_Msk              (0x10UL)                  /*!< LPUART CR2: RCDEN (Bitfield-Mask: 0x01)               */
#define LPUART_CR2_RTOEN_Pos              (3UL)                     /*!< LPUART CR2: RTOEN (Bit 3)                             */
#define LPUART_CR2_RTOEN_Msk              (0x8UL)                   /*!< LPUART CR2: RTOEN (Bitfield-Mask: 0x01)               */
/* ==========================================================  IER  ========================================================== */
#define LPUART_IER_RCDIEN_Pos             (7UL)                     /*!< LPUART IER: RCDIEN (Bit 7)                            */
#define LPUART_IER_RCDIEN_Msk             (0x80UL)                  /*!< LPUART IER: RCDIEN (Bitfield-Mask: 0x01)              */
#define LPUART_IER_RTOIEN_Pos             (6UL)                     /*!< LPUART IER: RTOIEN (Bit 6)                            */
#define LPUART_IER_RTOIEN_Msk             (0x40UL)                  /*!< LPUART IER: RTOIEN (Bitfield-Mask: 0x01)              */
#define LPUART_IER_SBDIEN_Pos             (4UL)                     /*!< LPUART IER: SBDIEN (Bit 4)                            */
#define LPUART_IER_SBDIEN_Msk             (0x10UL)                  /*!< LPUART IER: SBDIEN (Bitfield-Mask: 0x01)              */
#define LPUART_IER_TXCIEN_Pos             (2UL)                     /*!< LPUART IER: TXCIEN (Bit 2)                            */
#define LPUART_IER_TXCIEN_Msk             (0x4UL)                   /*!< LPUART IER: TXCIEN (Bitfield-Mask: 0x01)              */
#define LPUART_IER_RXCIEN_Pos             (0UL)                     /*!< LPUART IER: RXCIEN (Bit 0)                            */
#define LPUART_IER_RXCIEN_Msk             (0x1UL)                   /*!< LPUART IER: RXCIEN (Bitfield-Mask: 0x01)              */
/* =========================================================  IFSR  ========================================================== */
#define LPUART_IFSR_DOR_Pos               (15UL)                    /*!< LPUART IFSR: DOR (Bit 15)                             */
#define LPUART_IFSR_DOR_Msk               (0x8000UL)                /*!< LPUART IFSR: DOR (Bitfield-Mask: 0x01)                */
#define LPUART_IFSR_FE_Pos                (14UL)                    /*!< LPUART IFSR: FE (Bit 14)                              */
#define LPUART_IFSR_FE_Msk                (0x4000UL)                /*!< LPUART IFSR: FE (Bitfield-Mask: 0x01)                 */
#define LPUART_IFSR_PE_Pos                (13UL)                    /*!< LPUART IFSR: PE (Bit 13)                              */
#define LPUART_IFSR_PE_Msk                (0x2000UL)                /*!< LPUART IFSR: PE (Bitfield-Mask: 0x01)                 */
#define LPUART_IFSR_RXBUSY_Pos            (12UL)                    /*!< LPUART IFSR: RXBUSY (Bit 12)                          */
#define LPUART_IFSR_RXBUSY_Msk            (0x1000UL)                /*!< LPUART IFSR: RXBUSY (Bitfield-Mask: 0x01)             */
#define LPUART_IFSR_RCDIFLAG_Pos          (7UL)                     /*!< LPUART IFSR: RCDIFLAG (Bit 7)                         */
#define LPUART_IFSR_RCDIFLAG_Msk          (0x80UL)                  /*!< LPUART IFSR: RCDIFLAG (Bitfield-Mask: 0x01)           */
#define LPUART_IFSR_RTOIFLAG_Pos          (6UL)                     /*!< LPUART IFSR: RTOIFLAG (Bit 6)                         */
#define LPUART_IFSR_RTOIFLAG_Msk          (0x40UL)                  /*!< LPUART IFSR: RTOIFLAG (Bitfield-Mask: 0x01)           */
#define LPUART_IFSR_SBDIFLAG_Pos          (4UL)                     /*!< LPUART IFSR: SBDIFLAG (Bit 4)                         */
#define LPUART_IFSR_SBDIFLAG_Msk          (0x10UL)                  /*!< LPUART IFSR: SBDIFLAG (Bitfield-Mask: 0x01)           */
#define LPUART_IFSR_TXCIFLAG_Pos          (2UL)                     /*!< LPUART IFSR: TXCIFLAG (Bit 2)                         */
#define LPUART_IFSR_TXCIFLAG_Msk          (0x4UL)                   /*!< LPUART IFSR: TXCIFLAG (Bitfield-Mask: 0x01)           */
#define LPUART_IFSR_RXCIFLAG_Pos          (0UL)                     /*!< LPUART IFSR: RXCIFLAG (Bit 0)                         */
#define LPUART_IFSR_RXCIFLAG_Msk          (0x1UL)                   /*!< LPUART IFSR: RXCIFLAG (Bitfield-Mask: 0x01)           */
/* ==========================================================  RDR  ========================================================== */
#define LPUART_RDR_RDATA_Pos              (0UL)                     /*!< LPUART RDR: RDATA (Bit 0)                             */
#define LPUART_RDR_RDATA_Msk              (0xffUL)                  /*!< LPUART RDR: RDATA (Bitfield-Mask: 0xff)               */
/* ==========================================================  TDR  ========================================================== */
#define LPUART_TDR_TDATA_Pos              (0UL)                     /*!< LPUART TDR: TDATA (Bit 0)                             */
#define LPUART_TDR_TDATA_Msk              (0xffUL)                  /*!< LPUART TDR: TDATA (Bitfield-Mask: 0xff)               */
/* ==========================================================  BDR  ========================================================== */
#define LPUART_BDR_BDATA_Pos              (0UL)                     /*!< LPUART BDR: BDATA (Bit 0)                             */
#define LPUART_BDR_BDATA_Msk              (0xffffUL)                /*!< LPUART BDR: BDATA (Bitfield-Mask: 0xffff)             */
/* =========================================================  BCMP  ========================================================== */
#define LPUART_BCMP_BCMPS_Pos             (15UL)                    /*!< LPUART BCMP: BCMPS (Bit 15)                           */
#define LPUART_BCMP_BCMPS_Msk             (0x8000UL)                /*!< LPUART BCMP: BCMPS (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP8_Pos             (8UL)                     /*!< LPUART BCMP: BCMP8 (Bit 8)                            */
#define LPUART_BCMP_BCMP8_Msk             (0x100UL)                 /*!< LPUART BCMP: BCMP8 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP7_Pos             (7UL)                     /*!< LPUART BCMP: BCMP7 (Bit 7)                            */
#define LPUART_BCMP_BCMP7_Msk             (0x80UL)                  /*!< LPUART BCMP: BCMP7 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP6_Pos             (6UL)                     /*!< LPUART BCMP: BCMP6 (Bit 6)                            */
#define LPUART_BCMP_BCMP6_Msk             (0x40UL)                  /*!< LPUART BCMP: BCMP6 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP5_Pos             (5UL)                     /*!< LPUART BCMP: BCMP5 (Bit 5)                            */
#define LPUART_BCMP_BCMP5_Msk             (0x20UL)                  /*!< LPUART BCMP: BCMP5 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP4_Pos             (4UL)                     /*!< LPUART BCMP: BCMP4 (Bit 4)                            */
#define LPUART_BCMP_BCMP4_Msk             (0x10UL)                  /*!< LPUART BCMP: BCMP4 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP3_Pos             (3UL)                     /*!< LPUART BCMP: BCMP3 (Bit 3)                            */
#define LPUART_BCMP_BCMP3_Msk             (0x8UL)                   /*!< LPUART BCMP: BCMP3 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP2_Pos             (2UL)                     /*!< LPUART BCMP: BCMP2 (Bit 2)                            */
#define LPUART_BCMP_BCMP2_Msk             (0x4UL)                   /*!< LPUART BCMP: BCMP2 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP1_Pos             (1UL)                     /*!< LPUART BCMP: BCMP1 (Bit 1)                            */
#define LPUART_BCMP_BCMP1_Msk             (0x2UL)                   /*!< LPUART BCMP: BCMP1 (Bitfield-Mask: 0x01)              */
#define LPUART_BCMP_BCMP0_Pos             (0UL)                     /*!< LPUART BCMP: BCMP0 (Bit 0)                            */
#define LPUART_BCMP_BCMP0_Msk             (0x1UL)                   /*!< LPUART BCMP: BCMP0 (Bitfield-Mask: 0x01)              */
/* =========================================================  RTODR  ========================================================= */
#define LPUART_RTODR_RTOD_Pos             (0UL)                     /*!< LPUART RTODR: RTOD (Bit 0)                            */
#define LPUART_RTODR_RTOD_Msk             (0xffffffUL)              /*!< LPUART RTODR: RTOD (Bitfield-Mask: 0xffffff)          */
/* =========================================================  RCDR  ========================================================== */
#define LPUART_RCDR_RCDD_Pos              (0UL)                     /*!< LPUART RCDR: RCDD (Bit 0)                             */
#define LPUART_RCDR_RCDD_Msk              (0xffUL)                  /*!< LPUART RCDR: RCDD (Bitfield-Mask: 0xff)               */
/* =========================================================  DLYDR  ========================================================= */
#define LPUART_DLYDR_DLYD_Pos             (0UL)                     /*!< LPUART DLYDR: DLYD (Bit 0)                            */
#define LPUART_DLYDR_DLYD_Msk             (0xffUL)                  /*!< LPUART DLYDR: DLYD (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                            SCn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define SCn_CR1_SCnMD_Pos                 (15UL)                    /*!< SCn CR1: SCnMD (Bit 15)                               */
#define SCn_CR1_SCnMD_Msk                 (0x8000UL)                /*!< SCn CR1: SCnMD (Bitfield-Mask: 0x01)                  */
#define SCn_CR1_PENn_Pos                  (14UL)                    /*!< SCn CR1: PENn (Bit 14)                                */
#define SCn_CR1_PENn_Msk                  (0x4000UL)                /*!< SCn CR1: PENn (Bitfield-Mask: 0x01)                   */
#define SCn_CR1_PSELn_Pos                 (13UL)                    /*!< SCn CR1: PSELn (Bit 13)                               */
#define SCn_CR1_PSELn_Msk                 (0x2000UL)                /*!< SCn CR1: PSELn (Bitfield-Mask: 0x01)                  */
#define SCn_CR1_DLENn_Pos                 (9UL)                     /*!< SCn CR1: DLENn (Bit 9)                                */
#define SCn_CR1_DLENn_Msk                 (0x600UL)                 /*!< SCn CR1: DLENn (Bitfield-Mask: 0x03)                  */
#define SCn_CR1_STOPBn_Pos                (7UL)                     /*!< SCn CR1: STOPBn (Bit 7)                               */
#define SCn_CR1_STOPBn_Msk                (0x80UL)                  /*!< SCn CR1: STOPBn (Bitfield-Mask: 0x01)                 */
#define SCn_CR1_OVRSn_Pos                 (4UL)                     /*!< SCn CR1: OVRSn (Bit 4)                                */
#define SCn_CR1_OVRSn_Msk                 (0x10UL)                  /*!< SCn CR1: OVRSn (Bitfield-Mask: 0x01)                  */
#define SCn_CR1_TXEn_Pos                  (3UL)                     /*!< SCn CR1: TXEn (Bit 3)                                 */
#define SCn_CR1_TXEn_Msk                  (0x8UL)                   /*!< SCn CR1: TXEn (Bitfield-Mask: 0x01)                   */
#define SCn_CR1_RXEn_Pos                  (2UL)                     /*!< SCn CR1: RXEn (Bit 2)                                 */
#define SCn_CR1_RXEn_Msk                  (0x4UL)                   /*!< SCn CR1: RXEn (Bitfield-Mask: 0x01)                   */
#define SCn_CR1_RTOENn_Pos                (1UL)                     /*!< SCn CR1: RTOENn (Bit 1)                               */
#define SCn_CR1_RTOENn_Msk                (0x2UL)                   /*!< SCn CR1: RTOENn (Bitfield-Mask: 0x01)                 */
#define SCn_CR1_SCInEN_Pos                (0UL)                     /*!< SCn CR1: SCInEN (Bit 0)                               */
#define SCn_CR1_SCInEN_Msk                (0x1UL)                   /*!< SCn CR1: SCInEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  CR2  ========================================================== */
#define SCn_CR2_ACTENn_Pos                (15UL)                    /*!< SCn CR2: ACTENn (Bit 15)                              */
#define SCn_CR2_ACTENn_Msk                (0x8000UL)                /*!< SCn CR2: ACTENn (Bitfield-Mask: 0x01)                 */
#define SCn_CR2_WRENn_Pos                 (14UL)                    /*!< SCn CR2: WRENn (Bit 14)                               */
#define SCn_CR2_WRENn_Msk                 (0x4000UL)                /*!< SCn CR2: WRENn (Bitfield-Mask: 0x01)                  */
#define SCn_CR2_DACTENn_Pos               (13UL)                    /*!< SCn CR2: DACTENn (Bit 13)                             */
#define SCn_CR2_DACTENn_Msk               (0x2000UL)                /*!< SCn CR2: DACTENn (Bitfield-Mask: 0x01)                */
#define SCn_CR2_SCnINST_Pos               (9UL)                     /*!< SCn CR2: SCnINST (Bit 9)                              */
#define SCn_CR2_SCnINST_Msk               (0x200UL)                 /*!< SCn CR2: SCnINST (Bitfield-Mask: 0x01)                */
#define SCn_CR2_SCnPWRLV_Pos              (8UL)                     /*!< SCn CR2: SCnPWRLV (Bit 8)                             */
#define SCn_CR2_SCnPWRLV_Msk              (0x100UL)                 /*!< SCn CR2: SCnPWRLV (Bitfield-Mask: 0x01)               */
#define SCn_CR2_SCnRSTLV_Pos              (7UL)                     /*!< SCn CR2: SCnRSTLV (Bit 7)                             */
#define SCn_CR2_SCnRSTLV_Msk              (0x80UL)                  /*!< SCn CR2: SCnRSTLV (Bitfield-Mask: 0x01)               */
#define SCn_CR2_SCnDATALV_Pos             (6UL)                     /*!< SCn CR2: SCnDATALV (Bit 6)                            */
#define SCn_CR2_SCnDATALV_Msk             (0x40UL)                  /*!< SCn CR2: SCnDATALV (Bitfield-Mask: 0x01)              */
#define SCn_CR2_SCnCLKLV_Pos              (5UL)                     /*!< SCn CR2: SCnCLKLV (Bit 5)                             */
#define SCn_CR2_SCnCLKLV_Msk              (0x20UL)                  /*!< SCn CR2: SCnCLKLV (Bitfield-Mask: 0x01)               */
#define SCn_CR2_SCnCLKEN_Pos              (4UL)                     /*!< SCn CR2: SCnCLKEN (Bit 4)                             */
#define SCn_CR2_SCnCLKEN_Msk              (0x10UL)                  /*!< SCn CR2: SCnCLKEN (Bitfield-Mask: 0x01)               */
#define SCn_CR2_SCnCLKG_Pos               (0UL)                     /*!< SCn CR2: SCnCLKG (Bit 0)                              */
#define SCn_CR2_SCnCLKG_Msk               (0xfUL)                   /*!< SCn CR2: SCnCLKG (Bitfield-Mask: 0x0f)                */
/* ==========================================================  CR3  ========================================================== */
#define SCn_CR3_ACONDETn_Pos              (23UL)                    /*!< SCn CR3: ACONDETn (Bit 23)                            */
#define SCn_CR3_ACONDETn_Msk              (0x800000UL)              /*!< SCn CR3: ACONDETn (Bitfield-Mask: 0x01)               */
#define SCn_CR3_CONSELn_Pos               (22UL)                    /*!< SCn CR3: CONSELn (Bit 22)                             */
#define SCn_CR3_CONSELn_Msk               (0x400000UL)              /*!< SCn CR3: CONSELn (Bitfield-Mask: 0x01)                */
#define SCn_CR3_RETRYENn_Pos              (20UL)                    /*!< SCn CR3: RETRYENn (Bit 20)                            */
#define SCn_CR3_RETRYENn_Msk              (0x100000UL)              /*!< SCn CR3: RETRYENn (Bitfield-Mask: 0x01)               */
#define SCn_CR3_RETRYn_Pos                (17UL)                    /*!< SCn CR3: RETRYn (Bit 17)                              */
#define SCn_CR3_RETRYn_Msk                (0xe0000UL)               /*!< SCn CR3: RETRYn (Bitfield-Mask: 0x07)                 */
#define SCn_CR3_DLYRETRYn_Pos             (16UL)                    /*!< SCn CR3: DLYRETRYn (Bit 16)                           */
#define SCn_CR3_DLYRETRYn_Msk             (0x10000UL)               /*!< SCn CR3: DLYRETRYn (Bitfield-Mask: 0x01)              */
#define SCn_CR3_SCnINPOL_Pos              (13UL)                    /*!< SCn CR3: SCnINPOL (Bit 13)                            */
#define SCn_CR3_SCnINPOL_Msk              (0x6000UL)                /*!< SCn CR3: SCnINPOL (Bitfield-Mask: 0x03)               */
#define SCn_CR3_RXCNTENn_Pos              (8UL)                     /*!< SCn CR3: RXCNTENn (Bit 8)                             */
#define SCn_CR3_RXCNTENn_Msk              (0x100UL)                 /*!< SCn CR3: RXCNTENn (Bitfield-Mask: 0x01)               */
#define SCn_CR3_RXBLENn_Pos               (0UL)                     /*!< SCn CR3: RXBLENn (Bit 0)                              */
#define SCn_CR3_RXBLENn_Msk               (0xffUL)                  /*!< SCn CR3: RXBLENn (Bitfield-Mask: 0xff)                */
/* ==========================================================  IER  ========================================================== */
#define SCn_IER_RSTAIENn_Pos              (23UL)                    /*!< SCn IER: RSTAIENn (Bit 23)                            */
#define SCn_IER_RSTAIENn_Msk              (0x800000UL)              /*!< SCn IER: RSTAIENn (Bitfield-Mask: 0x01)               */
#define SCn_IER_SERIENn_Pos               (22UL)                    /*!< SCn IER: SERIENn (Bit 22)                             */
#define SCn_IER_SERIENn_Msk               (0x400000UL)              /*!< SCn IER: SERIENn (Bitfield-Mask: 0x01)                */
#define SCn_IER_SEDIENn_Pos               (21UL)                    /*!< SCn IER: SEDIENn (Bit 21)                             */
#define SCn_IER_SEDIENn_Msk               (0x200000UL)              /*!< SCn IER: SEDIENn (Bitfield-Mask: 0x01)                */
#define SCn_IER_CONERIENn_Pos             (20UL)                    /*!< SCn IER: CONERIENn (Bit 20)                           */
#define SCn_IER_CONERIENn_Msk             (0x100000UL)              /*!< SCn IER: CONERIENn (Bitfield-Mask: 0x01)              */
#define SCn_IER_CONEDIENn_Pos             (19UL)                    /*!< SCn IER: CONEDIENn (Bit 19)                           */
#define SCn_IER_CONEDIENn_Msk             (0x80000UL)               /*!< SCn IER: CONEDIENn (Bitfield-Mask: 0x01)              */
#define SCn_IER_TRYERIENn_Pos             (18UL)                    /*!< SCn IER: TRYERIENn (Bit 18)                           */
#define SCn_IER_TRYERIENn_Msk             (0x40000UL)               /*!< SCn IER: TRYERIENn (Bitfield-Mask: 0x01)              */
#define SCn_IER_SCINIENn_Pos              (17UL)                    /*!< SCn IER: SCINIENn (Bit 17)                            */
#define SCn_IER_SCINIENn_Msk              (0x20000UL)               /*!< SCn IER: SCINIENn (Bitfield-Mask: 0x01)               */
#define SCn_IER_BLEDIENn_Pos              (16UL)                    /*!< SCn IER: BLEDIENn (Bit 16)                            */
#define SCn_IER_BLEDIENn_Msk              (0x10000UL)               /*!< SCn IER: BLEDIENn (Bitfield-Mask: 0x01)               */
#define SCn_IER_RTOIENn_Pos               (6UL)                     /*!< SCn IER: RTOIENn (Bit 6)                              */
#define SCn_IER_RTOIENn_Msk               (0x40UL)                  /*!< SCn IER: RTOIENn (Bitfield-Mask: 0x01)                */
#define SCn_IER_TXCIENn_Pos               (2UL)                     /*!< SCn IER: TXCIENn (Bit 2)                              */
#define SCn_IER_TXCIENn_Msk               (0x4UL)                   /*!< SCn IER: TXCIENn (Bitfield-Mask: 0x01)                */
#define SCn_IER_RXCIENn_Pos               (0UL)                     /*!< SCn IER: RXCIENn (Bit 0)                              */
#define SCn_IER_RXCIENn_Msk               (0x1UL)                   /*!< SCn IER: RXCIENn (Bitfield-Mask: 0x01)                */
/* =========================================================  IFSR  ========================================================== */
#define SCn_IFSR_RSTAIFGn_Pos             (23UL)                    /*!< SCn IFSR: RSTAIFGn (Bit 23)                           */
#define SCn_IFSR_RSTAIFGn_Msk             (0x800000UL)              /*!< SCn IFSR: RSTAIFGn (Bitfield-Mask: 0x01)              */
#define SCn_IFSR_SERIFGn_Pos              (22UL)                    /*!< SCn IFSR: SERIFGn (Bit 22)                            */
#define SCn_IFSR_SERIFGn_Msk              (0x400000UL)              /*!< SCn IFSR: SERIFGn (Bitfield-Mask: 0x01)               */
#define SCn_IFSR_SEDIFGn_Pos              (21UL)                    /*!< SCn IFSR: SEDIFGn (Bit 21)                            */
#define SCn_IFSR_SEDIFGn_Msk              (0x200000UL)              /*!< SCn IFSR: SEDIFGn (Bitfield-Mask: 0x01)               */
#define SCn_IFSR_CONERIFGn_Pos            (20UL)                    /*!< SCn IFSR: CONERIFGn (Bit 20)                          */
#define SCn_IFSR_CONERIFGn_Msk            (0x100000UL)              /*!< SCn IFSR: CONERIFGn (Bitfield-Mask: 0x01)             */
#define SCn_IFSR_CONEDIFGn_Pos            (19UL)                    /*!< SCn IFSR: CONEDIFGn (Bit 19)                          */
#define SCn_IFSR_CONEDIFGn_Msk            (0x80000UL)               /*!< SCn IFSR: CONEDIFGn (Bitfield-Mask: 0x01)             */
#define SCn_IFSR_TRYERIFGn_Pos            (18UL)                    /*!< SCn IFSR: TRYERIFGn (Bit 18)                          */
#define SCn_IFSR_TRYERIFGn_Msk            (0x40000UL)               /*!< SCn IFSR: TRYERIFGn (Bitfield-Mask: 0x01)             */
#define SCn_IFSR_SCINIFGn_Pos             (17UL)                    /*!< SCn IFSR: SCINIFGn (Bit 17)                           */
#define SCn_IFSR_SCINIFGn_Msk             (0x20000UL)               /*!< SCn IFSR: SCINIFGn (Bitfield-Mask: 0x01)              */
#define SCn_IFSR_BLEDIFGn_Pos             (16UL)                    /*!< SCn IFSR: BLEDIFGn (Bit 16)                           */
#define SCn_IFSR_BLEDIFGn_Msk             (0x10000UL)               /*!< SCn IFSR: BLEDIFGn (Bitfield-Mask: 0x01)              */
#define SCn_IFSR_DORn_Pos                 (15UL)                    /*!< SCn IFSR: DORn (Bit 15)                               */
#define SCn_IFSR_DORn_Msk                 (0x8000UL)                /*!< SCn IFSR: DORn (Bitfield-Mask: 0x01)                  */
#define SCn_IFSR_FEn_Pos                  (14UL)                    /*!< SCn IFSR: FEn (Bit 14)                                */
#define SCn_IFSR_FEn_Msk                  (0x4000UL)                /*!< SCn IFSR: FEn (Bitfield-Mask: 0x01)                   */
#define SCn_IFSR_PEn_Pos                  (13UL)                    /*!< SCn IFSR: PEn (Bit 13)                                */
#define SCn_IFSR_PEn_Msk                  (0x2000UL)                /*!< SCn IFSR: PEn (Bitfield-Mask: 0x01)                   */
#define SCn_IFSR_RXBUSYn_Pos              (12UL)                    /*!< SCn IFSR: RXBUSYn (Bit 12)                            */
#define SCn_IFSR_RXBUSYn_Msk              (0x1000UL)                /*!< SCn IFSR: RXBUSYn (Bitfield-Mask: 0x01)               */
#define SCn_IFSR_RTOIFLAGn_Pos            (6UL)                     /*!< SCn IFSR: RTOIFLAGn (Bit 6)                           */
#define SCn_IFSR_RTOIFLAGn_Msk            (0x40UL)                  /*!< SCn IFSR: RTOIFLAGn (Bitfield-Mask: 0x01)             */
#define SCn_IFSR_TXCIFLAGn_Pos            (2UL)                     /*!< SCn IFSR: TXCIFLAGn (Bit 2)                           */
#define SCn_IFSR_TXCIFLAGn_Msk            (0x4UL)                   /*!< SCn IFSR: TXCIFLAGn (Bitfield-Mask: 0x01)             */
#define SCn_IFSR_RXCIFLAGn_Pos            (0UL)                     /*!< SCn IFSR: RXCIFLAGn (Bit 0)                           */
#define SCn_IFSR_RXCIFLAGn_Msk            (0x1UL)                   /*!< SCn IFSR: RXCIFLAGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  RDR  ========================================================== */
#define SCn_RDR_PARB_Pos                  (8UL)                     /*!< SCn RDR: PARB (Bit 8)                                 */
#define SCn_RDR_PARB_Msk                  (0x100UL)                 /*!< SCn RDR: PARB (Bitfield-Mask: 0x01)                   */
#define SCn_RDR_RDATA_Pos                 (0UL)                     /*!< SCn RDR: RDATA (Bit 0)                                */
#define SCn_RDR_RDATA_Msk                 (0xffUL)                  /*!< SCn RDR: RDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  TDR  ========================================================== */
#define SCn_TDR_TDATA_Pos                 (0UL)                     /*!< SCn TDR: TDATA (Bit 0)                                */
#define SCn_TDR_TDATA_Msk                 (0xffUL)                  /*!< SCn TDR: TDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  BDR  ========================================================== */
#define SCn_BDR_BDATA_Pos                 (0UL)                     /*!< SCn BDR: BDATA (Bit 0)                                */
#define SCn_BDR_BDATA_Msk                 (0xffffUL)                /*!< SCn BDR: BDATA (Bitfield-Mask: 0xffff)                */
/* =========================================================  BCMP  ========================================================== */
#define SCn_BCMP_BCMPS_Pos                (15UL)                    /*!< SCn BCMP: BCMPS (Bit 15)                              */
#define SCn_BCMP_BCMPS_Msk                (0x8000UL)                /*!< SCn BCMP: BCMPS (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP8_Pos                (8UL)                     /*!< SCn BCMP: BCMP8 (Bit 8)                               */
#define SCn_BCMP_BCMP8_Msk                (0x100UL)                 /*!< SCn BCMP: BCMP8 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP7_Pos                (7UL)                     /*!< SCn BCMP: BCMP7 (Bit 7)                               */
#define SCn_BCMP_BCMP7_Msk                (0x80UL)                  /*!< SCn BCMP: BCMP7 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP6_Pos                (6UL)                     /*!< SCn BCMP: BCMP6 (Bit 6)                               */
#define SCn_BCMP_BCMP6_Msk                (0x40UL)                  /*!< SCn BCMP: BCMP6 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP5_Pos                (5UL)                     /*!< SCn BCMP: BCMP5 (Bit 5)                               */
#define SCn_BCMP_BCMP5_Msk                (0x20UL)                  /*!< SCn BCMP: BCMP5 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP4_Pos                (4UL)                     /*!< SCn BCMP: BCMP4 (Bit 4)                               */
#define SCn_BCMP_BCMP4_Msk                (0x10UL)                  /*!< SCn BCMP: BCMP4 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP3_Pos                (3UL)                     /*!< SCn BCMP: BCMP3 (Bit 3)                               */
#define SCn_BCMP_BCMP3_Msk                (0x8UL)                   /*!< SCn BCMP: BCMP3 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP2_Pos                (2UL)                     /*!< SCn BCMP: BCMP2 (Bit 2)                               */
#define SCn_BCMP_BCMP2_Msk                (0x4UL)                   /*!< SCn BCMP: BCMP2 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP1_Pos                (1UL)                     /*!< SCn BCMP: BCMP1 (Bit 1)                               */
#define SCn_BCMP_BCMP1_Msk                (0x2UL)                   /*!< SCn BCMP: BCMP1 (Bitfield-Mask: 0x01)                 */
#define SCn_BCMP_BCMP0_Pos                (0UL)                     /*!< SCn BCMP: BCMP0 (Bit 0)                               */
#define SCn_BCMP_BCMP0_Msk                (0x1UL)                   /*!< SCn BCMP: BCMP0 (Bitfield-Mask: 0x01)                 */
/* =========================================================  RTODR  ========================================================= */
#define SCn_RTODR_RTOD_Pos                (0UL)                     /*!< SCn RTODR: RTOD (Bit 0)                               */
#define SCn_RTODR_RTOD_Msk                (0xffffffUL)              /*!< SCn RTODR: RTOD (Bitfield-Mask: 0xffffff)             */
/* =========================================================  EGTR  ========================================================== */
#define SCn_EGTR_EGT_Pos                  (0UL)                     /*!< SCn EGTR: EGT (Bit 0)                                 */
#define SCn_EGTR_EGT_Msk                  (0xffUL)                  /*!< SCn EGTR: EGT (Bitfield-Mask: 0xff)                   */
/* =========================================================  T3DR  ========================================================== */
#define SCn_T3DR_T3D_Pos                  (0UL)                     /*!< SCn T3DR: T3D (Bit 0)                                 */
#define SCn_T3DR_T3D_Msk                  (0xffffUL)                /*!< SCn T3DR: T3D (Bitfield-Mask: 0xffff)                 */
/* =========================================================  T4DR  ========================================================== */
#define SCn_T4DR_T4D_Pos                  (0UL)                     /*!< SCn T4DR: T4D (Bit 0)                                 */
#define SCn_T4DR_T4D_Msk                  (0xffffUL)                /*!< SCn T4DR: T4D (Bitfield-Mask: 0xffff)                 */


/* =========================================================================================================================== */
/* ================                                            SC0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define SC0_CR1_SCnMD_Pos                 (15UL)                    /*!< SC0 CR1: SCnMD (Bit 15)                               */
#define SC0_CR1_SCnMD_Msk                 (0x8000UL)                /*!< SC0 CR1: SCnMD (Bitfield-Mask: 0x01)                  */
#define SC0_CR1_PENn_Pos                  (14UL)                    /*!< SC0 CR1: PENn (Bit 14)                                */
#define SC0_CR1_PENn_Msk                  (0x4000UL)                /*!< SC0 CR1: PENn (Bitfield-Mask: 0x01)                   */
#define SC0_CR1_PSELn_Pos                 (13UL)                    /*!< SC0 CR1: PSELn (Bit 13)                               */
#define SC0_CR1_PSELn_Msk                 (0x2000UL)                /*!< SC0 CR1: PSELn (Bitfield-Mask: 0x01)                  */
#define SC0_CR1_DLENn_Pos                 (9UL)                     /*!< SC0 CR1: DLENn (Bit 9)                                */
#define SC0_CR1_DLENn_Msk                 (0x600UL)                 /*!< SC0 CR1: DLENn (Bitfield-Mask: 0x03)                  */
#define SC0_CR1_STOPBn_Pos                (7UL)                     /*!< SC0 CR1: STOPBn (Bit 7)                               */
#define SC0_CR1_STOPBn_Msk                (0x80UL)                  /*!< SC0 CR1: STOPBn (Bitfield-Mask: 0x01)                 */
#define SC0_CR1_OVRSn_Pos                 (4UL)                     /*!< SC0 CR1: OVRSn (Bit 4)                                */
#define SC0_CR1_OVRSn_Msk                 (0x10UL)                  /*!< SC0 CR1: OVRSn (Bitfield-Mask: 0x01)                  */
#define SC0_CR1_TXEn_Pos                  (3UL)                     /*!< SC0 CR1: TXEn (Bit 3)                                 */
#define SC0_CR1_TXEn_Msk                  (0x8UL)                   /*!< SC0 CR1: TXEn (Bitfield-Mask: 0x01)                   */
#define SC0_CR1_RXEn_Pos                  (2UL)                     /*!< SC0 CR1: RXEn (Bit 2)                                 */
#define SC0_CR1_RXEn_Msk                  (0x4UL)                   /*!< SC0 CR1: RXEn (Bitfield-Mask: 0x01)                   */
#define SC0_CR1_RTOENn_Pos                (1UL)                     /*!< SC0 CR1: RTOENn (Bit 1)                               */
#define SC0_CR1_RTOENn_Msk                (0x2UL)                   /*!< SC0 CR1: RTOENn (Bitfield-Mask: 0x01)                 */
#define SC0_CR1_SCInEN_Pos                (0UL)                     /*!< SC0 CR1: SCInEN (Bit 0)                               */
#define SC0_CR1_SCInEN_Msk                (0x1UL)                   /*!< SC0 CR1: SCInEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  CR2  ========================================================== */
#define SC0_CR2_ACTENn_Pos                (15UL)                    /*!< SC0 CR2: ACTENn (Bit 15)                              */
#define SC0_CR2_ACTENn_Msk                (0x8000UL)                /*!< SC0 CR2: ACTENn (Bitfield-Mask: 0x01)                 */
#define SC0_CR2_WRENn_Pos                 (14UL)                    /*!< SC0 CR2: WRENn (Bit 14)                               */
#define SC0_CR2_WRENn_Msk                 (0x4000UL)                /*!< SC0 CR2: WRENn (Bitfield-Mask: 0x01)                  */
#define SC0_CR2_DACTENn_Pos               (13UL)                    /*!< SC0 CR2: DACTENn (Bit 13)                             */
#define SC0_CR2_DACTENn_Msk               (0x2000UL)                /*!< SC0 CR2: DACTENn (Bitfield-Mask: 0x01)                */
#define SC0_CR2_SCnINST_Pos               (9UL)                     /*!< SC0 CR2: SCnINST (Bit 9)                              */
#define SC0_CR2_SCnINST_Msk               (0x200UL)                 /*!< SC0 CR2: SCnINST (Bitfield-Mask: 0x01)                */
#define SC0_CR2_SCnPWRLV_Pos              (8UL)                     /*!< SC0 CR2: SCnPWRLV (Bit 8)                             */
#define SC0_CR2_SCnPWRLV_Msk              (0x100UL)                 /*!< SC0 CR2: SCnPWRLV (Bitfield-Mask: 0x01)               */
#define SC0_CR2_SCnRSTLV_Pos              (7UL)                     /*!< SC0 CR2: SCnRSTLV (Bit 7)                             */
#define SC0_CR2_SCnRSTLV_Msk              (0x80UL)                  /*!< SC0 CR2: SCnRSTLV (Bitfield-Mask: 0x01)               */
#define SC0_CR2_SCnDATALV_Pos             (6UL)                     /*!< SC0 CR2: SCnDATALV (Bit 6)                            */
#define SC0_CR2_SCnDATALV_Msk             (0x40UL)                  /*!< SC0 CR2: SCnDATALV (Bitfield-Mask: 0x01)              */
#define SC0_CR2_SCnCLKLV_Pos              (5UL)                     /*!< SC0 CR2: SCnCLKLV (Bit 5)                             */
#define SC0_CR2_SCnCLKLV_Msk              (0x20UL)                  /*!< SC0 CR2: SCnCLKLV (Bitfield-Mask: 0x01)               */
#define SC0_CR2_SCnCLKEN_Pos              (4UL)                     /*!< SC0 CR2: SCnCLKEN (Bit 4)                             */
#define SC0_CR2_SCnCLKEN_Msk              (0x10UL)                  /*!< SC0 CR2: SCnCLKEN (Bitfield-Mask: 0x01)               */
#define SC0_CR2_SCnCLKG_Pos               (0UL)                     /*!< SC0 CR2: SCnCLKG (Bit 0)                              */
#define SC0_CR2_SCnCLKG_Msk               (0xfUL)                   /*!< SC0 CR2: SCnCLKG (Bitfield-Mask: 0x0f)                */
/* ==========================================================  CR3  ========================================================== */
#define SC0_CR3_ACONDETn_Pos              (23UL)                    /*!< SC0 CR3: ACONDETn (Bit 23)                            */
#define SC0_CR3_ACONDETn_Msk              (0x800000UL)              /*!< SC0 CR3: ACONDETn (Bitfield-Mask: 0x01)               */
#define SC0_CR3_CONSELn_Pos               (22UL)                    /*!< SC0 CR3: CONSELn (Bit 22)                             */
#define SC0_CR3_CONSELn_Msk               (0x400000UL)              /*!< SC0 CR3: CONSELn (Bitfield-Mask: 0x01)                */
#define SC0_CR3_RETRYENn_Pos              (20UL)                    /*!< SC0 CR3: RETRYENn (Bit 20)                            */
#define SC0_CR3_RETRYENn_Msk              (0x100000UL)              /*!< SC0 CR3: RETRYENn (Bitfield-Mask: 0x01)               */
#define SC0_CR3_RETRYn_Pos                (17UL)                    /*!< SC0 CR3: RETRYn (Bit 17)                              */
#define SC0_CR3_RETRYn_Msk                (0xe0000UL)               /*!< SC0 CR3: RETRYn (Bitfield-Mask: 0x07)                 */
#define SC0_CR3_DLYRETRYn_Pos             (16UL)                    /*!< SC0 CR3: DLYRETRYn (Bit 16)                           */
#define SC0_CR3_DLYRETRYn_Msk             (0x10000UL)               /*!< SC0 CR3: DLYRETRYn (Bitfield-Mask: 0x01)              */
#define SC0_CR3_SCnINPOL_Pos              (13UL)                    /*!< SC0 CR3: SCnINPOL (Bit 13)                            */
#define SC0_CR3_SCnINPOL_Msk              (0x6000UL)                /*!< SC0 CR3: SCnINPOL (Bitfield-Mask: 0x03)               */
#define SC0_CR3_RXCNTENn_Pos              (8UL)                     /*!< SC0 CR3: RXCNTENn (Bit 8)                             */
#define SC0_CR3_RXCNTENn_Msk              (0x100UL)                 /*!< SC0 CR3: RXCNTENn (Bitfield-Mask: 0x01)               */
#define SC0_CR3_RXBLENn_Pos               (0UL)                     /*!< SC0 CR3: RXBLENn (Bit 0)                              */
#define SC0_CR3_RXBLENn_Msk               (0xffUL)                  /*!< SC0 CR3: RXBLENn (Bitfield-Mask: 0xff)                */
/* ==========================================================  IER  ========================================================== */
#define SC0_IER_RSTAIENn_Pos              (23UL)                    /*!< SC0 IER: RSTAIENn (Bit 23)                            */
#define SC0_IER_RSTAIENn_Msk              (0x800000UL)              /*!< SC0 IER: RSTAIENn (Bitfield-Mask: 0x01)               */
#define SC0_IER_SERIENn_Pos               (22UL)                    /*!< SC0 IER: SERIENn (Bit 22)                             */
#define SC0_IER_SERIENn_Msk               (0x400000UL)              /*!< SC0 IER: SERIENn (Bitfield-Mask: 0x01)                */
#define SC0_IER_SEDIENn_Pos               (21UL)                    /*!< SC0 IER: SEDIENn (Bit 21)                             */
#define SC0_IER_SEDIENn_Msk               (0x200000UL)              /*!< SC0 IER: SEDIENn (Bitfield-Mask: 0x01)                */
#define SC0_IER_CONERIENn_Pos             (20UL)                    /*!< SC0 IER: CONERIENn (Bit 20)                           */
#define SC0_IER_CONERIENn_Msk             (0x100000UL)              /*!< SC0 IER: CONERIENn (Bitfield-Mask: 0x01)              */
#define SC0_IER_CONEDIENn_Pos             (19UL)                    /*!< SC0 IER: CONEDIENn (Bit 19)                           */
#define SC0_IER_CONEDIENn_Msk             (0x80000UL)               /*!< SC0 IER: CONEDIENn (Bitfield-Mask: 0x01)              */
#define SC0_IER_TRYERIENn_Pos             (18UL)                    /*!< SC0 IER: TRYERIENn (Bit 18)                           */
#define SC0_IER_TRYERIENn_Msk             (0x40000UL)               /*!< SC0 IER: TRYERIENn (Bitfield-Mask: 0x01)              */
#define SC0_IER_SCINIENn_Pos              (17UL)                    /*!< SC0 IER: SCINIENn (Bit 17)                            */
#define SC0_IER_SCINIENn_Msk              (0x20000UL)               /*!< SC0 IER: SCINIENn (Bitfield-Mask: 0x01)               */
#define SC0_IER_BLEDIENn_Pos              (16UL)                    /*!< SC0 IER: BLEDIENn (Bit 16)                            */
#define SC0_IER_BLEDIENn_Msk              (0x10000UL)               /*!< SC0 IER: BLEDIENn (Bitfield-Mask: 0x01)               */
#define SC0_IER_RTOIENn_Pos               (6UL)                     /*!< SC0 IER: RTOIENn (Bit 6)                              */
#define SC0_IER_RTOIENn_Msk               (0x40UL)                  /*!< SC0 IER: RTOIENn (Bitfield-Mask: 0x01)                */
#define SC0_IER_TXCIENn_Pos               (2UL)                     /*!< SC0 IER: TXCIENn (Bit 2)                              */
#define SC0_IER_TXCIENn_Msk               (0x4UL)                   /*!< SC0 IER: TXCIENn (Bitfield-Mask: 0x01)                */
#define SC0_IER_RXCIENn_Pos               (0UL)                     /*!< SC0 IER: RXCIENn (Bit 0)                              */
#define SC0_IER_RXCIENn_Msk               (0x1UL)                   /*!< SC0 IER: RXCIENn (Bitfield-Mask: 0x01)                */
/* =========================================================  IFSR  ========================================================== */
#define SC0_IFSR_RSTAIFGn_Pos             (23UL)                    /*!< SC0 IFSR: RSTAIFGn (Bit 23)                           */
#define SC0_IFSR_RSTAIFGn_Msk             (0x800000UL)              /*!< SC0 IFSR: RSTAIFGn (Bitfield-Mask: 0x01)              */
#define SC0_IFSR_SERIFGn_Pos              (22UL)                    /*!< SC0 IFSR: SERIFGn (Bit 22)                            */
#define SC0_IFSR_SERIFGn_Msk              (0x400000UL)              /*!< SC0 IFSR: SERIFGn (Bitfield-Mask: 0x01)               */
#define SC0_IFSR_SEDIFGn_Pos              (21UL)                    /*!< SC0 IFSR: SEDIFGn (Bit 21)                            */
#define SC0_IFSR_SEDIFGn_Msk              (0x200000UL)              /*!< SC0 IFSR: SEDIFGn (Bitfield-Mask: 0x01)               */
#define SC0_IFSR_CONERIFGn_Pos            (20UL)                    /*!< SC0 IFSR: CONERIFGn (Bit 20)                          */
#define SC0_IFSR_CONERIFGn_Msk            (0x100000UL)              /*!< SC0 IFSR: CONERIFGn (Bitfield-Mask: 0x01)             */
#define SC0_IFSR_CONEDIFGn_Pos            (19UL)                    /*!< SC0 IFSR: CONEDIFGn (Bit 19)                          */
#define SC0_IFSR_CONEDIFGn_Msk            (0x80000UL)               /*!< SC0 IFSR: CONEDIFGn (Bitfield-Mask: 0x01)             */
#define SC0_IFSR_TRYERIFGn_Pos            (18UL)                    /*!< SC0 IFSR: TRYERIFGn (Bit 18)                          */
#define SC0_IFSR_TRYERIFGn_Msk            (0x40000UL)               /*!< SC0 IFSR: TRYERIFGn (Bitfield-Mask: 0x01)             */
#define SC0_IFSR_SCINIFGn_Pos             (17UL)                    /*!< SC0 IFSR: SCINIFGn (Bit 17)                           */
#define SC0_IFSR_SCINIFGn_Msk             (0x20000UL)               /*!< SC0 IFSR: SCINIFGn (Bitfield-Mask: 0x01)              */
#define SC0_IFSR_BLEDIFGn_Pos             (16UL)                    /*!< SC0 IFSR: BLEDIFGn (Bit 16)                           */
#define SC0_IFSR_BLEDIFGn_Msk             (0x10000UL)               /*!< SC0 IFSR: BLEDIFGn (Bitfield-Mask: 0x01)              */
#define SC0_IFSR_DORn_Pos                 (15UL)                    /*!< SC0 IFSR: DORn (Bit 15)                               */
#define SC0_IFSR_DORn_Msk                 (0x8000UL)                /*!< SC0 IFSR: DORn (Bitfield-Mask: 0x01)                  */
#define SC0_IFSR_FEn_Pos                  (14UL)                    /*!< SC0 IFSR: FEn (Bit 14)                                */
#define SC0_IFSR_FEn_Msk                  (0x4000UL)                /*!< SC0 IFSR: FEn (Bitfield-Mask: 0x01)                   */
#define SC0_IFSR_PEn_Pos                  (13UL)                    /*!< SC0 IFSR: PEn (Bit 13)                                */
#define SC0_IFSR_PEn_Msk                  (0x2000UL)                /*!< SC0 IFSR: PEn (Bitfield-Mask: 0x01)                   */
#define SC0_IFSR_RXBUSYn_Pos              (12UL)                    /*!< SC0 IFSR: RXBUSYn (Bit 12)                            */
#define SC0_IFSR_RXBUSYn_Msk              (0x1000UL)                /*!< SC0 IFSR: RXBUSYn (Bitfield-Mask: 0x01)               */
#define SC0_IFSR_RTOIFLAGn_Pos            (6UL)                     /*!< SC0 IFSR: RTOIFLAGn (Bit 6)                           */
#define SC0_IFSR_RTOIFLAGn_Msk            (0x40UL)                  /*!< SC0 IFSR: RTOIFLAGn (Bitfield-Mask: 0x01)             */
#define SC0_IFSR_TXCIFLAGn_Pos            (2UL)                     /*!< SC0 IFSR: TXCIFLAGn (Bit 2)                           */
#define SC0_IFSR_TXCIFLAGn_Msk            (0x4UL)                   /*!< SC0 IFSR: TXCIFLAGn (Bitfield-Mask: 0x01)             */
#define SC0_IFSR_RXCIFLAGn_Pos            (0UL)                     /*!< SC0 IFSR: RXCIFLAGn (Bit 0)                           */
#define SC0_IFSR_RXCIFLAGn_Msk            (0x1UL)                   /*!< SC0 IFSR: RXCIFLAGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  RDR  ========================================================== */
#define SC0_RDR_PARB_Pos                  (8UL)                     /*!< SC0 RDR: PARB (Bit 8)                                 */
#define SC0_RDR_PARB_Msk                  (0x100UL)                 /*!< SC0 RDR: PARB (Bitfield-Mask: 0x01)                   */
#define SC0_RDR_RDATA_Pos                 (0UL)                     /*!< SC0 RDR: RDATA (Bit 0)                                */
#define SC0_RDR_RDATA_Msk                 (0xffUL)                  /*!< SC0 RDR: RDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  TDR  ========================================================== */
#define SC0_TDR_TDATA_Pos                 (0UL)                     /*!< SC0 TDR: TDATA (Bit 0)                                */
#define SC0_TDR_TDATA_Msk                 (0xffUL)                  /*!< SC0 TDR: TDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  BDR  ========================================================== */
#define SC0_BDR_BDATA_Pos                 (0UL)                     /*!< SC0 BDR: BDATA (Bit 0)                                */
#define SC0_BDR_BDATA_Msk                 (0xffffUL)                /*!< SC0 BDR: BDATA (Bitfield-Mask: 0xffff)                */
/* =========================================================  BCMP  ========================================================== */
#define SC0_BCMP_BCMPS_Pos                (15UL)                    /*!< SC0 BCMP: BCMPS (Bit 15)                              */
#define SC0_BCMP_BCMPS_Msk                (0x8000UL)                /*!< SC0 BCMP: BCMPS (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP8_Pos                (8UL)                     /*!< SC0 BCMP: BCMP8 (Bit 8)                               */
#define SC0_BCMP_BCMP8_Msk                (0x100UL)                 /*!< SC0 BCMP: BCMP8 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP7_Pos                (7UL)                     /*!< SC0 BCMP: BCMP7 (Bit 7)                               */
#define SC0_BCMP_BCMP7_Msk                (0x80UL)                  /*!< SC0 BCMP: BCMP7 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP6_Pos                (6UL)                     /*!< SC0 BCMP: BCMP6 (Bit 6)                               */
#define SC0_BCMP_BCMP6_Msk                (0x40UL)                  /*!< SC0 BCMP: BCMP6 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP5_Pos                (5UL)                     /*!< SC0 BCMP: BCMP5 (Bit 5)                               */
#define SC0_BCMP_BCMP5_Msk                (0x20UL)                  /*!< SC0 BCMP: BCMP5 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP4_Pos                (4UL)                     /*!< SC0 BCMP: BCMP4 (Bit 4)                               */
#define SC0_BCMP_BCMP4_Msk                (0x10UL)                  /*!< SC0 BCMP: BCMP4 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP3_Pos                (3UL)                     /*!< SC0 BCMP: BCMP3 (Bit 3)                               */
#define SC0_BCMP_BCMP3_Msk                (0x8UL)                   /*!< SC0 BCMP: BCMP3 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP2_Pos                (2UL)                     /*!< SC0 BCMP: BCMP2 (Bit 2)                               */
#define SC0_BCMP_BCMP2_Msk                (0x4UL)                   /*!< SC0 BCMP: BCMP2 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP1_Pos                (1UL)                     /*!< SC0 BCMP: BCMP1 (Bit 1)                               */
#define SC0_BCMP_BCMP1_Msk                (0x2UL)                   /*!< SC0 BCMP: BCMP1 (Bitfield-Mask: 0x01)                 */
#define SC0_BCMP_BCMP0_Pos                (0UL)                     /*!< SC0 BCMP: BCMP0 (Bit 0)                               */
#define SC0_BCMP_BCMP0_Msk                (0x1UL)                   /*!< SC0 BCMP: BCMP0 (Bitfield-Mask: 0x01)                 */
/* =========================================================  RTODR  ========================================================= */
#define SC0_RTODR_RTOD_Pos                (0UL)                     /*!< SC0 RTODR: RTOD (Bit 0)                               */
#define SC0_RTODR_RTOD_Msk                (0xffffffUL)              /*!< SC0 RTODR: RTOD (Bitfield-Mask: 0xffffff)             */
/* =========================================================  EGTR  ========================================================== */
#define SC0_EGTR_EGT_Pos                  (0UL)                     /*!< SC0 EGTR: EGT (Bit 0)                                 */
#define SC0_EGTR_EGT_Msk                  (0xffUL)                  /*!< SC0 EGTR: EGT (Bitfield-Mask: 0xff)                   */
/* =========================================================  T3DR  ========================================================== */
#define SC0_T3DR_T3D_Pos                  (0UL)                     /*!< SC0 T3DR: T3D (Bit 0)                                 */
#define SC0_T3DR_T3D_Msk                  (0xffffUL)                /*!< SC0 T3DR: T3D (Bitfield-Mask: 0xffff)                 */
/* =========================================================  T4DR  ========================================================== */
#define SC0_T4DR_T4D_Pos                  (0UL)                     /*!< SC0 T4DR: T4D (Bit 0)                                 */
#define SC0_T4DR_T4D_Msk                  (0xffffUL)                /*!< SC0 T4DR: T4D (Bitfield-Mask: 0xffff)                 */


/* =========================================================================================================================== */
/* ================                                            SC1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define SC1_CR1_SCnMD_Pos                 (15UL)                    /*!< SC1 CR1: SCnMD (Bit 15)                               */
#define SC1_CR1_SCnMD_Msk                 (0x8000UL)                /*!< SC1 CR1: SCnMD (Bitfield-Mask: 0x01)                  */
#define SC1_CR1_PENn_Pos                  (14UL)                    /*!< SC1 CR1: PENn (Bit 14)                                */
#define SC1_CR1_PENn_Msk                  (0x4000UL)                /*!< SC1 CR1: PENn (Bitfield-Mask: 0x01)                   */
#define SC1_CR1_PSELn_Pos                 (13UL)                    /*!< SC1 CR1: PSELn (Bit 13)                               */
#define SC1_CR1_PSELn_Msk                 (0x2000UL)                /*!< SC1 CR1: PSELn (Bitfield-Mask: 0x01)                  */
#define SC1_CR1_DLENn_Pos                 (9UL)                     /*!< SC1 CR1: DLENn (Bit 9)                                */
#define SC1_CR1_DLENn_Msk                 (0x600UL)                 /*!< SC1 CR1: DLENn (Bitfield-Mask: 0x03)                  */
#define SC1_CR1_STOPBn_Pos                (7UL)                     /*!< SC1 CR1: STOPBn (Bit 7)                               */
#define SC1_CR1_STOPBn_Msk                (0x80UL)                  /*!< SC1 CR1: STOPBn (Bitfield-Mask: 0x01)                 */
#define SC1_CR1_OVRSn_Pos                 (4UL)                     /*!< SC1 CR1: OVRSn (Bit 4)                                */
#define SC1_CR1_OVRSn_Msk                 (0x10UL)                  /*!< SC1 CR1: OVRSn (Bitfield-Mask: 0x01)                  */
#define SC1_CR1_TXEn_Pos                  (3UL)                     /*!< SC1 CR1: TXEn (Bit 3)                                 */
#define SC1_CR1_TXEn_Msk                  (0x8UL)                   /*!< SC1 CR1: TXEn (Bitfield-Mask: 0x01)                   */
#define SC1_CR1_RXEn_Pos                  (2UL)                     /*!< SC1 CR1: RXEn (Bit 2)                                 */
#define SC1_CR1_RXEn_Msk                  (0x4UL)                   /*!< SC1 CR1: RXEn (Bitfield-Mask: 0x01)                   */
#define SC1_CR1_RTOENn_Pos                (1UL)                     /*!< SC1 CR1: RTOENn (Bit 1)                               */
#define SC1_CR1_RTOENn_Msk                (0x2UL)                   /*!< SC1 CR1: RTOENn (Bitfield-Mask: 0x01)                 */
#define SC1_CR1_SCInEN_Pos                (0UL)                     /*!< SC1 CR1: SCInEN (Bit 0)                               */
#define SC1_CR1_SCInEN_Msk                (0x1UL)                   /*!< SC1 CR1: SCInEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  CR2  ========================================================== */
#define SC1_CR2_ACTENn_Pos                (15UL)                    /*!< SC1 CR2: ACTENn (Bit 15)                              */
#define SC1_CR2_ACTENn_Msk                (0x8000UL)                /*!< SC1 CR2: ACTENn (Bitfield-Mask: 0x01)                 */
#define SC1_CR2_WRENn_Pos                 (14UL)                    /*!< SC1 CR2: WRENn (Bit 14)                               */
#define SC1_CR2_WRENn_Msk                 (0x4000UL)                /*!< SC1 CR2: WRENn (Bitfield-Mask: 0x01)                  */
#define SC1_CR2_DACTENn_Pos               (13UL)                    /*!< SC1 CR2: DACTENn (Bit 13)                             */
#define SC1_CR2_DACTENn_Msk               (0x2000UL)                /*!< SC1 CR2: DACTENn (Bitfield-Mask: 0x01)                */
#define SC1_CR2_SCnINST_Pos               (9UL)                     /*!< SC1 CR2: SCnINST (Bit 9)                              */
#define SC1_CR2_SCnINST_Msk               (0x200UL)                 /*!< SC1 CR2: SCnINST (Bitfield-Mask: 0x01)                */
#define SC1_CR2_SCnPWRLV_Pos              (8UL)                     /*!< SC1 CR2: SCnPWRLV (Bit 8)                             */
#define SC1_CR2_SCnPWRLV_Msk              (0x100UL)                 /*!< SC1 CR2: SCnPWRLV (Bitfield-Mask: 0x01)               */
#define SC1_CR2_SCnRSTLV_Pos              (7UL)                     /*!< SC1 CR2: SCnRSTLV (Bit 7)                             */
#define SC1_CR2_SCnRSTLV_Msk              (0x80UL)                  /*!< SC1 CR2: SCnRSTLV (Bitfield-Mask: 0x01)               */
#define SC1_CR2_SCnDATALV_Pos             (6UL)                     /*!< SC1 CR2: SCnDATALV (Bit 6)                            */
#define SC1_CR2_SCnDATALV_Msk             (0x40UL)                  /*!< SC1 CR2: SCnDATALV (Bitfield-Mask: 0x01)              */
#define SC1_CR2_SCnCLKLV_Pos              (5UL)                     /*!< SC1 CR2: SCnCLKLV (Bit 5)                             */
#define SC1_CR2_SCnCLKLV_Msk              (0x20UL)                  /*!< SC1 CR2: SCnCLKLV (Bitfield-Mask: 0x01)               */
#define SC1_CR2_SCnCLKEN_Pos              (4UL)                     /*!< SC1 CR2: SCnCLKEN (Bit 4)                             */
#define SC1_CR2_SCnCLKEN_Msk              (0x10UL)                  /*!< SC1 CR2: SCnCLKEN (Bitfield-Mask: 0x01)               */
#define SC1_CR2_SCnCLKG_Pos               (0UL)                     /*!< SC1 CR2: SCnCLKG (Bit 0)                              */
#define SC1_CR2_SCnCLKG_Msk               (0xfUL)                   /*!< SC1 CR2: SCnCLKG (Bitfield-Mask: 0x0f)                */
/* ==========================================================  CR3  ========================================================== */
#define SC1_CR3_ACONDETn_Pos              (23UL)                    /*!< SC1 CR3: ACONDETn (Bit 23)                            */
#define SC1_CR3_ACONDETn_Msk              (0x800000UL)              /*!< SC1 CR3: ACONDETn (Bitfield-Mask: 0x01)               */
#define SC1_CR3_CONSELn_Pos               (22UL)                    /*!< SC1 CR3: CONSELn (Bit 22)                             */
#define SC1_CR3_CONSELn_Msk               (0x400000UL)              /*!< SC1 CR3: CONSELn (Bitfield-Mask: 0x01)                */
#define SC1_CR3_RETRYENn_Pos              (20UL)                    /*!< SC1 CR3: RETRYENn (Bit 20)                            */
#define SC1_CR3_RETRYENn_Msk              (0x100000UL)              /*!< SC1 CR3: RETRYENn (Bitfield-Mask: 0x01)               */
#define SC1_CR3_RETRYn_Pos                (17UL)                    /*!< SC1 CR3: RETRYn (Bit 17)                              */
#define SC1_CR3_RETRYn_Msk                (0xe0000UL)               /*!< SC1 CR3: RETRYn (Bitfield-Mask: 0x07)                 */
#define SC1_CR3_DLYRETRYn_Pos             (16UL)                    /*!< SC1 CR3: DLYRETRYn (Bit 16)                           */
#define SC1_CR3_DLYRETRYn_Msk             (0x10000UL)               /*!< SC1 CR3: DLYRETRYn (Bitfield-Mask: 0x01)              */
#define SC1_CR3_SCnINPOL_Pos              (13UL)                    /*!< SC1 CR3: SCnINPOL (Bit 13)                            */
#define SC1_CR3_SCnINPOL_Msk              (0x6000UL)                /*!< SC1 CR3: SCnINPOL (Bitfield-Mask: 0x03)               */
#define SC1_CR3_RXCNTENn_Pos              (8UL)                     /*!< SC1 CR3: RXCNTENn (Bit 8)                             */
#define SC1_CR3_RXCNTENn_Msk              (0x100UL)                 /*!< SC1 CR3: RXCNTENn (Bitfield-Mask: 0x01)               */
#define SC1_CR3_RXBLENn_Pos               (0UL)                     /*!< SC1 CR3: RXBLENn (Bit 0)                              */
#define SC1_CR3_RXBLENn_Msk               (0xffUL)                  /*!< SC1 CR3: RXBLENn (Bitfield-Mask: 0xff)                */
/* ==========================================================  IER  ========================================================== */
#define SC1_IER_RSTAIENn_Pos              (23UL)                    /*!< SC1 IER: RSTAIENn (Bit 23)                            */
#define SC1_IER_RSTAIENn_Msk              (0x800000UL)              /*!< SC1 IER: RSTAIENn (Bitfield-Mask: 0x01)               */
#define SC1_IER_SERIENn_Pos               (22UL)                    /*!< SC1 IER: SERIENn (Bit 22)                             */
#define SC1_IER_SERIENn_Msk               (0x400000UL)              /*!< SC1 IER: SERIENn (Bitfield-Mask: 0x01)                */
#define SC1_IER_SEDIENn_Pos               (21UL)                    /*!< SC1 IER: SEDIENn (Bit 21)                             */
#define SC1_IER_SEDIENn_Msk               (0x200000UL)              /*!< SC1 IER: SEDIENn (Bitfield-Mask: 0x01)                */
#define SC1_IER_CONERIENn_Pos             (20UL)                    /*!< SC1 IER: CONERIENn (Bit 20)                           */
#define SC1_IER_CONERIENn_Msk             (0x100000UL)              /*!< SC1 IER: CONERIENn (Bitfield-Mask: 0x01)              */
#define SC1_IER_CONEDIENn_Pos             (19UL)                    /*!< SC1 IER: CONEDIENn (Bit 19)                           */
#define SC1_IER_CONEDIENn_Msk             (0x80000UL)               /*!< SC1 IER: CONEDIENn (Bitfield-Mask: 0x01)              */
#define SC1_IER_TRYERIENn_Pos             (18UL)                    /*!< SC1 IER: TRYERIENn (Bit 18)                           */
#define SC1_IER_TRYERIENn_Msk             (0x40000UL)               /*!< SC1 IER: TRYERIENn (Bitfield-Mask: 0x01)              */
#define SC1_IER_SCINIENn_Pos              (17UL)                    /*!< SC1 IER: SCINIENn (Bit 17)                            */
#define SC1_IER_SCINIENn_Msk              (0x20000UL)               /*!< SC1 IER: SCINIENn (Bitfield-Mask: 0x01)               */
#define SC1_IER_BLEDIENn_Pos              (16UL)                    /*!< SC1 IER: BLEDIENn (Bit 16)                            */
#define SC1_IER_BLEDIENn_Msk              (0x10000UL)               /*!< SC1 IER: BLEDIENn (Bitfield-Mask: 0x01)               */
#define SC1_IER_RTOIENn_Pos               (6UL)                     /*!< SC1 IER: RTOIENn (Bit 6)                              */
#define SC1_IER_RTOIENn_Msk               (0x40UL)                  /*!< SC1 IER: RTOIENn (Bitfield-Mask: 0x01)                */
#define SC1_IER_TXCIENn_Pos               (2UL)                     /*!< SC1 IER: TXCIENn (Bit 2)                              */
#define SC1_IER_TXCIENn_Msk               (0x4UL)                   /*!< SC1 IER: TXCIENn (Bitfield-Mask: 0x01)                */
#define SC1_IER_RXCIENn_Pos               (0UL)                     /*!< SC1 IER: RXCIENn (Bit 0)                              */
#define SC1_IER_RXCIENn_Msk               (0x1UL)                   /*!< SC1 IER: RXCIENn (Bitfield-Mask: 0x01)                */
/* =========================================================  IFSR  ========================================================== */
#define SC1_IFSR_RSTAIFGn_Pos             (23UL)                    /*!< SC1 IFSR: RSTAIFGn (Bit 23)                           */
#define SC1_IFSR_RSTAIFGn_Msk             (0x800000UL)              /*!< SC1 IFSR: RSTAIFGn (Bitfield-Mask: 0x01)              */
#define SC1_IFSR_SERIFGn_Pos              (22UL)                    /*!< SC1 IFSR: SERIFGn (Bit 22)                            */
#define SC1_IFSR_SERIFGn_Msk              (0x400000UL)              /*!< SC1 IFSR: SERIFGn (Bitfield-Mask: 0x01)               */
#define SC1_IFSR_SEDIFGn_Pos              (21UL)                    /*!< SC1 IFSR: SEDIFGn (Bit 21)                            */
#define SC1_IFSR_SEDIFGn_Msk              (0x200000UL)              /*!< SC1 IFSR: SEDIFGn (Bitfield-Mask: 0x01)               */
#define SC1_IFSR_CONERIFGn_Pos            (20UL)                    /*!< SC1 IFSR: CONERIFGn (Bit 20)                          */
#define SC1_IFSR_CONERIFGn_Msk            (0x100000UL)              /*!< SC1 IFSR: CONERIFGn (Bitfield-Mask: 0x01)             */
#define SC1_IFSR_CONEDIFGn_Pos            (19UL)                    /*!< SC1 IFSR: CONEDIFGn (Bit 19)                          */
#define SC1_IFSR_CONEDIFGn_Msk            (0x80000UL)               /*!< SC1 IFSR: CONEDIFGn (Bitfield-Mask: 0x01)             */
#define SC1_IFSR_TRYERIFGn_Pos            (18UL)                    /*!< SC1 IFSR: TRYERIFGn (Bit 18)                          */
#define SC1_IFSR_TRYERIFGn_Msk            (0x40000UL)               /*!< SC1 IFSR: TRYERIFGn (Bitfield-Mask: 0x01)             */
#define SC1_IFSR_SCINIFGn_Pos             (17UL)                    /*!< SC1 IFSR: SCINIFGn (Bit 17)                           */
#define SC1_IFSR_SCINIFGn_Msk             (0x20000UL)               /*!< SC1 IFSR: SCINIFGn (Bitfield-Mask: 0x01)              */
#define SC1_IFSR_BLEDIFGn_Pos             (16UL)                    /*!< SC1 IFSR: BLEDIFGn (Bit 16)                           */
#define SC1_IFSR_BLEDIFGn_Msk             (0x10000UL)               /*!< SC1 IFSR: BLEDIFGn (Bitfield-Mask: 0x01)              */
#define SC1_IFSR_DORn_Pos                 (15UL)                    /*!< SC1 IFSR: DORn (Bit 15)                               */
#define SC1_IFSR_DORn_Msk                 (0x8000UL)                /*!< SC1 IFSR: DORn (Bitfield-Mask: 0x01)                  */
#define SC1_IFSR_FEn_Pos                  (14UL)                    /*!< SC1 IFSR: FEn (Bit 14)                                */
#define SC1_IFSR_FEn_Msk                  (0x4000UL)                /*!< SC1 IFSR: FEn (Bitfield-Mask: 0x01)                   */
#define SC1_IFSR_PEn_Pos                  (13UL)                    /*!< SC1 IFSR: PEn (Bit 13)                                */
#define SC1_IFSR_PEn_Msk                  (0x2000UL)                /*!< SC1 IFSR: PEn (Bitfield-Mask: 0x01)                   */
#define SC1_IFSR_RXBUSYn_Pos              (12UL)                    /*!< SC1 IFSR: RXBUSYn (Bit 12)                            */
#define SC1_IFSR_RXBUSYn_Msk              (0x1000UL)                /*!< SC1 IFSR: RXBUSYn (Bitfield-Mask: 0x01)               */
#define SC1_IFSR_RTOIFLAGn_Pos            (6UL)                     /*!< SC1 IFSR: RTOIFLAGn (Bit 6)                           */
#define SC1_IFSR_RTOIFLAGn_Msk            (0x40UL)                  /*!< SC1 IFSR: RTOIFLAGn (Bitfield-Mask: 0x01)             */
#define SC1_IFSR_TXCIFLAGn_Pos            (2UL)                     /*!< SC1 IFSR: TXCIFLAGn (Bit 2)                           */
#define SC1_IFSR_TXCIFLAGn_Msk            (0x4UL)                   /*!< SC1 IFSR: TXCIFLAGn (Bitfield-Mask: 0x01)             */
#define SC1_IFSR_RXCIFLAGn_Pos            (0UL)                     /*!< SC1 IFSR: RXCIFLAGn (Bit 0)                           */
#define SC1_IFSR_RXCIFLAGn_Msk            (0x1UL)                   /*!< SC1 IFSR: RXCIFLAGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  RDR  ========================================================== */
#define SC1_RDR_PARB_Pos                  (8UL)                     /*!< SC1 RDR: PARB (Bit 8)                                 */
#define SC1_RDR_PARB_Msk                  (0x100UL)                 /*!< SC1 RDR: PARB (Bitfield-Mask: 0x01)                   */
#define SC1_RDR_RDATA_Pos                 (0UL)                     /*!< SC1 RDR: RDATA (Bit 0)                                */
#define SC1_RDR_RDATA_Msk                 (0xffUL)                  /*!< SC1 RDR: RDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  TDR  ========================================================== */
#define SC1_TDR_TDATA_Pos                 (0UL)                     /*!< SC1 TDR: TDATA (Bit 0)                                */
#define SC1_TDR_TDATA_Msk                 (0xffUL)                  /*!< SC1 TDR: TDATA (Bitfield-Mask: 0xff)                  */
/* ==========================================================  BDR  ========================================================== */
#define SC1_BDR_BDATA_Pos                 (0UL)                     /*!< SC1 BDR: BDATA (Bit 0)                                */
#define SC1_BDR_BDATA_Msk                 (0xffffUL)                /*!< SC1 BDR: BDATA (Bitfield-Mask: 0xffff)                */
/* =========================================================  BCMP  ========================================================== */
#define SC1_BCMP_BCMPS_Pos                (15UL)                    /*!< SC1 BCMP: BCMPS (Bit 15)                              */
#define SC1_BCMP_BCMPS_Msk                (0x8000UL)                /*!< SC1 BCMP: BCMPS (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP8_Pos                (8UL)                     /*!< SC1 BCMP: BCMP8 (Bit 8)                               */
#define SC1_BCMP_BCMP8_Msk                (0x100UL)                 /*!< SC1 BCMP: BCMP8 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP7_Pos                (7UL)                     /*!< SC1 BCMP: BCMP7 (Bit 7)                               */
#define SC1_BCMP_BCMP7_Msk                (0x80UL)                  /*!< SC1 BCMP: BCMP7 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP6_Pos                (6UL)                     /*!< SC1 BCMP: BCMP6 (Bit 6)                               */
#define SC1_BCMP_BCMP6_Msk                (0x40UL)                  /*!< SC1 BCMP: BCMP6 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP5_Pos                (5UL)                     /*!< SC1 BCMP: BCMP5 (Bit 5)                               */
#define SC1_BCMP_BCMP5_Msk                (0x20UL)                  /*!< SC1 BCMP: BCMP5 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP4_Pos                (4UL)                     /*!< SC1 BCMP: BCMP4 (Bit 4)                               */
#define SC1_BCMP_BCMP4_Msk                (0x10UL)                  /*!< SC1 BCMP: BCMP4 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP3_Pos                (3UL)                     /*!< SC1 BCMP: BCMP3 (Bit 3)                               */
#define SC1_BCMP_BCMP3_Msk                (0x8UL)                   /*!< SC1 BCMP: BCMP3 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP2_Pos                (2UL)                     /*!< SC1 BCMP: BCMP2 (Bit 2)                               */
#define SC1_BCMP_BCMP2_Msk                (0x4UL)                   /*!< SC1 BCMP: BCMP2 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP1_Pos                (1UL)                     /*!< SC1 BCMP: BCMP1 (Bit 1)                               */
#define SC1_BCMP_BCMP1_Msk                (0x2UL)                   /*!< SC1 BCMP: BCMP1 (Bitfield-Mask: 0x01)                 */
#define SC1_BCMP_BCMP0_Pos                (0UL)                     /*!< SC1 BCMP: BCMP0 (Bit 0)                               */
#define SC1_BCMP_BCMP0_Msk                (0x1UL)                   /*!< SC1 BCMP: BCMP0 (Bitfield-Mask: 0x01)                 */
/* =========================================================  RTODR  ========================================================= */
#define SC1_RTODR_RTOD_Pos                (0UL)                     /*!< SC1 RTODR: RTOD (Bit 0)                               */
#define SC1_RTODR_RTOD_Msk                (0xffffffUL)              /*!< SC1 RTODR: RTOD (Bitfield-Mask: 0xffffff)             */
/* =========================================================  EGTR  ========================================================== */
#define SC1_EGTR_EGT_Pos                  (0UL)                     /*!< SC1 EGTR: EGT (Bit 0)                                 */
#define SC1_EGTR_EGT_Msk                  (0xffUL)                  /*!< SC1 EGTR: EGT (Bitfield-Mask: 0xff)                   */
/* =========================================================  T3DR  ========================================================== */
#define SC1_T3DR_T3D_Pos                  (0UL)                     /*!< SC1 T3DR: T3D (Bit 0)                                 */
#define SC1_T3DR_T3D_Msk                  (0xffffUL)                /*!< SC1 T3DR: T3D (Bitfield-Mask: 0xffff)                 */
/* =========================================================  T4DR  ========================================================== */
#define SC1_T4DR_T4D_Pos                  (0UL)                     /*!< SC1 T4DR: T4D (Bit 0)                                 */
#define SC1_T4DR_T4D_Msk                  (0xffffUL)                /*!< SC1 T4DR: T4D (Bitfield-Mask: 0xffff)                 */


/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define SPIn_CR_SPInEN_Pos                (7UL)                     /*!< SPIn CR: SPInEN (Bit 7)                               */
#define SPIn_CR_SPInEN_Msk                (0x80UL)                  /*!< SPIn CR: SPInEN (Bitfield-Mask: 0x01)                 */
#define SPIn_CR_FLSBn_Pos                 (6UL)                     /*!< SPIn CR: FLSBn (Bit 6)                                */
#define SPIn_CR_FLSBn_Msk                 (0x40UL)                  /*!< SPIn CR: FLSBn (Bitfield-Mask: 0x01)                  */
#define SPIn_CR_SPInMS_Pos                (5UL)                     /*!< SPIn CR: SPInMS (Bit 5)                               */
#define SPIn_CR_SPInMS_Msk                (0x20UL)                  /*!< SPIn CR: SPInMS (Bitfield-Mask: 0x01)                 */
#define SPIn_CR_SPInIEN_Pos               (3UL)                     /*!< SPIn CR: SPInIEN (Bit 3)                              */
#define SPIn_CR_SPInIEN_Msk               (0x8UL)                   /*!< SPIn CR: SPInIEN (Bitfield-Mask: 0x01)                */
#define SPIn_CR_CPOLn_Pos                 (1UL)                     /*!< SPIn CR: CPOLn (Bit 1)                                */
#define SPIn_CR_CPOLn_Msk                 (0x2UL)                   /*!< SPIn CR: CPOLn (Bitfield-Mask: 0x01)                  */
#define SPIn_CR_CPHAn_Pos                 (0UL)                     /*!< SPIn CR: CPHAn (Bit 0)                                */
#define SPIn_CR_CPHAn_Msk                 (0x1UL)                   /*!< SPIn CR: CPHAn (Bitfield-Mask: 0x01)                  */
/* ==========================================================  SR  =========================================================== */
#define SPIn_SR_SPInIFLAG_Pos             (7UL)                     /*!< SPIn SR: SPInIFLAG (Bit 7)                            */
#define SPIn_SR_SPInIFLAG_Msk             (0x80UL)                  /*!< SPIn SR: SPInIFLAG (Bitfield-Mask: 0x01)              */
#define SPIn_SR_SSnHIGH_Pos               (4UL)                     /*!< SPIn SR: SSnHIGH (Bit 4)                              */
#define SPIn_SR_SSnHIGH_Msk               (0x10UL)                  /*!< SPIn SR: SSnHIGH (Bitfield-Mask: 0x01)                */
#define SPIn_SR_FXCHn_Pos                 (1UL)                     /*!< SPIn SR: FXCHn (Bit 1)                                */
#define SPIn_SR_FXCHn_Msk                 (0x2UL)                   /*!< SPIn SR: FXCHn (Bitfield-Mask: 0x01)                  */
#define SPIn_SR_SSnEN_Pos                 (0UL)                     /*!< SPIn SR: SSnEN (Bit 0)                                */
#define SPIn_SR_SSnEN_Msk                 (0x1UL)                   /*!< SPIn SR: SSnEN (Bitfield-Mask: 0x01)                  */
/* ==========================================================  RDR  ========================================================== */
#define SPIn_RDR_RDATA_Pos                (0UL)                     /*!< SPIn RDR: RDATA (Bit 0)                               */
#define SPIn_RDR_RDATA_Msk                (0xffUL)                  /*!< SPIn RDR: RDATA (Bitfield-Mask: 0xff)                 */
/* ==========================================================  TDR  ========================================================== */
#define SPIn_TDR_TDATA_Pos                (0UL)                     /*!< SPIn TDR: TDATA (Bit 0)                               */
#define SPIn_TDR_TDATA_Msk                (0xffUL)                  /*!< SPIn TDR: TDATA (Bitfield-Mask: 0xff)                 */
/* =========================================================  PREDR  ========================================================= */
#define SPIn_PREDR_PRED_Pos               (0UL)                     /*!< SPIn PREDR: PRED (Bit 0)                              */
#define SPIn_PREDR_PRED_Msk               (0x3ffUL)                 /*!< SPIn PREDR: PRED (Bitfield-Mask: 0x3ff)               */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define SPI0_CR_SPInEN_Pos                (7UL)                     /*!< SPI0 CR: SPInEN (Bit 7)                               */
#define SPI0_CR_SPInEN_Msk                (0x80UL)                  /*!< SPI0 CR: SPInEN (Bitfield-Mask: 0x01)                 */
#define SPI0_CR_FLSBn_Pos                 (6UL)                     /*!< SPI0 CR: FLSBn (Bit 6)                                */
#define SPI0_CR_FLSBn_Msk                 (0x40UL)                  /*!< SPI0 CR: FLSBn (Bitfield-Mask: 0x01)                  */
#define SPI0_CR_SPInMS_Pos                (5UL)                     /*!< SPI0 CR: SPInMS (Bit 5)                               */
#define SPI0_CR_SPInMS_Msk                (0x20UL)                  /*!< SPI0 CR: SPInMS (Bitfield-Mask: 0x01)                 */
#define SPI0_CR_SPInIEN_Pos               (3UL)                     /*!< SPI0 CR: SPInIEN (Bit 3)                              */
#define SPI0_CR_SPInIEN_Msk               (0x8UL)                   /*!< SPI0 CR: SPInIEN (Bitfield-Mask: 0x01)                */
#define SPI0_CR_CPOLn_Pos                 (1UL)                     /*!< SPI0 CR: CPOLn (Bit 1)                                */
#define SPI0_CR_CPOLn_Msk                 (0x2UL)                   /*!< SPI0 CR: CPOLn (Bitfield-Mask: 0x01)                  */
#define SPI0_CR_CPHAn_Pos                 (0UL)                     /*!< SPI0 CR: CPHAn (Bit 0)                                */
#define SPI0_CR_CPHAn_Msk                 (0x1UL)                   /*!< SPI0 CR: CPHAn (Bitfield-Mask: 0x01)                  */
/* ==========================================================  SR  =========================================================== */
#define SPI0_SR_SPInIFLAG_Pos             (7UL)                     /*!< SPI0 SR: SPInIFLAG (Bit 7)                            */
#define SPI0_SR_SPInIFLAG_Msk             (0x80UL)                  /*!< SPI0 SR: SPInIFLAG (Bitfield-Mask: 0x01)              */
#define SPI0_SR_SSnHIGH_Pos               (4UL)                     /*!< SPI0 SR: SSnHIGH (Bit 4)                              */
#define SPI0_SR_SSnHIGH_Msk               (0x10UL)                  /*!< SPI0 SR: SSnHIGH (Bitfield-Mask: 0x01)                */
#define SPI0_SR_FXCHn_Pos                 (1UL)                     /*!< SPI0 SR: FXCHn (Bit 1)                                */
#define SPI0_SR_FXCHn_Msk                 (0x2UL)                   /*!< SPI0 SR: FXCHn (Bitfield-Mask: 0x01)                  */
#define SPI0_SR_SSnEN_Pos                 (0UL)                     /*!< SPI0 SR: SSnEN (Bit 0)                                */
#define SPI0_SR_SSnEN_Msk                 (0x1UL)                   /*!< SPI0 SR: SSnEN (Bitfield-Mask: 0x01)                  */
/* ==========================================================  RDR  ========================================================== */
#define SPI0_RDR_RDATA_Pos                (0UL)                     /*!< SPI0 RDR: RDATA (Bit 0)                               */
#define SPI0_RDR_RDATA_Msk                (0xffUL)                  /*!< SPI0 RDR: RDATA (Bitfield-Mask: 0xff)                 */
/* ==========================================================  TDR  ========================================================== */
#define SPI0_TDR_TDATA_Pos                (0UL)                     /*!< SPI0 TDR: TDATA (Bit 0)                               */
#define SPI0_TDR_TDATA_Msk                (0xffUL)                  /*!< SPI0 TDR: TDATA (Bitfield-Mask: 0xff)                 */
/* =========================================================  PREDR  ========================================================= */
#define SPI0_PREDR_PRED_Pos               (0UL)                     /*!< SPI0 PREDR: PRED (Bit 0)                              */
#define SPI0_PREDR_PRED_Msk               (0x3ffUL)                 /*!< SPI0 PREDR: PRED (Bitfield-Mask: 0x3ff)               */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define SPI1_CR_SPInEN_Pos                (7UL)                     /*!< SPI1 CR: SPInEN (Bit 7)                               */
#define SPI1_CR_SPInEN_Msk                (0x80UL)                  /*!< SPI1 CR: SPInEN (Bitfield-Mask: 0x01)                 */
#define SPI1_CR_FLSBn_Pos                 (6UL)                     /*!< SPI1 CR: FLSBn (Bit 6)                                */
#define SPI1_CR_FLSBn_Msk                 (0x40UL)                  /*!< SPI1 CR: FLSBn (Bitfield-Mask: 0x01)                  */
#define SPI1_CR_SPInMS_Pos                (5UL)                     /*!< SPI1 CR: SPInMS (Bit 5)                               */
#define SPI1_CR_SPInMS_Msk                (0x20UL)                  /*!< SPI1 CR: SPInMS (Bitfield-Mask: 0x01)                 */
#define SPI1_CR_SPInIEN_Pos               (3UL)                     /*!< SPI1 CR: SPInIEN (Bit 3)                              */
#define SPI1_CR_SPInIEN_Msk               (0x8UL)                   /*!< SPI1 CR: SPInIEN (Bitfield-Mask: 0x01)                */
#define SPI1_CR_CPOLn_Pos                 (1UL)                     /*!< SPI1 CR: CPOLn (Bit 1)                                */
#define SPI1_CR_CPOLn_Msk                 (0x2UL)                   /*!< SPI1 CR: CPOLn (Bitfield-Mask: 0x01)                  */
#define SPI1_CR_CPHAn_Pos                 (0UL)                     /*!< SPI1 CR: CPHAn (Bit 0)                                */
#define SPI1_CR_CPHAn_Msk                 (0x1UL)                   /*!< SPI1 CR: CPHAn (Bitfield-Mask: 0x01)                  */
/* ==========================================================  SR  =========================================================== */
#define SPI1_SR_SPInIFLAG_Pos             (7UL)                     /*!< SPI1 SR: SPInIFLAG (Bit 7)                            */
#define SPI1_SR_SPInIFLAG_Msk             (0x80UL)                  /*!< SPI1 SR: SPInIFLAG (Bitfield-Mask: 0x01)              */
#define SPI1_SR_SSnHIGH_Pos               (4UL)                     /*!< SPI1 SR: SSnHIGH (Bit 4)                              */
#define SPI1_SR_SSnHIGH_Msk               (0x10UL)                  /*!< SPI1 SR: SSnHIGH (Bitfield-Mask: 0x01)                */
#define SPI1_SR_FXCHn_Pos                 (1UL)                     /*!< SPI1 SR: FXCHn (Bit 1)                                */
#define SPI1_SR_FXCHn_Msk                 (0x2UL)                   /*!< SPI1 SR: FXCHn (Bitfield-Mask: 0x01)                  */
#define SPI1_SR_SSnEN_Pos                 (0UL)                     /*!< SPI1 SR: SSnEN (Bit 0)                                */
#define SPI1_SR_SSnEN_Msk                 (0x1UL)                   /*!< SPI1 SR: SSnEN (Bitfield-Mask: 0x01)                  */
/* ==========================================================  RDR  ========================================================== */
#define SPI1_RDR_RDATA_Pos                (0UL)                     /*!< SPI1 RDR: RDATA (Bit 0)                               */
#define SPI1_RDR_RDATA_Msk                (0xffUL)                  /*!< SPI1 RDR: RDATA (Bitfield-Mask: 0xff)                 */
/* ==========================================================  TDR  ========================================================== */
#define SPI1_TDR_TDATA_Pos                (0UL)                     /*!< SPI1 TDR: TDATA (Bit 0)                               */
#define SPI1_TDR_TDATA_Msk                (0xffUL)                  /*!< SPI1 TDR: TDATA (Bitfield-Mask: 0xff)                 */
/* =========================================================  PREDR  ========================================================= */
#define SPI1_PREDR_PRED_Pos               (0UL)                     /*!< SPI1 PREDR: PRED (Bit 0)                              */
#define SPI1_PREDR_PRED_Msk               (0x3ffUL)                 /*!< SPI1 PREDR: PRED (Bitfield-Mask: 0x3ff)               */


/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2Cn_CR_I2CnEN_Pos                (7UL)                     /*!< I2Cn CR: I2CnEN (Bit 7)                               */
#define I2Cn_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2Cn CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2Cn CR: TXDLYENBn (Bit 6)                            */
#define I2Cn_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2Cn CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2Cn_CR_I2CnIEN_Pos               (5UL)                     /*!< I2Cn CR: I2CnIEN (Bit 5)                              */
#define I2Cn_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2Cn CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2Cn_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2Cn CR: I2CnIFLAG (Bit 4)                            */
#define I2Cn_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2Cn CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2Cn_CR_ACKnEN_Pos                (3UL)                     /*!< I2Cn CR: ACKnEN (Bit 3)                               */
#define I2Cn_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2Cn CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_IMASTERn_Pos              (2UL)                     /*!< I2Cn CR: IMASTERn (Bit 2)                             */
#define I2Cn_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2Cn CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2Cn_CR_STOPCn_Pos                (1UL)                     /*!< I2Cn CR: STOPCn (Bit 1)                               */
#define I2Cn_CR_STOPCn_Msk                (0x2UL)                   /*!< I2Cn CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_STARTCn_Pos               (0UL)                     /*!< I2Cn CR: STARTCn (Bit 0)                              */
#define I2Cn_CR_STARTCn_Msk               (0x1UL)                   /*!< I2Cn CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2Cn_ST_GCALLn_Pos                (7UL)                     /*!< I2Cn ST: GCALLn (Bit 7)                               */
#define I2Cn_ST_GCALLn_Msk                (0x80UL)                  /*!< I2Cn ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_TENDn_Pos                 (6UL)                     /*!< I2Cn ST: TENDn (Bit 6)                                */
#define I2Cn_ST_TENDn_Msk                 (0x40UL)                  /*!< I2Cn ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_STOPDn_Pos                (5UL)                     /*!< I2Cn ST: STOPDn (Bit 5)                               */
#define I2Cn_ST_STOPDn_Msk                (0x20UL)                  /*!< I2Cn ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_SSELn_Pos                 (4UL)                     /*!< I2Cn ST: SSELn (Bit 4)                                */
#define I2Cn_ST_SSELn_Msk                 (0x10UL)                  /*!< I2Cn ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_MLOSTn_Pos                (3UL)                     /*!< I2Cn ST: MLOSTn (Bit 3)                               */
#define I2Cn_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2Cn ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_BUSYn_Pos                 (2UL)                     /*!< I2Cn ST: BUSYn (Bit 2)                                */
#define I2Cn_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2Cn ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_TMODEn_Pos                (1UL)                     /*!< I2Cn ST: TMODEn (Bit 1)                               */
#define I2Cn_ST_TMODEn_Msk                (0x2UL)                   /*!< I2Cn ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_RXACKn_Pos                (0UL)                     /*!< I2Cn ST: RXACKn (Bit 0)                               */
#define I2Cn_ST_RXACKn_Msk                (0x1UL)                   /*!< I2Cn ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2Cn_SAR1_SLAn_Pos                (1UL)                     /*!< I2Cn SAR1: SLAn (Bit 1)                               */
#define I2Cn_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2Cn SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2Cn_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2Cn SAR1: GCALLnEN (Bit 0)                           */
#define I2Cn_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2Cn SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2Cn_SAR2_SLAn_Pos                (1UL)                     /*!< I2Cn SAR2: SLAn (Bit 1)                               */
#define I2Cn_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2Cn SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2Cn_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2Cn SAR2: GCALLnEN (Bit 0)                           */
#define I2Cn_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2Cn SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2Cn_DR_DATA_Pos                  (0UL)                     /*!< I2Cn DR: DATA (Bit 0)                                 */
#define I2Cn_DR_DATA_Msk                  (0xffUL)                  /*!< I2Cn DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2Cn_SDHR_HLDT_Pos                (0UL)                     /*!< I2Cn SDHR: HLDT (Bit 0)                               */
#define I2Cn_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2Cn SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2Cn_SCLR_SCLL_Pos                (0UL)                     /*!< I2Cn SCLR: SCLL (Bit 0)                               */
#define I2Cn_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2Cn SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2Cn_SCHR_SCLH_Pos                (0UL)                     /*!< I2Cn SCHR: SCLH (Bit 0)                               */
#define I2Cn_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2Cn SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C0_CR_I2CnEN_Pos                (7UL)                     /*!< I2C0 CR: I2CnEN (Bit 7)                               */
#define I2C0_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2C0 CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2C0 CR: TXDLYENBn (Bit 6)                            */
#define I2C0_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2C0 CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2C0_CR_I2CnIEN_Pos               (5UL)                     /*!< I2C0 CR: I2CnIEN (Bit 5)                              */
#define I2C0_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2C0 CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2C0_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2C0 CR: I2CnIFLAG (Bit 4)                            */
#define I2C0_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2C0 CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2C0_CR_ACKnEN_Pos                (3UL)                     /*!< I2C0 CR: ACKnEN (Bit 3)                               */
#define I2C0_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2C0 CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_IMASTERn_Pos              (2UL)                     /*!< I2C0 CR: IMASTERn (Bit 2)                             */
#define I2C0_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2C0 CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2C0_CR_STOPCn_Pos                (1UL)                     /*!< I2C0 CR: STOPCn (Bit 1)                               */
#define I2C0_CR_STOPCn_Msk                (0x2UL)                   /*!< I2C0 CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_STARTCn_Pos               (0UL)                     /*!< I2C0 CR: STARTCn (Bit 0)                              */
#define I2C0_CR_STARTCn_Msk               (0x1UL)                   /*!< I2C0 CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2C0_ST_GCALLn_Pos                (7UL)                     /*!< I2C0 ST: GCALLn (Bit 7)                               */
#define I2C0_ST_GCALLn_Msk                (0x80UL)                  /*!< I2C0 ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_TENDn_Pos                 (6UL)                     /*!< I2C0 ST: TENDn (Bit 6)                                */
#define I2C0_ST_TENDn_Msk                 (0x40UL)                  /*!< I2C0 ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_STOPDn_Pos                (5UL)                     /*!< I2C0 ST: STOPDn (Bit 5)                               */
#define I2C0_ST_STOPDn_Msk                (0x20UL)                  /*!< I2C0 ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_SSELn_Pos                 (4UL)                     /*!< I2C0 ST: SSELn (Bit 4)                                */
#define I2C0_ST_SSELn_Msk                 (0x10UL)                  /*!< I2C0 ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_MLOSTn_Pos                (3UL)                     /*!< I2C0 ST: MLOSTn (Bit 3)                               */
#define I2C0_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2C0 ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_BUSYn_Pos                 (2UL)                     /*!< I2C0 ST: BUSYn (Bit 2)                                */
#define I2C0_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2C0 ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_TMODEn_Pos                (1UL)                     /*!< I2C0 ST: TMODEn (Bit 1)                               */
#define I2C0_ST_TMODEn_Msk                (0x2UL)                   /*!< I2C0 ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_RXACKn_Pos                (0UL)                     /*!< I2C0 ST: RXACKn (Bit 0)                               */
#define I2C0_ST_RXACKn_Msk                (0x1UL)                   /*!< I2C0 ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2C0_SAR1_SLAn_Pos                (1UL)                     /*!< I2C0 SAR1: SLAn (Bit 1)                               */
#define I2C0_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2C0 SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C0_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2C0 SAR1: GCALLnEN (Bit 0)                           */
#define I2C0_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2C0 SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2C0_SAR2_SLAn_Pos                (1UL)                     /*!< I2C0 SAR2: SLAn (Bit 1)                               */
#define I2C0_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2C0 SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C0_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2C0 SAR2: GCALLnEN (Bit 0)                           */
#define I2C0_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2C0 SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2C0_DR_DATA_Pos                  (0UL)                     /*!< I2C0 DR: DATA (Bit 0)                                 */
#define I2C0_DR_DATA_Msk                  (0xffUL)                  /*!< I2C0 DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2C0_SDHR_HLDT_Pos                (0UL)                     /*!< I2C0 SDHR: HLDT (Bit 0)                               */
#define I2C0_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2C0 SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2C0_SCLR_SCLL_Pos                (0UL)                     /*!< I2C0 SCLR: SCLL (Bit 0)                               */
#define I2C0_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2C0 SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2C0_SCHR_SCLH_Pos                (0UL)                     /*!< I2C0 SCHR: SCLH (Bit 0)                               */
#define I2C0_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2C0 SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C1_CR_I2CnEN_Pos                (7UL)                     /*!< I2C1 CR: I2CnEN (Bit 7)                               */
#define I2C1_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2C1 CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2C1 CR: TXDLYENBn (Bit 6)                            */
#define I2C1_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2C1 CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2C1_CR_I2CnIEN_Pos               (5UL)                     /*!< I2C1 CR: I2CnIEN (Bit 5)                              */
#define I2C1_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2C1 CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2C1_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2C1 CR: I2CnIFLAG (Bit 4)                            */
#define I2C1_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2C1 CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2C1_CR_ACKnEN_Pos                (3UL)                     /*!< I2C1 CR: ACKnEN (Bit 3)                               */
#define I2C1_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2C1 CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_IMASTERn_Pos              (2UL)                     /*!< I2C1 CR: IMASTERn (Bit 2)                             */
#define I2C1_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2C1 CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2C1_CR_STOPCn_Pos                (1UL)                     /*!< I2C1 CR: STOPCn (Bit 1)                               */
#define I2C1_CR_STOPCn_Msk                (0x2UL)                   /*!< I2C1 CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_STARTCn_Pos               (0UL)                     /*!< I2C1 CR: STARTCn (Bit 0)                              */
#define I2C1_CR_STARTCn_Msk               (0x1UL)                   /*!< I2C1 CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2C1_ST_GCALLn_Pos                (7UL)                     /*!< I2C1 ST: GCALLn (Bit 7)                               */
#define I2C1_ST_GCALLn_Msk                (0x80UL)                  /*!< I2C1 ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_TENDn_Pos                 (6UL)                     /*!< I2C1 ST: TENDn (Bit 6)                                */
#define I2C1_ST_TENDn_Msk                 (0x40UL)                  /*!< I2C1 ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_STOPDn_Pos                (5UL)                     /*!< I2C1 ST: STOPDn (Bit 5)                               */
#define I2C1_ST_STOPDn_Msk                (0x20UL)                  /*!< I2C1 ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_SSELn_Pos                 (4UL)                     /*!< I2C1 ST: SSELn (Bit 4)                                */
#define I2C1_ST_SSELn_Msk                 (0x10UL)                  /*!< I2C1 ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_MLOSTn_Pos                (3UL)                     /*!< I2C1 ST: MLOSTn (Bit 3)                               */
#define I2C1_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2C1 ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_BUSYn_Pos                 (2UL)                     /*!< I2C1 ST: BUSYn (Bit 2)                                */
#define I2C1_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2C1 ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_TMODEn_Pos                (1UL)                     /*!< I2C1 ST: TMODEn (Bit 1)                               */
#define I2C1_ST_TMODEn_Msk                (0x2UL)                   /*!< I2C1 ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_RXACKn_Pos                (0UL)                     /*!< I2C1 ST: RXACKn (Bit 0)                               */
#define I2C1_ST_RXACKn_Msk                (0x1UL)                   /*!< I2C1 ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2C1_SAR1_SLAn_Pos                (1UL)                     /*!< I2C1 SAR1: SLAn (Bit 1)                               */
#define I2C1_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2C1 SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C1_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2C1 SAR1: GCALLnEN (Bit 0)                           */
#define I2C1_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2C1 SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2C1_SAR2_SLAn_Pos                (1UL)                     /*!< I2C1 SAR2: SLAn (Bit 1)                               */
#define I2C1_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2C1 SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C1_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2C1 SAR2: GCALLnEN (Bit 0)                           */
#define I2C1_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2C1 SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2C1_DR_DATA_Pos                  (0UL)                     /*!< I2C1 DR: DATA (Bit 0)                                 */
#define I2C1_DR_DATA_Msk                  (0xffUL)                  /*!< I2C1 DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2C1_SDHR_HLDT_Pos                (0UL)                     /*!< I2C1 SDHR: HLDT (Bit 0)                               */
#define I2C1_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2C1 SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2C1_SCLR_SCLL_Pos                (0UL)                     /*!< I2C1 SCLR: SCLL (Bit 0)                               */
#define I2C1_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2C1 SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2C1_SCHR_SCLH_Pos                (0UL)                     /*!< I2C1 SCHR: SCLH (Bit 0)                               */
#define I2C1_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2C1 SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define LCD_CR_IRSEL_Pos                  (6UL)                     /*!< LCD CR: IRSEL (Bit 6)                                 */
#define LCD_CR_IRSEL_Msk                  (0xc0UL)                  /*!< LCD CR: IRSEL (Bitfield-Mask: 0x03)                   */
#define LCD_CR_DBS_Pos                    (3UL)                     /*!< LCD CR: DBS (Bit 3)                                   */
#define LCD_CR_DBS_Msk                    (0x38UL)                  /*!< LCD CR: DBS (Bitfield-Mask: 0x07)                     */
#define LCD_CR_LCLK_Pos                   (1UL)                     /*!< LCD CR: LCLK (Bit 1)                                  */
#define LCD_CR_LCLK_Msk                   (0x6UL)                   /*!< LCD CR: LCLK (Bitfield-Mask: 0x03)                    */
#define LCD_CR_DISP_Pos                   (0UL)                     /*!< LCD CR: DISP (Bit 0)                                  */
#define LCD_CR_DISP_Msk                   (0x1UL)                   /*!< LCD CR: DISP (Bitfield-Mask: 0x01)                    */
/* =========================================================  BCCR  ========================================================== */
#define LCD_BCCR_LCDABC_Pos               (12UL)                    /*!< LCD BCCR: LCDABC (Bit 12)                             */
#define LCD_BCCR_LCDABC_Msk               (0x1000UL)                /*!< LCD BCCR: LCDABC (Bitfield-Mask: 0x01)                */
#define LCD_BCCR_BMSEL_Pos                (8UL)                     /*!< LCD BCCR: BMSEL (Bit 8)                               */
#define LCD_BCCR_BMSEL_Msk                (0x700UL)                 /*!< LCD BCCR: BMSEL (Bitfield-Mask: 0x07)                 */
#define LCD_BCCR_LCTEN_Pos                (5UL)                     /*!< LCD BCCR: LCTEN (Bit 5)                               */
#define LCD_BCCR_LCTEN_Msk                (0x20UL)                  /*!< LCD BCCR: LCTEN (Bitfield-Mask: 0x01)                 */
#define LCD_BCCR_VLCD_Pos                 (0UL)                     /*!< LCD BCCR: VLCD (Bit 0)                                */
#define LCD_BCCR_VLCD_Msk                 (0xfUL)                   /*!< LCD BCCR: VLCD (Bitfield-Mask: 0x0f)                  */
/* ==========================================================  DR0  ========================================================== */
/* ==========================================================  DR1  ========================================================== */
/* ==========================================================  DR2  ========================================================== */
/* ==========================================================  DR3  ========================================================== */
/* ==========================================================  DR4  ========================================================== */
/* ==========================================================  DR5  ========================================================== */
/* ==========================================================  DR6  ========================================================== */
/* ==========================================================  DR7  ========================================================== */
/* ==========================================================  DR8  ========================================================== */
/* ==========================================================  DR9  ========================================================== */
/* =========================================================  DR10  ========================================================== */
/* =========================================================  DR11  ========================================================== */
/* =========================================================  DR12  ========================================================== */
/* =========================================================  DR13  ========================================================== */
/* =========================================================  DR14  ========================================================== */
/* =========================================================  DR15  ========================================================== */
/* =========================================================  DR16  ========================================================== */
/* =========================================================  DR17  ========================================================== */
/* =========================================================  DR18  ========================================================== */
/* =========================================================  DR19  ========================================================== */
/* =========================================================  DR20  ========================================================== */
/* =========================================================  DR21  ========================================================== */
/* =========================================================  DR22  ========================================================== */
/* =========================================================  DR23  ========================================================== */
/* =========================================================  DR24  ========================================================== */
/* =========================================================  DR25  ========================================================== */
/* =========================================================  DR26  ========================================================== */
/* =========================================================  DR27  ========================================================== */
/* =========================================================  DR28  ========================================================== */
/* =========================================================  DR29  ========================================================== */
/* =========================================================  DR30  ========================================================== */
/* =========================================================  DR31  ========================================================== */
/* =========================================================  DR32  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define CRC_CR_INSIZE_Pos                 (14UL)                    /*!< CRC CR: INSIZE (Bit 14)                               */
#define CRC_CR_INSIZE_Msk                 (0xc000UL)                /*!< CRC CR: INSIZE (Bitfield-Mask: 0x03)                  */
#define CRC_CR_INCOMP_Pos                 (10UL)                    /*!< CRC CR: INCOMP (Bit 10)                               */
#define CRC_CR_INCOMP_Msk                 (0x400UL)                 /*!< CRC CR: INCOMP (Bitfield-Mask: 0x01)                  */
#define CRC_CR_MODS_Pos                   (7UL)                     /*!< CRC CR: MODS (Bit 7)                                  */
#define CRC_CR_MODS_Msk                   (0x80UL)                  /*!< CRC CR: MODS (Bitfield-Mask: 0x01)                    */
#define CRC_CR_RLTCLR_Pos                 (6UL)                     /*!< CRC CR: RLTCLR (Bit 6)                                */
#define CRC_CR_RLTCLR_Msk                 (0x40UL)                  /*!< CRC CR: RLTCLR (Bitfield-Mask: 0x01)                  */
#define CRC_CR_MDSEL_Pos                  (5UL)                     /*!< CRC CR: MDSEL (Bit 5)                                 */
#define CRC_CR_MDSEL_Msk                  (0x20UL)                  /*!< CRC CR: MDSEL (Bitfield-Mask: 0x01)                   */
#define CRC_CR_POLYS_Pos                  (3UL)                     /*!< CRC CR: POLYS (Bit 3)                                 */
#define CRC_CR_POLYS_Msk                  (0x18UL)                  /*!< CRC CR: POLYS (Bitfield-Mask: 0x03)                   */
#define CRC_CR_SARINC_Pos                 (2UL)                     /*!< CRC CR: SARINC (Bit 2)                                */
#define CRC_CR_SARINC_Msk                 (0x4UL)                   /*!< CRC CR: SARINC (Bitfield-Mask: 0x01)                  */
#define CRC_CR_FIRSTBS_Pos                (1UL)                     /*!< CRC CR: FIRSTBS (Bit 1)                               */
#define CRC_CR_FIRSTBS_Msk                (0x2UL)                   /*!< CRC CR: FIRSTBS (Bitfield-Mask: 0x01)                 */
#define CRC_CR_CRCRUN_Pos                 (0UL)                     /*!< CRC CR: CRCRUN (Bit 0)                                */
#define CRC_CR_CRCRUN_Msk                 (0x1UL)                   /*!< CRC CR: CRCRUN (Bitfield-Mask: 0x01)                  */
/* ==========================================================  IN  =========================================================== */
#define CRC_IN_INDATA_Pos                 (0UL)                     /*!< CRC IN: INDATA (Bit 0)                                */
#define CRC_IN_INDATA_Msk                 (0xffffffffUL)            /*!< CRC IN: INDATA (Bitfield-Mask: 0xffffffff)            */
/* ==========================================================  RLT  ========================================================== */
#define CRC_RLT_RLTDATA_Pos               (0UL)                     /*!< CRC RLT: RLTDATA (Bit 0)                              */
#define CRC_RLT_RLTDATA_Msk               (0xffffffffUL)            /*!< CRC RLT: RLTDATA (Bitfield-Mask: 0xffffffff)          */
/* =========================================================  INIT  ========================================================== */
#define CRC_INIT_INIDATA_Pos              (0UL)                     /*!< CRC INIT: INIDATA (Bit 0)                             */
#define CRC_INIT_INIDATA_Msk              (0xffffffffUL)            /*!< CRC INIT: INIDATA (Bitfield-Mask: 0xffffffff)         */
/* =========================================================  SADR  ========================================================== */
#define CRC_SADR_SADR_Pos                 (0UL)                     /*!< CRC SADR: SADR (Bit 0)                                */
#define CRC_SADR_SADR_Msk                 (0xffffffffUL)            /*!< CRC SADR: SADR (Bitfield-Mask: 0xffffffff)            */
/* =========================================================  EADR  ========================================================== */
#define CRC_EADR_EADR_Pos                 (0UL)                     /*!< CRC EADR: EADR (Bit 0)                                */
#define CRC_EADR_EADR_Msk                 (0xffffffffUL)            /*!< CRC EADR: EADR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMACn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMACn_CR_TRANSCNT_Pos             (16UL)                    /*!< DMACn CR: TRANSCNT (Bit 16)                           */
#define DMACn_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMACn CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMACn_CR_ERFGSTP_Pos              (15UL)                    /*!< DMACn CR: ERFGSTP (Bit 15)                            */
#define DMACn_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMACn CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMACn_CR_PERSEL_Pos               (8UL)                     /*!< DMACn CR: PERSEL (Bit 8)                              */
#define DMACn_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMACn CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMACn_CR_SIZE_Pos                 (2UL)                     /*!< DMACn CR: SIZE (Bit 2)                                */
#define DMACn_CR_SIZE_Msk                 (0xcUL)                   /*!< DMACn CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMACn_CR_DIR_Pos                  (1UL)                     /*!< DMACn CR: DIR (Bit 1)                                 */
#define DMACn_CR_DIR_Msk                  (0x2UL)                   /*!< DMACn CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMACn_CR_CHnEN_Pos                (0UL)                     /*!< DMACn CR: CHnEN (Bit 0)                               */
#define DMACn_CR_CHnEN_Msk                (0x1UL)                   /*!< DMACn CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMACn_IESR_TRERIENn_Pos           (5UL)                     /*!< DMACn IESR: TRERIENn (Bit 5)                          */
#define DMACn_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMACn IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMACn_IESR_TRCIENn_Pos            (4UL)                     /*!< DMACn IESR: TRCIENn (Bit 4)                           */
#define DMACn_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMACn IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMACn_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMACn IESR: TRERIFGn (Bit 1)                          */
#define DMACn_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMACn IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMACn_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMACn IESR: TRCIFGn (Bit 0)                           */
#define DMACn_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMACn IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMACn_PAR_PBADR_Pos               (16UL)                    /*!< DMACn PAR: PBADR (Bit 16)                             */
#define DMACn_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMACn PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMACn_PAR_POADR_Pos               (0UL)                     /*!< DMACn PAR: POADR (Bit 0)                              */
#define DMACn_PAR_POADR_Msk               (0xffffUL)                /*!< DMACn PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMACn_MAR_MAR_Pos                 (0UL)                     /*!< DMACn MAR: MAR (Bit 0)                                */
#define DMACn_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMACn MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMAC0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMAC0_CR_TRANSCNT_Pos             (16UL)                    /*!< DMAC0 CR: TRANSCNT (Bit 16)                           */
#define DMAC0_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMAC0 CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMAC0_CR_ERFGSTP_Pos              (15UL)                    /*!< DMAC0 CR: ERFGSTP (Bit 15)                            */
#define DMAC0_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMAC0 CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMAC0_CR_PERSEL_Pos               (8UL)                     /*!< DMAC0 CR: PERSEL (Bit 8)                              */
#define DMAC0_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMAC0 CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMAC0_CR_SIZE_Pos                 (2UL)                     /*!< DMAC0 CR: SIZE (Bit 2)                                */
#define DMAC0_CR_SIZE_Msk                 (0xcUL)                   /*!< DMAC0 CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMAC0_CR_DIR_Pos                  (1UL)                     /*!< DMAC0 CR: DIR (Bit 1)                                 */
#define DMAC0_CR_DIR_Msk                  (0x2UL)                   /*!< DMAC0 CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMAC0_CR_CHnEN_Pos                (0UL)                     /*!< DMAC0 CR: CHnEN (Bit 0)                               */
#define DMAC0_CR_CHnEN_Msk                (0x1UL)                   /*!< DMAC0 CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMAC0_IESR_TRERIENn_Pos           (5UL)                     /*!< DMAC0 IESR: TRERIENn (Bit 5)                          */
#define DMAC0_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMAC0 IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMAC0_IESR_TRCIENn_Pos            (4UL)                     /*!< DMAC0 IESR: TRCIENn (Bit 4)                           */
#define DMAC0_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMAC0 IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMAC0_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMAC0 IESR: TRERIFGn (Bit 1)                          */
#define DMAC0_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMAC0 IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMAC0_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMAC0 IESR: TRCIFGn (Bit 0)                           */
#define DMAC0_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMAC0 IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMAC0_PAR_PBADR_Pos               (16UL)                    /*!< DMAC0 PAR: PBADR (Bit 16)                             */
#define DMAC0_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMAC0 PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMAC0_PAR_POADR_Pos               (0UL)                     /*!< DMAC0 PAR: POADR (Bit 0)                              */
#define DMAC0_PAR_POADR_Msk               (0xffffUL)                /*!< DMAC0 PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMAC0_MAR_MAR_Pos                 (0UL)                     /*!< DMAC0 MAR: MAR (Bit 0)                                */
#define DMAC0_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMAC0 MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMAC1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMAC1_CR_TRANSCNT_Pos             (16UL)                    /*!< DMAC1 CR: TRANSCNT (Bit 16)                           */
#define DMAC1_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMAC1 CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMAC1_CR_ERFGSTP_Pos              (15UL)                    /*!< DMAC1 CR: ERFGSTP (Bit 15)                            */
#define DMAC1_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMAC1 CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMAC1_CR_PERSEL_Pos               (8UL)                     /*!< DMAC1 CR: PERSEL (Bit 8)                              */
#define DMAC1_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMAC1 CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMAC1_CR_SIZE_Pos                 (2UL)                     /*!< DMAC1 CR: SIZE (Bit 2)                                */
#define DMAC1_CR_SIZE_Msk                 (0xcUL)                   /*!< DMAC1 CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMAC1_CR_DIR_Pos                  (1UL)                     /*!< DMAC1 CR: DIR (Bit 1)                                 */
#define DMAC1_CR_DIR_Msk                  (0x2UL)                   /*!< DMAC1 CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMAC1_CR_CHnEN_Pos                (0UL)                     /*!< DMAC1 CR: CHnEN (Bit 0)                               */
#define DMAC1_CR_CHnEN_Msk                (0x1UL)                   /*!< DMAC1 CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMAC1_IESR_TRERIENn_Pos           (5UL)                     /*!< DMAC1 IESR: TRERIENn (Bit 5)                          */
#define DMAC1_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMAC1 IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMAC1_IESR_TRCIENn_Pos            (4UL)                     /*!< DMAC1 IESR: TRCIENn (Bit 4)                           */
#define DMAC1_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMAC1 IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMAC1_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMAC1 IESR: TRERIFGn (Bit 1)                          */
#define DMAC1_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMAC1 IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMAC1_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMAC1 IESR: TRCIFGn (Bit 0)                           */
#define DMAC1_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMAC1 IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMAC1_PAR_PBADR_Pos               (16UL)                    /*!< DMAC1 PAR: PBADR (Bit 16)                             */
#define DMAC1_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMAC1 PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMAC1_PAR_POADR_Pos               (0UL)                     /*!< DMAC1 PAR: POADR (Bit 0)                              */
#define DMAC1_PAR_POADR_Msk               (0xffffUL)                /*!< DMAC1 PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMAC1_MAR_MAR_Pos                 (0UL)                     /*!< DMAC1 MAR: MAR (Bit 0)                                */
#define DMAC1_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMAC1 MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMAC2                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMAC2_CR_TRANSCNT_Pos             (16UL)                    /*!< DMAC2 CR: TRANSCNT (Bit 16)                           */
#define DMAC2_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMAC2 CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMAC2_CR_ERFGSTP_Pos              (15UL)                    /*!< DMAC2 CR: ERFGSTP (Bit 15)                            */
#define DMAC2_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMAC2 CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMAC2_CR_PERSEL_Pos               (8UL)                     /*!< DMAC2 CR: PERSEL (Bit 8)                              */
#define DMAC2_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMAC2 CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMAC2_CR_SIZE_Pos                 (2UL)                     /*!< DMAC2 CR: SIZE (Bit 2)                                */
#define DMAC2_CR_SIZE_Msk                 (0xcUL)                   /*!< DMAC2 CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMAC2_CR_DIR_Pos                  (1UL)                     /*!< DMAC2 CR: DIR (Bit 1)                                 */
#define DMAC2_CR_DIR_Msk                  (0x2UL)                   /*!< DMAC2 CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMAC2_CR_CHnEN_Pos                (0UL)                     /*!< DMAC2 CR: CHnEN (Bit 0)                               */
#define DMAC2_CR_CHnEN_Msk                (0x1UL)                   /*!< DMAC2 CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMAC2_IESR_TRERIENn_Pos           (5UL)                     /*!< DMAC2 IESR: TRERIENn (Bit 5)                          */
#define DMAC2_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMAC2 IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMAC2_IESR_TRCIENn_Pos            (4UL)                     /*!< DMAC2 IESR: TRCIENn (Bit 4)                           */
#define DMAC2_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMAC2 IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMAC2_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMAC2 IESR: TRERIFGn (Bit 1)                          */
#define DMAC2_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMAC2 IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMAC2_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMAC2 IESR: TRCIFGn (Bit 0)                           */
#define DMAC2_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMAC2 IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMAC2_PAR_PBADR_Pos               (16UL)                    /*!< DMAC2 PAR: PBADR (Bit 16)                             */
#define DMAC2_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMAC2 PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMAC2_PAR_POADR_Pos               (0UL)                     /*!< DMAC2 PAR: POADR (Bit 0)                              */
#define DMAC2_PAR_POADR_Msk               (0xffffUL)                /*!< DMAC2 PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMAC2_MAR_MAR_Pos                 (0UL)                     /*!< DMAC2 MAR: MAR (Bit 0)                                */
#define DMAC2_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMAC2 MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMAC3                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMAC3_CR_TRANSCNT_Pos             (16UL)                    /*!< DMAC3 CR: TRANSCNT (Bit 16)                           */
#define DMAC3_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMAC3 CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMAC3_CR_ERFGSTP_Pos              (15UL)                    /*!< DMAC3 CR: ERFGSTP (Bit 15)                            */
#define DMAC3_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMAC3 CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMAC3_CR_PERSEL_Pos               (8UL)                     /*!< DMAC3 CR: PERSEL (Bit 8)                              */
#define DMAC3_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMAC3 CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMAC3_CR_SIZE_Pos                 (2UL)                     /*!< DMAC3 CR: SIZE (Bit 2)                                */
#define DMAC3_CR_SIZE_Msk                 (0xcUL)                   /*!< DMAC3 CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMAC3_CR_DIR_Pos                  (1UL)                     /*!< DMAC3 CR: DIR (Bit 1)                                 */
#define DMAC3_CR_DIR_Msk                  (0x2UL)                   /*!< DMAC3 CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMAC3_CR_CHnEN_Pos                (0UL)                     /*!< DMAC3 CR: CHnEN (Bit 0)                               */
#define DMAC3_CR_CHnEN_Msk                (0x1UL)                   /*!< DMAC3 CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMAC3_IESR_TRERIENn_Pos           (5UL)                     /*!< DMAC3 IESR: TRERIENn (Bit 5)                          */
#define DMAC3_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMAC3 IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMAC3_IESR_TRCIENn_Pos            (4UL)                     /*!< DMAC3 IESR: TRCIENn (Bit 4)                           */
#define DMAC3_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMAC3 IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMAC3_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMAC3 IESR: TRERIFGn (Bit 1)                          */
#define DMAC3_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMAC3 IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMAC3_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMAC3 IESR: TRCIFGn (Bit 0)                           */
#define DMAC3_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMAC3 IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMAC3_PAR_PBADR_Pos               (16UL)                    /*!< DMAC3 PAR: PBADR (Bit 16)                             */
#define DMAC3_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMAC3 PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMAC3_PAR_POADR_Pos               (0UL)                     /*!< DMAC3 PAR: POADR (Bit 0)                              */
#define DMAC3_PAR_POADR_Msk               (0xffffUL)                /*!< DMAC3 PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMAC3_MAR_MAR_Pos                 (0UL)                     /*!< DMAC3 MAR: MAR (Bit 0)                                */
#define DMAC3_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMAC3 MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           DMAC4                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define DMAC4_CR_TRANSCNT_Pos             (16UL)                    /*!< DMAC4 CR: TRANSCNT (Bit 16)                           */
#define DMAC4_CR_TRANSCNT_Msk             (0xfff0000UL)             /*!< DMAC4 CR: TRANSCNT (Bitfield-Mask: 0xfff)             */
#define DMAC4_CR_ERFGSTP_Pos              (15UL)                    /*!< DMAC4 CR: ERFGSTP (Bit 15)                            */
#define DMAC4_CR_ERFGSTP_Msk              (0x8000UL)                /*!< DMAC4 CR: ERFGSTP (Bitfield-Mask: 0x01)               */
#define DMAC4_CR_PERSEL_Pos               (8UL)                     /*!< DMAC4 CR: PERSEL (Bit 8)                              */
#define DMAC4_CR_PERSEL_Msk               (0x1f00UL)                /*!< DMAC4 CR: PERSEL (Bitfield-Mask: 0x1f)                */
#define DMAC4_CR_SIZE_Pos                 (2UL)                     /*!< DMAC4 CR: SIZE (Bit 2)                                */
#define DMAC4_CR_SIZE_Msk                 (0xcUL)                   /*!< DMAC4 CR: SIZE (Bitfield-Mask: 0x03)                  */
#define DMAC4_CR_DIR_Pos                  (1UL)                     /*!< DMAC4 CR: DIR (Bit 1)                                 */
#define DMAC4_CR_DIR_Msk                  (0x2UL)                   /*!< DMAC4 CR: DIR (Bitfield-Mask: 0x01)                   */
#define DMAC4_CR_CHnEN_Pos                (0UL)                     /*!< DMAC4 CR: CHnEN (Bit 0)                               */
#define DMAC4_CR_CHnEN_Msk                (0x1UL)                   /*!< DMAC4 CR: CHnEN (Bitfield-Mask: 0x01)                 */
/* =========================================================  IESR  ========================================================== */
#define DMAC4_IESR_TRERIENn_Pos           (5UL)                     /*!< DMAC4 IESR: TRERIENn (Bit 5)                          */
#define DMAC4_IESR_TRERIENn_Msk           (0x20UL)                  /*!< DMAC4 IESR: TRERIENn (Bitfield-Mask: 0x01)            */
#define DMAC4_IESR_TRCIENn_Pos            (4UL)                     /*!< DMAC4 IESR: TRCIENn (Bit 4)                           */
#define DMAC4_IESR_TRCIENn_Msk            (0x10UL)                  /*!< DMAC4 IESR: TRCIENn (Bitfield-Mask: 0x01)             */
#define DMAC4_IESR_TRERIFGn_Pos           (1UL)                     /*!< DMAC4 IESR: TRERIFGn (Bit 1)                          */
#define DMAC4_IESR_TRERIFGn_Msk           (0x2UL)                   /*!< DMAC4 IESR: TRERIFGn (Bitfield-Mask: 0x01)            */
#define DMAC4_IESR_TRCIFGn_Pos            (0UL)                     /*!< DMAC4 IESR: TRCIFGn (Bit 0)                           */
#define DMAC4_IESR_TRCIFGn_Msk            (0x1UL)                   /*!< DMAC4 IESR: TRCIFGn (Bitfield-Mask: 0x01)             */
/* ==========================================================  PAR  ========================================================== */
#define DMAC4_PAR_PBADR_Pos               (16UL)                    /*!< DMAC4 PAR: PBADR (Bit 16)                             */
#define DMAC4_PAR_PBADR_Msk               (0xffff0000UL)            /*!< DMAC4 PAR: PBADR (Bitfield-Mask: 0xffff)              */
#define DMAC4_PAR_POADR_Pos               (0UL)                     /*!< DMAC4 PAR: POADR (Bit 0)                              */
#define DMAC4_PAR_POADR_Msk               (0xffffUL)                /*!< DMAC4 PAR: POADR (Bitfield-Mask: 0xffff)              */
/* ==========================================================  MAR  ========================================================== */
#define DMAC4_MAR_MAR_Pos                 (0UL)                     /*!< DMAC4 MAR: MAR (Bit 0)                                */
#define DMAC4_MAR_MAR_Msk                 (0xffffffffUL)            /*!< DMAC4 MAR: MAR (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  TRIM00  ========================================================= */
/* ========================================================  TRIM01  ========================================================= */
/* ========================================================  TRIM02  ========================================================= */
/* ========================================================  TRIM03  ========================================================= */
/* ========================================================  TRIM04  ========================================================= */
/* ========================================================  TRIM05  ========================================================= */
/* ========================================================  TRIM06  ========================================================= */
/* ========================================================  TRIM07  ========================================================= */
/* ========================================================  TRIM08  ========================================================= */
/* ========================================================  TRIM09  ========================================================= */
/* ========================================================  TRIM10  ========================================================= */
/* ========================================================  TRIM11  ========================================================= */
/* ========================================================  TRIM12  ========================================================= */
/* ========================================================  TRIM13  ========================================================= */
/* ========================================================  TRIM14  ========================================================= */
/* ========================================================  TRIM15  ========================================================= */
/* ========================================================  TRIM16  ========================================================= */
/* ========================================================  TRIM17  ========================================================= */
/* ========================================================  TRIM18  ========================================================= */
/* ========================================================  TRIM19  ========================================================= */
/* =====================================================  CONF_MF1CNFIG  ===================================================== */
#define COA0_CONF_MF1CNFIG_XYCDN_Pos      (0UL)                     /*!< COA0 CONF_MF1CNFIG: XYCDN (Bit 0)                     */
#define COA0_CONF_MF1CNFIG_XYCDN_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF1CNFIG: XYCDN (Bitfield-Mask: 0xffffffff) */
/* =====================================================  CONF_MF2CNFIG  ===================================================== */
#define COA0_CONF_MF2CNFIG_LOTNO_Pos      (8UL)                     /*!< COA0 CONF_MF2CNFIG: LOTNO (Bit 8)                     */
#define COA0_CONF_MF2CNFIG_LOTNO_Msk      (0xffffff00UL)            /*!< COA0 CONF_MF2CNFIG: LOTNO (Bitfield-Mask: 0xffffff)   */
#define COA0_CONF_MF2CNFIG_WAFNO_Pos      (0UL)                     /*!< COA0 CONF_MF2CNFIG: WAFNO (Bit 0)                     */
#define COA0_CONF_MF2CNFIG_WAFNO_Msk      (0xffUL)                  /*!< COA0 CONF_MF2CNFIG: WAFNO (Bitfield-Mask: 0xff)       */
/* =====================================================  CONF_MF3CNFIG  ===================================================== */
#define COA0_CONF_MF3CNFIG_LOTNO_Pos      (0UL)                     /*!< COA0 CONF_MF3CNFIG: LOTNO (Bit 0)                     */
#define COA0_CONF_MF3CNFIG_LOTNO_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF3CNFIG: LOTNO (Bitfield-Mask: 0xffffffff) */
/* =====================================================  CONF_MF4CNFIG  ===================================================== */
#define COA0_CONF_MF4CNFIG_LOTNO_Pos      (0UL)                     /*!< COA0 CONF_MF4CNFIG: LOTNO (Bit 0)                     */
#define COA0_CONF_MF4CNFIG_LOTNO_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF4CNFIG: LOTNO (Bitfield-Mask: 0xffffffff) */
/* ========================================================  TRIM24  ========================================================= */
/* ========================================================  TRIM25  ========================================================= */
/* ========================================================  TRIM26  ========================================================= */
/* ========================================================  TRIM27  ========================================================= */
/* ========================================================  TRIM28  ========================================================= */
/* ========================================================  TRIM29  ========================================================= */
/* ========================================================  TRIM30  ========================================================= */
/* ========================================================  TRIM31  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RPCNFIG  ======================================================== */
#define COA1_RPCNFIG_WTIDKY_Pos           (4UL)                     /*!< COA1 RPCNFIG: WTIDKY (Bit 4)                          */
#define COA1_RPCNFIG_WTIDKY_Msk           (0xfffffff0UL)            /*!< COA1 RPCNFIG: WTIDKY (Bitfield-Mask: 0xfffffff)       */
#define COA1_RPCNFIG_READP_Pos            (0UL)                     /*!< COA1 RPCNFIG: READP (Bit 0)                           */
#define COA1_RPCNFIG_READP_Msk            (0x3UL)                   /*!< COA1 RPCNFIG: READP (Bitfield-Mask: 0x03)             */
/* =======================================================  WDTCNFIG  ======================================================== */
#define COA1_WDTCNFIG_WRCMF_Pos           (4UL)                     /*!< COA1 WDTCNFIG: WRCMF (Bit 4)                          */
#define COA1_WDTCNFIG_WRCMF_Msk           (0xfff0UL)                /*!< COA1 WDTCNFIG: WRCMF (Bitfield-Mask: 0xfff)           */
#define COA1_WDTCNFIG_WCLKMF_Pos          (2UL)                     /*!< COA1 WDTCNFIG: WCLKMF (Bit 2)                         */
#define COA1_WDTCNFIG_WCLKMF_Msk          (0x4UL)                   /*!< COA1 WDTCNFIG: WCLKMF (Bitfield-Mask: 0x01)           */
#define COA1_WDTCNFIG_WRSTMF_Pos          (1UL)                     /*!< COA1 WDTCNFIG: WRSTMF (Bit 1)                         */
#define COA1_WDTCNFIG_WRSTMF_Msk          (0x2UL)                   /*!< COA1 WDTCNFIG: WRSTMF (Bitfield-Mask: 0x01)           */
#define COA1_WDTCNFIG_WCNTMF_Pos          (0UL)                     /*!< COA1 WDTCNFIG: WCNTMF (Bit 0)                         */
#define COA1_WDTCNFIG_WCNTMF_Msk          (0x1UL)                   /*!< COA1 WDTCNFIG: WCNTMF (Bitfield-Mask: 0x01)           */
/* =======================================================  LVRCNFIG  ======================================================== */
#define COA1_LVRCNFIG_LVRENM_Pos          (8UL)                     /*!< COA1 LVRCNFIG: LVRENM (Bit 8)                         */
#define COA1_LVRCNFIG_LVRENM_Msk          (0xff00UL)                /*!< COA1 LVRCNFIG: LVRENM (Bitfield-Mask: 0xff)           */
#define COA1_LVRCNFIG_LVRVS_Pos           (0UL)                     /*!< COA1 LVRCNFIG: LVRVS (Bit 0)                          */
#define COA1_LVRCNFIG_LVRVS_Msk           (0x7UL)                   /*!< COA1 LVRCNFIG: LVRVS (Bitfield-Mask: 0x07)            */
/* =======================================================  CNFIGWTP1  ======================================================= */
#define COA1_CNFIGWTP1_CP3WP_Pos          (2UL)                     /*!< COA1 CNFIGWTP1: CP3WP (Bit 2)                         */
#define COA1_CNFIGWTP1_CP3WP_Msk          (0x4UL)                   /*!< COA1 CNFIGWTP1: CP3WP (Bitfield-Mask: 0x01)           */
#define COA1_CNFIGWTP1_CP2WP_Pos          (1UL)                     /*!< COA1 CNFIGWTP1: CP2WP (Bit 1)                         */
#define COA1_CNFIGWTP1_CP2WP_Msk          (0x2UL)                   /*!< COA1 CNFIGWTP1: CP2WP (Bitfield-Mask: 0x01)           */
#define COA1_CNFIGWTP1_CP1WP_Pos          (0UL)                     /*!< COA1 CNFIGWTP1: CP1WP (Bit 0)                         */
#define COA1_CNFIGWTP1_CP1WP_Msk          (0x1UL)                   /*!< COA1 CNFIGWTP1: CP1WP (Bitfield-Mask: 0x01)           */
/* ========================================================  FMWTP1  ========================================================= */
#define COA1_FMWTP1_SWTP31_Pos            (31UL)                    /*!< COA1 FMWTP1: SWTP31 (Bit 31)                          */
#define COA1_FMWTP1_SWTP31_Msk            (0x80000000UL)            /*!< COA1 FMWTP1: SWTP31 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP30_Pos            (30UL)                    /*!< COA1 FMWTP1: SWTP30 (Bit 30)                          */
#define COA1_FMWTP1_SWTP30_Msk            (0x40000000UL)            /*!< COA1 FMWTP1: SWTP30 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP29_Pos            (29UL)                    /*!< COA1 FMWTP1: SWTP29 (Bit 29)                          */
#define COA1_FMWTP1_SWTP29_Msk            (0x20000000UL)            /*!< COA1 FMWTP1: SWTP29 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP28_Pos            (28UL)                    /*!< COA1 FMWTP1: SWTP28 (Bit 28)                          */
#define COA1_FMWTP1_SWTP28_Msk            (0x10000000UL)            /*!< COA1 FMWTP1: SWTP28 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP27_Pos            (27UL)                    /*!< COA1 FMWTP1: SWTP27 (Bit 27)                          */
#define COA1_FMWTP1_SWTP27_Msk            (0x8000000UL)             /*!< COA1 FMWTP1: SWTP27 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP26_Pos            (26UL)                    /*!< COA1 FMWTP1: SWTP26 (Bit 26)                          */
#define COA1_FMWTP1_SWTP26_Msk            (0x4000000UL)             /*!< COA1 FMWTP1: SWTP26 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP25_Pos            (25UL)                    /*!< COA1 FMWTP1: SWTP25 (Bit 25)                          */
#define COA1_FMWTP1_SWTP25_Msk            (0x2000000UL)             /*!< COA1 FMWTP1: SWTP25 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP24_Pos            (24UL)                    /*!< COA1 FMWTP1: SWTP24 (Bit 24)                          */
#define COA1_FMWTP1_SWTP24_Msk            (0x1000000UL)             /*!< COA1 FMWTP1: SWTP24 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP23_Pos            (23UL)                    /*!< COA1 FMWTP1: SWTP23 (Bit 23)                          */
#define COA1_FMWTP1_SWTP23_Msk            (0x800000UL)              /*!< COA1 FMWTP1: SWTP23 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP22_Pos            (22UL)                    /*!< COA1 FMWTP1: SWTP22 (Bit 22)                          */
#define COA1_FMWTP1_SWTP22_Msk            (0x400000UL)              /*!< COA1 FMWTP1: SWTP22 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP21_Pos            (21UL)                    /*!< COA1 FMWTP1: SWTP21 (Bit 21)                          */
#define COA1_FMWTP1_SWTP21_Msk            (0x200000UL)              /*!< COA1 FMWTP1: SWTP21 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP20_Pos            (20UL)                    /*!< COA1 FMWTP1: SWTP20 (Bit 20)                          */
#define COA1_FMWTP1_SWTP20_Msk            (0x100000UL)              /*!< COA1 FMWTP1: SWTP20 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP19_Pos            (19UL)                    /*!< COA1 FMWTP1: SWTP19 (Bit 19)                          */
#define COA1_FMWTP1_SWTP19_Msk            (0x80000UL)               /*!< COA1 FMWTP1: SWTP19 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP18_Pos            (18UL)                    /*!< COA1 FMWTP1: SWTP18 (Bit 18)                          */
#define COA1_FMWTP1_SWTP18_Msk            (0x40000UL)               /*!< COA1 FMWTP1: SWTP18 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP17_Pos            (17UL)                    /*!< COA1 FMWTP1: SWTP17 (Bit 17)                          */
#define COA1_FMWTP1_SWTP17_Msk            (0x20000UL)               /*!< COA1 FMWTP1: SWTP17 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP16_Pos            (16UL)                    /*!< COA1 FMWTP1: SWTP16 (Bit 16)                          */
#define COA1_FMWTP1_SWTP16_Msk            (0x10000UL)               /*!< COA1 FMWTP1: SWTP16 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP15_Pos            (15UL)                    /*!< COA1 FMWTP1: SWTP15 (Bit 15)                          */
#define COA1_FMWTP1_SWTP15_Msk            (0x8000UL)                /*!< COA1 FMWTP1: SWTP15 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP14_Pos            (14UL)                    /*!< COA1 FMWTP1: SWTP14 (Bit 14)                          */
#define COA1_FMWTP1_SWTP14_Msk            (0x4000UL)                /*!< COA1 FMWTP1: SWTP14 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP13_Pos            (13UL)                    /*!< COA1 FMWTP1: SWTP13 (Bit 13)                          */
#define COA1_FMWTP1_SWTP13_Msk            (0x2000UL)                /*!< COA1 FMWTP1: SWTP13 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP12_Pos            (12UL)                    /*!< COA1 FMWTP1: SWTP12 (Bit 12)                          */
#define COA1_FMWTP1_SWTP12_Msk            (0x1000UL)                /*!< COA1 FMWTP1: SWTP12 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP11_Pos            (11UL)                    /*!< COA1 FMWTP1: SWTP11 (Bit 11)                          */
#define COA1_FMWTP1_SWTP11_Msk            (0x800UL)                 /*!< COA1 FMWTP1: SWTP11 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP10_Pos            (10UL)                    /*!< COA1 FMWTP1: SWTP10 (Bit 10)                          */
#define COA1_FMWTP1_SWTP10_Msk            (0x400UL)                 /*!< COA1 FMWTP1: SWTP10 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP9_Pos             (9UL)                     /*!< COA1 FMWTP1: SWTP9 (Bit 9)                            */
#define COA1_FMWTP1_SWTP9_Msk             (0x200UL)                 /*!< COA1 FMWTP1: SWTP9 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP8_Pos             (8UL)                     /*!< COA1 FMWTP1: SWTP8 (Bit 8)                            */
#define COA1_FMWTP1_SWTP8_Msk             (0x100UL)                 /*!< COA1 FMWTP1: SWTP8 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP7_Pos             (7UL)                     /*!< COA1 FMWTP1: SWTP7 (Bit 7)                            */
#define COA1_FMWTP1_SWTP7_Msk             (0x80UL)                  /*!< COA1 FMWTP1: SWTP7 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP6_Pos             (6UL)                     /*!< COA1 FMWTP1: SWTP6 (Bit 6)                            */
#define COA1_FMWTP1_SWTP6_Msk             (0x40UL)                  /*!< COA1 FMWTP1: SWTP6 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP5_Pos             (5UL)                     /*!< COA1 FMWTP1: SWTP5 (Bit 5)                            */
#define COA1_FMWTP1_SWTP5_Msk             (0x20UL)                  /*!< COA1 FMWTP1: SWTP5 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP4_Pos             (4UL)                     /*!< COA1 FMWTP1: SWTP4 (Bit 4)                            */
#define COA1_FMWTP1_SWTP4_Msk             (0x10UL)                  /*!< COA1 FMWTP1: SWTP4 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP3_Pos             (3UL)                     /*!< COA1 FMWTP1: SWTP3 (Bit 3)                            */
#define COA1_FMWTP1_SWTP3_Msk             (0x8UL)                   /*!< COA1 FMWTP1: SWTP3 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP2_Pos             (2UL)                     /*!< COA1 FMWTP1: SWTP2 (Bit 2)                            */
#define COA1_FMWTP1_SWTP2_Msk             (0x4UL)                   /*!< COA1 FMWTP1: SWTP2 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP1_Pos             (1UL)                     /*!< COA1 FMWTP1: SWTP1 (Bit 1)                            */
#define COA1_FMWTP1_SWTP1_Msk             (0x2UL)                   /*!< COA1 FMWTP1: SWTP1 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP0_Pos             (0UL)                     /*!< COA1 FMWTP1: SWTP0 (Bit 0)                            */
#define COA1_FMWTP1_SWTP0_Msk             (0x1UL)                   /*!< COA1 FMWTP1: SWTP0 (Bitfield-Mask: 0x01)              */


/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  PATRIG  ========================================================= */
/* ===============================================  INTC PATRIG ITRIG9 [9..9]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG9                                                        */
  INTC_PATRIG_ITRIG9_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG9_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG9_Enum;

/* ===============================================  INTC PATRIG ITRIG8 [8..8]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG8                                                        */
  INTC_PATRIG_ITRIG8_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG8_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG8_Enum;

/* ===============================================  INTC PATRIG ITRIG7 [7..7]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG7                                                        */
  INTC_PATRIG_ITRIG7_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG7_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG7_Enum;

/* ===============================================  INTC PATRIG ITRIG6 [6..6]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG6                                                        */
  INTC_PATRIG_ITRIG6_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG6_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG6_Enum;

/* ===============================================  INTC PATRIG ITRIG5 [5..5]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG5                                                        */
  INTC_PATRIG_ITRIG5_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG5_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG5_Enum;

/* ===============================================  INTC PATRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG4                                                        */
  INTC_PATRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG4_Enum;

/* ===============================================  INTC PATRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG3                                                        */
  INTC_PATRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG3_Enum;

/* ===============================================  INTC PATRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG2                                                        */
  INTC_PATRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG2_Enum;

/* ===============================================  INTC PATRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG1                                                        */
  INTC_PATRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG1_Enum;

/* ===============================================  INTC PATRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PATRIG_ITRIG0                                                        */
  INTC_PATRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PATRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PATRIG_ITRIG0_Enum;

/* ========================================================  PBTRIG  ========================================================= */
/* =============================================  INTC PBTRIG ITRIG12 [12..12]  ============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG12                                                       */
  INTC_PBTRIG_ITRIG12_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG12_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG12_Enum;

/* =============================================  INTC PBTRIG ITRIG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG11                                                       */
  INTC_PBTRIG_ITRIG11_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG11_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG11_Enum;

/* =============================================  INTC PBTRIG ITRIG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG10                                                       */
  INTC_PBTRIG_ITRIG10_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG10_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG10_Enum;

/* ===============================================  INTC PBTRIG ITRIG9 [9..9]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG9                                                        */
  INTC_PBTRIG_ITRIG9_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG9_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG9_Enum;

/* ===============================================  INTC PBTRIG ITRIG8 [8..8]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG8                                                        */
  INTC_PBTRIG_ITRIG8_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG8_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG8_Enum;

/* ===============================================  INTC PBTRIG ITRIG7 [7..7]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG7                                                        */
  INTC_PBTRIG_ITRIG7_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG7_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG7_Enum;

/* ===============================================  INTC PBTRIG ITRIG6 [6..6]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG6                                                        */
  INTC_PBTRIG_ITRIG6_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG6_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG6_Enum;

/* ===============================================  INTC PBTRIG ITRIG5 [5..5]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG5                                                        */
  INTC_PBTRIG_ITRIG5_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG5_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG5_Enum;

/* ===============================================  INTC PBTRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG4                                                        */
  INTC_PBTRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG4_Enum;

/* ===============================================  INTC PBTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG3                                                        */
  INTC_PBTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG3_Enum;

/* ===============================================  INTC PBTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG2                                                        */
  INTC_PBTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG2_Enum;

/* ===============================================  INTC PBTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG1                                                        */
  INTC_PBTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG1_Enum;

/* ===============================================  INTC PBTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG0                                                        */
  INTC_PBTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG0_Enum;

/* ========================================================  PCTRIG  ========================================================= */
/* =============================================  INTC PCTRIG ITRIG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG11                                                       */
  INTC_PCTRIG_ITRIG11_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG11_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG11_Enum;

/* =============================================  INTC PCTRIG ITRIG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG10                                                       */
  INTC_PCTRIG_ITRIG10_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG10_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG10_Enum;

/* ===============================================  INTC PCTRIG ITRIG9 [9..9]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG9                                                        */
  INTC_PCTRIG_ITRIG9_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG9_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG9_Enum;

/* ===============================================  INTC PCTRIG ITRIG8 [8..8]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG8                                                        */
  INTC_PCTRIG_ITRIG8_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG8_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG8_Enum;

/* ===============================================  INTC PCTRIG ITRIG7 [7..7]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG7                                                        */
  INTC_PCTRIG_ITRIG7_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG7_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG7_Enum;

/* ===============================================  INTC PCTRIG ITRIG6 [6..6]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG6                                                        */
  INTC_PCTRIG_ITRIG6_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG6_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG6_Enum;

/* ===============================================  INTC PCTRIG ITRIG5 [5..5]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG5                                                        */
  INTC_PCTRIG_ITRIG5_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG5_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG5_Enum;

/* ===============================================  INTC PCTRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG4                                                        */
  INTC_PCTRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG4_Enum;

/* ===============================================  INTC PCTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG3                                                        */
  INTC_PCTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG3_Enum;

/* ===============================================  INTC PCTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG2                                                        */
  INTC_PCTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG2_Enum;

/* ===============================================  INTC PCTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG1                                                        */
  INTC_PCTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG1_Enum;

/* ===============================================  INTC PCTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG0                                                        */
  INTC_PCTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG0_Enum;

/* ========================================================  PDTRIG  ========================================================= */
/* ===============================================  INTC PDTRIG ITRIG7 [7..7]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG7                                                        */
  INTC_PDTRIG_ITRIG7_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG7_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG7_Enum;

/* ===============================================  INTC PDTRIG ITRIG6 [6..6]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG6                                                        */
  INTC_PDTRIG_ITRIG6_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG6_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG6_Enum;

/* ===============================================  INTC PDTRIG ITRIG5 [5..5]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG5                                                        */
  INTC_PDTRIG_ITRIG5_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG5_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG5_Enum;

/* ===============================================  INTC PDTRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG4                                                        */
  INTC_PDTRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG4_Enum;

/* ===============================================  INTC PDTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG3                                                        */
  INTC_PDTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG3_Enum;

/* ===============================================  INTC PDTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG2                                                        */
  INTC_PDTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG2_Enum;

/* ===============================================  INTC PDTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG1                                                        */
  INTC_PDTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG1_Enum;

/* ===============================================  INTC PDTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PDTRIG_ITRIG0                                                        */
  INTC_PDTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PDTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PDTRIG_ITRIG0_Enum;

/* ========================================================  PETRIG  ========================================================= */
/* ===============================================  INTC PETRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG4                                                        */
  INTC_PETRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG4_Enum;

/* ===============================================  INTC PETRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG3                                                        */
  INTC_PETRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG3_Enum;

/* ===============================================  INTC PETRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG2                                                        */
  INTC_PETRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG2_Enum;

/* ===============================================  INTC PETRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG1                                                        */
  INTC_PETRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG1_Enum;

/* ===============================================  INTC PETRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG0                                                        */
  INTC_PETRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG0_Enum;

/* ========================================================  PFTRIG  ========================================================= */
/* ===============================================  INTC PFTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PFTRIG_ITRIG3                                                        */
  INTC_PFTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PFTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PFTRIG_ITRIG3_Enum;

/* ===============================================  INTC PFTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PFTRIG_ITRIG2                                                        */
  INTC_PFTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PFTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PFTRIG_ITRIG2_Enum;

/* ===============================================  INTC PFTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PFTRIG_ITRIG1                                                        */
  INTC_PFTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PFTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PFTRIG_ITRIG1_Enum;

/* ===============================================  INTC PFTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PFTRIG_ITRIG0                                                        */
  INTC_PFTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PFTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PFTRIG_ITRIG0_Enum;

/* =========================================================  PACR  ========================================================== */
/* ==============================================  INTC PACR INTCTL9 [18..19]  =============================================== */
typedef enum {                                  /*!< INTC_PACR_INTCTL9                                                         */
  INTC_PACR_INTCTL9_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL9_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL9_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL9_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                                    No level interrupt                                         */
} INTC_PACR_INTCTL9_Enum;

/* ==============================================  INTC PACR INTCTL8 [16..17]  =============================================== */
typedef enum {                                  /*!< INTC_PACR_INTCTL8                                                         */
  INTC_PACR_INTCTL8_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL8_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL8_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL8_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL8_Enum;

/* ==============================================  INTC PACR INTCTL7 [14..15]  =============================================== */
typedef enum {                                  /*!< INTC_PACR_INTCTL7                                                         */
  INTC_PACR_INTCTL7_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL7_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL7_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL7_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL7_Enum;

/* ==============================================  INTC PACR INTCTL6 [12..13]  =============================================== */
typedef enum {                                  /*!< INTC_PACR_INTCTL6                                                         */
  INTC_PACR_INTCTL6_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL6_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL6_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL6_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL6_Enum;

/* ==============================================  INTC PACR INTCTL5 [10..11]  =============================================== */
typedef enum {                                  /*!< INTC_PACR_INTCTL5                                                         */
  INTC_PACR_INTCTL5_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL5_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL5_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL5_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL5_Enum;

/* ===============================================  INTC PACR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PACR_INTCTL4                                                         */
  INTC_PACR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL4_Enum;

/* ===============================================  INTC PACR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PACR_INTCTL3                                                         */
  INTC_PACR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL3_Enum;

/* ===============================================  INTC PACR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PACR_INTCTL2                                                         */
  INTC_PACR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL2_Enum;

/* ===============================================  INTC PACR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PACR_INTCTL1                                                         */
  INTC_PACR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL1_Enum;

/* ===============================================  INTC PACR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PACR_INTCTL0                                                         */
  INTC_PACR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PACR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PACR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PACR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PACR_INTCTL0_Enum;

/* =========================================================  PBCR  ========================================================== */
/* ==============================================  INTC PBCR INTCTL12 [24..25]  ============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL12                                                        */
  INTC_PBCR_INTCTL12_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL12_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL12_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL12_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL12_Enum;

/* ==============================================  INTC PBCR INTCTL11 [22..23]  ============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL11                                                        */
  INTC_PBCR_INTCTL11_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL11_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL11_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL11_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL11_Enum;

/* ==============================================  INTC PBCR INTCTL10 [20..21]  ============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL10                                                        */
  INTC_PBCR_INTCTL10_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL10_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL10_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL10_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL10_Enum;

/* ==============================================  INTC PBCR INTCTL9 [18..19]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL9                                                         */
  INTC_PBCR_INTCTL9_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL9_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL9_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL9_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL9_Enum;

/* ==============================================  INTC PBCR INTCTL8 [16..17]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL8                                                         */
  INTC_PBCR_INTCTL8_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL8_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL8_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL8_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL8_Enum;

/* ==============================================  INTC PBCR INTCTL7 [14..15]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL7                                                         */
  INTC_PBCR_INTCTL7_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL7_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL7_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL7_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL7_Enum;

/* ==============================================  INTC PBCR INTCTL6 [12..13]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL6                                                         */
  INTC_PBCR_INTCTL6_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL6_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL6_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL6_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL6_Enum;

/* ==============================================  INTC PBCR INTCTL5 [10..11]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL5                                                         */
  INTC_PBCR_INTCTL5_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL5_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL5_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL5_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL5_Enum;

/* ===============================================  INTC PBCR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL4                                                         */
  INTC_PBCR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL4_Enum;

/* ===============================================  INTC PBCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL3                                                         */
  INTC_PBCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL3_Enum;

/* ===============================================  INTC PBCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL2                                                         */
  INTC_PBCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL2_Enum;

/* ===============================================  INTC PBCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL1                                                         */
  INTC_PBCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL1_Enum;

/* ===============================================  INTC PBCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL0                                                         */
  INTC_PBCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL0_Enum;

/* =========================================================  PCCR  ========================================================== */
/* ==============================================  INTC PCCR INTCTL11 [22..23]  ============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL11                                                        */
  INTC_PCCR_INTCTL11_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL11_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL11_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL11_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL11_Enum;

/* ==============================================  INTC PCCR INTCTL10 [20..21]  ============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL10                                                        */
  INTC_PCCR_INTCTL10_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL10_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL10_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL10_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL10_Enum;

/* ==============================================  INTC PCCR INTCTL9 [18..19]  =============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL9                                                         */
  INTC_PCCR_INTCTL9_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL9_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL9_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL9_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL9_Enum;

/* ==============================================  INTC PCCR INTCTL8 [16..17]  =============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL8                                                         */
  INTC_PCCR_INTCTL8_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL8_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL8_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL8_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL8_Enum;

/* ==============================================  INTC PCCR INTCTL7 [14..15]  =============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL7                                                         */
  INTC_PCCR_INTCTL7_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL7_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL7_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL7_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL7_Enum;

/* ==============================================  INTC PCCR INTCTL6 [12..13]  =============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL6                                                         */
  INTC_PCCR_INTCTL6_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL6_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL6_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL6_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL6_Enum;

/* ==============================================  INTC PCCR INTCTL5 [10..11]  =============================================== */
typedef enum {                                  /*!< INTC_PCCR_INTCTL5                                                         */
  INTC_PCCR_INTCTL5_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL5_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL5_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL5_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL5_Enum;

/* ===============================================  INTC PCCR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL4                                                         */
  INTC_PCCR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL4_Enum;

/* ===============================================  INTC PCCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL3                                                         */
  INTC_PCCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL3_Enum;

/* ===============================================  INTC PCCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL2                                                         */
  INTC_PCCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL2_Enum;

/* ===============================================  INTC PCCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL1                                                         */
  INTC_PCCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL1_Enum;

/* ===============================================  INTC PCCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL0                                                         */
  INTC_PCCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL0_Enum;

/* =========================================================  PDCR  ========================================================== */
/* ==============================================  INTC PDCR INTCTL7 [14..15]  =============================================== */
typedef enum {                                  /*!< INTC_PDCR_INTCTL7                                                         */
  INTC_PDCR_INTCTL7_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL7_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL7_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL7_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL7_Enum;

/* ==============================================  INTC PDCR INTCTL6 [12..13]  =============================================== */
typedef enum {                                  /*!< INTC_PDCR_INTCTL6                                                         */
  INTC_PDCR_INTCTL6_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL6_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL6_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL6_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL6_Enum;

/* ==============================================  INTC PDCR INTCTL5 [10..11]  =============================================== */
typedef enum {                                  /*!< INTC_PDCR_INTCTL5                                                         */
  INTC_PDCR_INTCTL5_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL5_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL5_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL5_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL5_Enum;

/* ===============================================  INTC PDCR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PDCR_INTCTL4                                                         */
  INTC_PDCR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL4_Enum;

/* ===============================================  INTC PDCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PDCR_INTCTL3                                                         */
  INTC_PDCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL3_Enum;

/* ===============================================  INTC PDCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PDCR_INTCTL2                                                         */
  INTC_PDCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL2_Enum;

/* ===============================================  INTC PDCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PDCR_INTCTL1                                                         */
  INTC_PDCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL1_Enum;

/* ===============================================  INTC PDCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PDCR_INTCTL0                                                         */
  INTC_PDCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PDCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PDCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PDCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PDCR_INTCTL0_Enum;

/* =========================================================  PECR  ========================================================== */
/* ===============================================  INTC PECR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL4                                                         */
  INTC_PECR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL4_Enum;

/* ===============================================  INTC PECR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL3                                                         */
  INTC_PECR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL3_Enum;

/* ===============================================  INTC PECR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL2                                                         */
  INTC_PECR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL2_Enum;

/* ===============================================  INTC PECR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL1                                                         */
  INTC_PECR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL1_Enum;

/* ===============================================  INTC PECR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL0                                                         */
  INTC_PECR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL0_Enum;

/* =========================================================  PFCR  ========================================================== */
/* ===============================================  INTC PFCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PFCR_INTCTL3                                                         */
  INTC_PFCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PFCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PFCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PFCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PFCR_INTCTL3_Enum;

/* ===============================================  INTC PFCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PFCR_INTCTL2                                                         */
  INTC_PFCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PFCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PFCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PFCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PFCR_INTCTL2_Enum;

/* ===============================================  INTC PFCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PFCR_INTCTL1                                                         */
  INTC_PFCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PFCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PFCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PFCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PFCR_INTCTL1_Enum;

/* ===============================================  INTC PFCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PFCR_INTCTL0                                                         */
  INTC_PFCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PFCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PFCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PFCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PFCR_INTCTL0_Enum;

/* ========================================================  PAFLAG  ========================================================= */
/* ===============================================  INTC PAFLAG FLAG9 [9..9]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG9                                                         */
  INTC_PAFLAG_FLAG9_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG9_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG9_Enum;

/* ===============================================  INTC PAFLAG FLAG8 [8..8]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG8                                                         */
  INTC_PAFLAG_FLAG8_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG8_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG8_Enum;

/* ===============================================  INTC PAFLAG FLAG7 [7..7]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG7                                                         */
  INTC_PAFLAG_FLAG7_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG7_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG7_Enum;

/* ===============================================  INTC PAFLAG FLAG6 [6..6]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG6                                                         */
  INTC_PAFLAG_FLAG6_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG6_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG6_Enum;

/* ===============================================  INTC PAFLAG FLAG5 [5..5]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG5                                                         */
  INTC_PAFLAG_FLAG5_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG5_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG5_Enum;

/* ===============================================  INTC PAFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG4                                                         */
  INTC_PAFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG4_Enum;

/* ===============================================  INTC PAFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG3                                                         */
  INTC_PAFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG3_Enum;

/* ===============================================  INTC PAFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG2                                                         */
  INTC_PAFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG2_Enum;

/* ===============================================  INTC PAFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG1                                                         */
  INTC_PAFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG1_Enum;

/* ===============================================  INTC PAFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PAFLAG_FLAG0                                                         */
  INTC_PAFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PAFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PAFLAG_FLAG0_Enum;

/* ========================================================  PBFLAG  ========================================================= */
/* ==============================================  INTC PBFLAG FLAG12 [12..12]  ============================================== */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG12                                                        */
  INTC_PBFLAG_FLAG12_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG12_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG12_Enum;

/* ==============================================  INTC PBFLAG FLAG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG11                                                        */
  INTC_PBFLAG_FLAG11_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG11_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG11_Enum;

/* ==============================================  INTC PBFLAG FLAG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG10                                                        */
  INTC_PBFLAG_FLAG10_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG10_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG10_Enum;

/* ===============================================  INTC PBFLAG FLAG9 [9..9]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG9                                                         */
  INTC_PBFLAG_FLAG9_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG9_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG9_Enum;

/* ===============================================  INTC PBFLAG FLAG8 [8..8]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG8                                                         */
  INTC_PBFLAG_FLAG8_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG8_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG8_Enum;

/* ===============================================  INTC PBFLAG FLAG7 [7..7]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG7                                                         */
  INTC_PBFLAG_FLAG7_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG7_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG7_Enum;

/* ===============================================  INTC PBFLAG FLAG6 [6..6]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG6                                                         */
  INTC_PBFLAG_FLAG6_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG6_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG6_Enum;

/* ===============================================  INTC PBFLAG FLAG5 [5..5]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG5                                                         */
  INTC_PBFLAG_FLAG5_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG5_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG5_Enum;

/* ===============================================  INTC PBFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG4                                                         */
  INTC_PBFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG4_Enum;

/* ===============================================  INTC PBFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG3                                                         */
  INTC_PBFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG3_Enum;

/* ===============================================  INTC PBFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG2                                                         */
  INTC_PBFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG2_Enum;

/* ===============================================  INTC PBFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG1                                                         */
  INTC_PBFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG1_Enum;

/* ===============================================  INTC PBFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG0                                                         */
  INTC_PBFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG0_Enum;

/* ========================================================  PCFLAG  ========================================================= */
/* ==============================================  INTC PCFLAG FLAG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG11                                                        */
  INTC_PCFLAG_FLAG11_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG11_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG11_Enum;

/* ==============================================  INTC PCFLAG FLAG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG10                                                        */
  INTC_PCFLAG_FLAG10_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG10_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG10_Enum;

/* ===============================================  INTC PCFLAG FLAG9 [9..9]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG9                                                         */
  INTC_PCFLAG_FLAG9_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG9_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG9_Enum;

/* ===============================================  INTC PCFLAG FLAG8 [8..8]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG8                                                         */
  INTC_PCFLAG_FLAG8_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG8_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG8_Enum;

/* ===============================================  INTC PCFLAG FLAG7 [7..7]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG7                                                         */
  INTC_PCFLAG_FLAG7_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG7_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG7_Enum;

/* ===============================================  INTC PCFLAG FLAG6 [6..6]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG6                                                         */
  INTC_PCFLAG_FLAG6_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG6_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG6_Enum;

/* ===============================================  INTC PCFLAG FLAG5 [5..5]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG5                                                         */
  INTC_PCFLAG_FLAG5_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG5_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG5_Enum;

/* ===============================================  INTC PCFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG4                                                         */
  INTC_PCFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG4_Enum;

/* ===============================================  INTC PCFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG3                                                         */
  INTC_PCFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG3_Enum;

/* ===============================================  INTC PCFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG2                                                         */
  INTC_PCFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG2_Enum;

/* ===============================================  INTC PCFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG1                                                         */
  INTC_PCFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG1_Enum;

/* ===============================================  INTC PCFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG0                                                         */
  INTC_PCFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG0_Enum;

/* ========================================================  PDFLAG  ========================================================= */
/* ===============================================  INTC PDFLAG FLAG7 [7..7]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG7                                                         */
  INTC_PDFLAG_FLAG7_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG7_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG7_Enum;

/* ===============================================  INTC PDFLAG FLAG6 [6..6]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG6                                                         */
  INTC_PDFLAG_FLAG6_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG6_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG6_Enum;

/* ===============================================  INTC PDFLAG FLAG5 [5..5]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG5                                                         */
  INTC_PDFLAG_FLAG5_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG5_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG5_Enum;

/* ===============================================  INTC PDFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG4                                                         */
  INTC_PDFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG4_Enum;

/* ===============================================  INTC PDFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG3                                                         */
  INTC_PDFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG3_Enum;

/* ===============================================  INTC PDFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG2                                                         */
  INTC_PDFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG2_Enum;

/* ===============================================  INTC PDFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG1                                                         */
  INTC_PDFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG1_Enum;

/* ===============================================  INTC PDFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PDFLAG_FLAG0                                                         */
  INTC_PDFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PDFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PDFLAG_FLAG0_Enum;

/* ========================================================  PEFLAG  ========================================================= */
/* ===============================================  INTC PEFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG4                                                         */
  INTC_PEFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG4_Enum;

/* ===============================================  INTC PEFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG3                                                         */
  INTC_PEFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG3_Enum;

/* ===============================================  INTC PEFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG2                                                         */
  INTC_PEFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG2_Enum;

/* ===============================================  INTC PEFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG1                                                         */
  INTC_PEFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG1_Enum;

/* ===============================================  INTC PEFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG0                                                         */
  INTC_PEFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG0_Enum;

/* ========================================================  PFFLAG  ========================================================= */
/* ===============================================  INTC PFFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PFFLAG_FLAG3                                                         */
  INTC_PFFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PFFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PFFLAG_FLAG3_Enum;

/* ===============================================  INTC PFFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PFFLAG_FLAG2                                                         */
  INTC_PFFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PFFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PFFLAG_FLAG2_Enum;

/* ===============================================  INTC PFFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PFFLAG_FLAG1                                                         */
  INTC_PFFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PFFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PFFLAG_FLAG1_Enum;

/* ===============================================  INTC PFFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PFFLAG_FLAG0                                                         */
  INTC_PFFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PFFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PFFLAG_FLAG0_Enum;

/* ======================================================  EINT0CONF1  ======================================================= */
/* ============================================  INTC EINT0CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF7                                                     */
  INTC_EINT0CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF7_Enum;

/* ============================================  INTC EINT0CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF6                                                     */
  INTC_EINT0CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF6_Enum;

/* ============================================  INTC EINT0CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF5                                                     */
  INTC_EINT0CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF5_Enum;

/* ============================================  INTC EINT0CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF4                                                     */
  INTC_EINT0CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF4_Enum;

/* ============================================  INTC EINT0CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF3                                                     */
  INTC_EINT0CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF3_Enum;

/* =============================================  INTC EINT0CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF2                                                     */
  INTC_EINT0CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF2_Enum;

/* =============================================  INTC EINT0CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF1                                                     */
  INTC_EINT0CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF1_Enum;

/* =============================================  INTC EINT0CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF0                                                     */
  INTC_EINT0CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF0_Enum;

/* ======================================================  EINT1CONF1  ======================================================= */
/* ============================================  INTC EINT1CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF7                                                     */
  INTC_EINT1CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF7_Enum;

/* ============================================  INTC EINT1CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF6                                                     */
  INTC_EINT1CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF6_Enum;

/* ============================================  INTC EINT1CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF5                                                     */
  INTC_EINT1CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF5_Enum;

/* ============================================  INTC EINT1CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF4                                                     */
  INTC_EINT1CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF4_Enum;

/* ============================================  INTC EINT1CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF3                                                     */
  INTC_EINT1CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF3_Enum;

/* =============================================  INTC EINT1CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF2                                                     */
  INTC_EINT1CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF2_Enum;

/* =============================================  INTC EINT1CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF1                                                     */
  INTC_EINT1CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF1_Enum;

/* =============================================  INTC EINT1CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF0                                                     */
  INTC_EINT1CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF0_Enum;

/* ======================================================  EINT2CONF1  ======================================================= */
/* ============================================  INTC EINT2CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF7                                                     */
  INTC_EINT2CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF7_Enum;

/* ============================================  INTC EINT2CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF6                                                     */
  INTC_EINT2CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF6_Enum;

/* ============================================  INTC EINT2CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF5                                                     */
  INTC_EINT2CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF5_Enum;

/* ============================================  INTC EINT2CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF4                                                     */
  INTC_EINT2CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF4_Enum;

/* ============================================  INTC EINT2CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF3                                                     */
  INTC_EINT2CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF3_Enum;

/* =============================================  INTC EINT2CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF2                                                     */
  INTC_EINT2CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF2_Enum;

/* =============================================  INTC EINT2CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF1                                                     */
  INTC_EINT2CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF1_Enum;

/* =============================================  INTC EINT2CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF0                                                     */
  INTC_EINT2CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF0_Enum;

/* ======================================================  EINT3CONF1  ======================================================= */
/* ============================================  INTC EINT3CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF7                                                     */
  INTC_EINT3CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF7_Enum;

/* ============================================  INTC EINT3CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF6                                                     */
  INTC_EINT3CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF6_Enum;

/* ============================================  INTC EINT3CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF5                                                     */
  INTC_EINT3CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF5_Enum;

/* ============================================  INTC EINT3CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF4                                                     */
  INTC_EINT3CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF4_Enum;

/* ============================================  INTC EINT3CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF3                                                     */
  INTC_EINT3CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF3_Enum;

/* =============================================  INTC EINT3CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF2                                                     */
  INTC_EINT3CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF2_Enum;

/* =============================================  INTC EINT3CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF1                                                     */
  INTC_EINT3CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF1_Enum;

/* =============================================  INTC EINT3CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF0                                                     */
  INTC_EINT3CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF0_Enum;

/* ======================================================  EINT0CONF2  ======================================================= */
/* ============================================  INTC EINT0CONF2 CONF12 [16..19]  ============================================ */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF12                                                    */
  INTC_EINT0CONF2_CONF12_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF12_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF12_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF12_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF12_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF12_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF12_Enum;

/* ============================================  INTC EINT0CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF11                                                    */
  INTC_EINT0CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF11_Enum;

/* ============================================  INTC EINT0CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF10                                                    */
  INTC_EINT0CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF10_Enum;

/* =============================================  INTC EINT0CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF9                                                     */
  INTC_EINT0CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF9_Enum;

/* =============================================  INTC EINT0CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF8                                                     */
  INTC_EINT0CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF8_Enum;

/* ======================================================  EINT1CONF2  ======================================================= */
/* ============================================  INTC EINT1CONF2 CONF12 [16..19]  ============================================ */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF12                                                    */
  INTC_EINT1CONF2_CONF12_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF12_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF12_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF12_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF12_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF12_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF12_Enum;

/* ============================================  INTC EINT1CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF11                                                    */
  INTC_EINT1CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF11_Enum;

/* ============================================  INTC EINT1CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF10                                                    */
  INTC_EINT1CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF10_Enum;

/* =============================================  INTC EINT1CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF9                                                     */
  INTC_EINT1CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF9_Enum;

/* =============================================  INTC EINT1CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF8                                                     */
  INTC_EINT1CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF8_Enum;

/* ======================================================  EINT2CONF2  ======================================================= */
/* ============================================  INTC EINT2CONF2 CONF12 [16..19]  ============================================ */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF12                                                    */
  INTC_EINT2CONF2_CONF12_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF12_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF12_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF12_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF12_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF12_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF12_Enum;

/* ============================================  INTC EINT2CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF11                                                    */
  INTC_EINT2CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF11_Enum;

/* ============================================  INTC EINT2CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF10                                                    */
  INTC_EINT2CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF10_Enum;

/* =============================================  INTC EINT2CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF9                                                     */
  INTC_EINT2CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF9_Enum;

/* =============================================  INTC EINT2CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF8                                                     */
  INTC_EINT2CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF8_Enum;

/* ======================================================  EINT3CONF2  ======================================================= */
/* ============================================  INTC EINT3CONF2 CONF12 [16..19]  ============================================ */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF12                                                    */
  INTC_EINT3CONF2_CONF12_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF12_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF12_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF12_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF12_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF12_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF12_Enum;

/* ============================================  INTC EINT3CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF11                                                    */
  INTC_EINT3CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF11_Enum;

/* ============================================  INTC EINT3CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF10                                                    */
  INTC_EINT3CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF10_Enum;

/* =============================================  INTC EINT3CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF9                                                     */
  INTC_EINT3CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF9_Enum;

/* =============================================  INTC EINT3CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF8                                                     */
  INTC_EINT3CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF8_Enum;

/* ==========================================================  MSK  ========================================================== */
/* ============================================  INTC MSK IMSK31_DMAC4 [31..31]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK31_DMAC4                                                     */
  INTC_MSK_IMSK31_DMAC4_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK31_DMAC4_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK31_DMAC4_Enum;

/* ============================================  INTC MSK IMSK30_DMAC3 [30..30]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK30_DMAC3                                                     */
  INTC_MSK_IMSK30_DMAC3_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK30_DMAC3_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK30_DMAC3_Enum;

/* ============================================  INTC MSK IMSK29_DMAC2 [29..29]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK29_DMAC2                                                     */
  INTC_MSK_IMSK29_DMAC2_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK29_DMAC2_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK29_DMAC2_Enum;

/* =============================================  INTC MSK IMSK28_RTCC [28..28]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK28_RTCC                                                      */
  INTC_MSK_IMSK28_RTCC_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK28_RTCC_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK28_RTCC_Enum;

/* =============================================  INTC MSK IMSK27_NULL [27..27]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK27_NULL                                                      */
  INTC_MSK_IMSK27_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK27_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK27_NULL_Enum;

/* =============================================  INTC MSK IMSK26_NULL [26..26]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK26_NULL                                                      */
  INTC_MSK_IMSK26_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK26_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK26_NULL_Enum;

/* ============================================  INTC MSK IMSK25_LPUART [25..25]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK25_LPUART                                                    */
  INTC_MSK_IMSK25_LPUART_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK25_LPUART_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK25_LPUART_Enum;

/* ============================================  INTC MSK IMSK24_DMAC1 [24..24]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK24_DMAC1                                                     */
  INTC_MSK_IMSK24_DMAC1_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK24_DMAC1_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK24_DMAC1_Enum;

/* ============================================  INTC MSK IMSK23_DMAC0 [23..23]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK23_DMAC0                                                     */
  INTC_MSK_IMSK23_DMAC0_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK23_DMAC0_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK23_DMAC0_Enum;

/* =============================================  INTC MSK IMSK22_CMPn [22..22]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK22_CMPn                                                      */
  INTC_MSK_IMSK22_CMPn_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK22_CMPn_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK22_CMPn_Enum;

/* ===========================================  INTC MSK IMSK21_TIMER43 [21..21]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK21_TIMER43                                                   */
  INTC_MSK_IMSK21_TIMER43_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK21_TIMER43_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK21_TIMER43_Enum;

/* ============================================  INTC MSK IMSK20_UART1 [20..20]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK20_UART1                                                     */
  INTC_MSK_IMSK20_UART1_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK20_UART1_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK20_UART1_Enum;

/* ============================================  INTC MSK IMSK19_UART0 [19..19]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK19_UART0                                                     */
  INTC_MSK_IMSK19_UART0_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK19_UART0_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK19_UART0_Enum;

/* =============================================  INTC MSK IMSK18_ADC [18..18]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK18_ADC                                                       */
  INTC_MSK_IMSK18_ADC_Mask             = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK18_ADC_Unmask           = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK18_ADC_Enum;

/* =============================================  INTC MSK IMSK17_SC1 [17..17]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK17_SC1                                                       */
  INTC_MSK_IMSK17_SC1_Mask             = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK17_SC1_Unmask           = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK17_SC1_Enum;

/* =============================================  INTC MSK IMSK16_SC0 [16..16]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK16_SC0                                                       */
  INTC_MSK_IMSK16_SC0_Mask             = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK16_SC0_Unmask           = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK16_SC0_Enum;

/* ===========================================  INTC MSK IMSK15_TIMER50 [15..15]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK15_TIMER50                                                   */
  INTC_MSK_IMSK15_TIMER50_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK15_TIMER50_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK15_TIMER50_Enum;

/* =============================================  INTC MSK IMSK14_I2C1 [14..14]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK14_I2C1                                                      */
  INTC_MSK_IMSK14_I2C1_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK14_I2C1_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK14_I2C1_Enum;

/* =============================================  INTC MSK IMSK13_SPI1 [13..13]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK13_SPI1                                                      */
  INTC_MSK_IMSK13_SPI1_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK13_SPI1_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK13_SPI1_Enum;

/* =============================================  INTC MSK IMSK12_SPI0 [12..12]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK12_SPI0                                                      */
  INTC_MSK_IMSK12_SPI0_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK12_SPI0_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK12_SPI0_Enum;

/* ===========================================  INTC MSK IMSK11_USART10 [11..11]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK11_USART10                                                   */
  INTC_MSK_IMSK11_USART10_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK11_USART10_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK11_USART10_Enum;

/* =============================================  INTC MSK IMSK10_I2C0 [10..10]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK10_I2C0                                                      */
  INTC_MSK_IMSK10_I2C0_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK10_I2C0_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK10_I2C0_Enum;

/* =============================================  INTC MSK IMSK9_TIMER42 [9..9]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK9_TIMER42                                                    */
  INTC_MSK_IMSK9_TIMER42_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK9_TIMER42_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK9_TIMER42_Enum;

/* =============================================  INTC MSK IMSK8_TIMER41 [8..8]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK8_TIMER41                                                    */
  INTC_MSK_IMSK8_TIMER41_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK8_TIMER41_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK8_TIMER41_Enum;

/* =============================================  INTC MSK IMSK7_TIMER40 [7..7]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK7_TIMER40                                                    */
  INTC_MSK_IMSK7_TIMER40_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK7_TIMER40_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK7_TIMER40_Enum;

/* ==============================================  INTC MSK IMSK6_EINT3 [6..6]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK6_EINT3                                                      */
  INTC_MSK_IMSK6_EINT3_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK6_EINT3_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK6_EINT3_Enum;

/* ==============================================  INTC MSK IMSK5_EINT2 [5..5]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK5_EINT2                                                      */
  INTC_MSK_IMSK5_EINT2_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK5_EINT2_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK5_EINT2_Enum;

/* ==============================================  INTC MSK IMSK4_EINT1 [4..4]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK4_EINT1                                                      */
  INTC_MSK_IMSK4_EINT1_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK4_EINT1_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK4_EINT1_Enum;

/* ==============================================  INTC MSK IMSK3_EINT0 [3..3]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK3_EINT0                                                      */
  INTC_MSK_IMSK3_EINT0_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK3_EINT0_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK3_EINT0_Enum;

/* ===============================================  INTC MSK IMSK2_WDT [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK2_WDT                                                        */
  INTC_MSK_IMSK2_WDT_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK2_WDT_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK2_WDT_Enum;

/* ===============================================  INTC MSK IMSK1_WUT [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK1_WUT                                                        */
  INTC_MSK_IMSK1_WUT_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK1_WUT_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK1_WUT_Enum;

/* ===============================================  INTC MSK IMSK0_LVI [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK0_LVI                                                        */
  INTC_MSK_IMSK0_LVI_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK0_LVI_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK0_LVI_Enum;



/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  VENDORID  ======================================================== */
/* ========================================================  CHIPID  ========================================================= */
/* =========================================================  REVNR  ========================================================= */
/* ========================================================  PMREMAP  ======================================================== */
/* =============================================  SCUCC PMREMAP WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_PMREMAP_WTIDKY                                                      */
  SCUCC_PMREMAP_WTIDKY_Value           = 58097, /*!< Value : Key Value (0xe2f1)                                                */
} SCUCC_PMREMAP_WTIDKY_Enum;

/* =============================================  SCUCC PMREMAP nPMREM [8..15]  ============================================== */
typedef enum {                                  /*!< SCUCC_PMREMAP_nPMREM                                                      */
  SCUCC_PMREMAP_nPMREM_BootROM         = 150,   /*!< BootROM : Boot ROM is re-mapped to address 0x0. (0x96)                    */
  SCUCC_PMREMAP_nPMREM_FlashMemory     = 0,     /*!< FlashMemory : Flash Memory is re-mapped to address 0x0.                   */
} SCUCC_PMREMAP_nPMREM_Enum;

/* ==============================================  SCUCC PMREMAP PMREM [0..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_PMREMAP_PMREM                                                       */
  SCUCC_PMREMAP_PMREM_BootROM          = 105,   /*!< BootROM : Boot ROM is re-mapped to address 0x0. (0x69)                    */
  SCUCC_PMREMAP_PMREM_FlashMemory      = 0,     /*!< FlashMemory : Flash Memory is re-mapped to address 0x0.                   */
} SCUCC_PMREMAP_PMREM_Enum;

/* ========================================================  BTPSCR  ========================================================= */
/* ===============================================  SCUCC BTPSCR BFIND [5..6]  =============================================== */
typedef enum {                                  /*!< SCUCC_BTPSCR_BFIND                                                        */
  SCUCC_BTPSCR_BFIND_PORorEXTR         = 2,     /*!< PORorEXTR : Check the BOOT pin when a system reset occurs by
                                                     nRESET including POR.                                                     */
  SCUCC_BTPSCR_BFIND_POR               = 3,     /*!< POR : Check the BOOT pin when a system reset occurs only by
                                                     POR.                                                                      */
} SCUCC_BTPSCR_BFIND_Enum;

/* ==============================================  SCUCC BTPSCR BTPSTA [0..0]  =============================================== */
typedef enum {                                  /*!< SCUCC_BTPSCR_BTPSTA                                                       */
  SCUCC_BTPSCR_BTPSTA_Low              = 0,     /*!< Low : The BOOT pin is low level.                                          */
  SCUCC_BTPSCR_BTPSTA_High             = 1,     /*!< High : The BOOT pin is high level.                                        */
} SCUCC_BTPSCR_BTPSTA_Enum;

/* ========================================================  RSTSSR  ========================================================= */
/* =============================================  SCUCC RSTSSR WAKUPSTA [6..6]  ============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_WAKUPSTA                                                     */
  SCUCC_RSTSSR_WAKUPSTA_NotDetected    = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_WAKUPSTA_Detected       = 1,     /*!< Detected : WUR was detected.                                              */
} SCUCC_RSTSSR_WAKUPSTA_Enum;

/* ==============================================  SCUCC RSTSSR MONSTA [5..5]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_MONSTA                                                       */
  SCUCC_RSTSSR_MONSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_MONSTA_Detected         = 1,     /*!< Detected : CMR was detected.                                              */
} SCUCC_RSTSSR_MONSTA_Enum;

/* ===============================================  SCUCC RSTSSR SWSTA [4..4]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_SWSTA                                                        */
  SCUCC_RSTSSR_SWSTA_NotDetected       = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_SWSTA_Detected          = 1,     /*!< Detected : SWR was detected.                                              */
} SCUCC_RSTSSR_SWSTA_Enum;

/* ==============================================  SCUCC RSTSSR EXTSTA [3..3]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_EXTSTA                                                       */
  SCUCC_RSTSSR_EXTSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_EXTSTA_Detected         = 1,     /*!< Detected : EXTR was detected.                                             */
} SCUCC_RSTSSR_EXTSTA_Enum;

/* ==============================================  SCUCC RSTSSR WDTSTA [2..2]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_WDTSTA                                                       */
  SCUCC_RSTSSR_WDTSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_WDTSTA_Detected         = 1,     /*!< Detected : WDTR was detected.                                             */
} SCUCC_RSTSSR_WDTSTA_Enum;

/* ==============================================  SCUCC RSTSSR LVRSTA [1..1]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_LVRSTA                                                       */
  SCUCC_RSTSSR_LVRSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_LVRSTA_Detected         = 1,     /*!< Detected : LVR was detected.                                              */
} SCUCC_RSTSSR_LVRSTA_Enum;

/* ==============================================  SCUCC RSTSSR PORSTA [0..0]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_PORSTA                                                       */
  SCUCC_RSTSSR_PORSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_PORSTA_Detected         = 1,     /*!< Detected : POR was detected.                                              */
} SCUCC_RSTSSR_PORSTA_Enum;

/* ========================================================  NMISRCR  ======================================================== */
/* ==============================================  SCUCC NMISRCR NMICON [7..7]  ============================================== */
typedef enum {                                  /*!< SCUCC_NMISRCR_NMICON                                                      */
  SCUCC_NMISRCR_NMICON_Disable         = 0,     /*!< Disable : Disable NMI.                                                    */
  SCUCC_NMISRCR_NMICON_Enable          = 1,     /*!< Enable : Enable NMI.                                                      */
} SCUCC_NMISRCR_NMICON_Enum;

/* ==============================================  SCUCC NMISRCR MONINT [6..6]  ============================================== */
typedef enum {                                  /*!< SCUCC_NMISRCR_MONINT                                                      */
  SCUCC_NMISRCR_MONINT_NotSelect       = 0,     /*!< NotSelect : Non-select clock monitoring interrupt for NMI source.         */
  SCUCC_NMISRCR_MONINT_Select          = 1,     /*!< Select : Select clock monitoring interrupt for NMI source.                */
} SCUCC_NMISRCR_MONINT_Enum;

/* ========================================================  SWRSTR  ========================================================= */
/* =============================================  SCUCC SWRSTR WTIDKY [16..31]  ============================================== */
typedef enum {                                  /*!< SCUCC_SWRSTR_WTIDKY                                                       */
  SCUCC_SWRSTR_WTIDKY_Value            = 40627, /*!< Value : Key Value (0x9eb3)                                                */
} SCUCC_SWRSTR_WTIDKY_Enum;

/* ===============================================  SCUCC SWRSTR SWRST [0..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_SWRSTR_SWRST                                                        */
  SCUCC_SWRSTR_SWRST_Generate          = 45,    /*!< Generate : A software reset will be generated for all peripheral
                                                     and core. (0x2d)                                                          */
  SCUCC_SWRSTR_SWRST_NoEffect          = 0,     /*!< NoEffect : No effect.                                                     */
} SCUCC_SWRSTR_SWRST_Enum;

/* ========================================================  SRSTVR  ========================================================= */
/* =========================================================  WUTCR  ========================================================= */
/* ===============================================  SCUCC WUTCR WUTIEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_WUTIEN                                                        */
  SCUCC_WUTCR_WUTIEN_Disable           = 0,     /*!< Disable : Disable Wake-Up Timer interrupt.                                */
  SCUCC_WUTCR_WUTIEN_Enable            = 1,     /*!< Enable : Enable Wake-Up Timer interrupt.                                  */
} SCUCC_WUTCR_WUTIEN_Enum;

/* ===============================================  SCUCC WUTCR CNTRLD [1..1]  =============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_CNTRLD                                                        */
  SCUCC_WUTCR_CNTRLD_NoEffect          = 0,     /*!< NoEffect : No effect.                                                     */
  SCUCC_WUTCR_CNTRLD_Reload            = 1,     /*!< Reload : Reload data to counter.                                          */
} SCUCC_WUTCR_CNTRLD_Enum;

/* ==============================================  SCUCC WUTCR WUTIFLAG [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_WUTIFLAG                                                      */
  SCUCC_WUTCR_WUTIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  SCUCC_WUTCR_WUTIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} SCUCC_WUTCR_WUTIFLAG_Enum;

/* =========================================================  WUTDR  ========================================================= */
/* ========================================================  HIRCTRM  ======================================================== */
/* =============================================  SCUCC HIRCTRM WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_HIRCTRM_WTIDKY                                                      */
  SCUCC_HIRCTRM_WTIDKY_Value           = 42677, /*!< Value : Key Value (0xa6b5)                                                */
} SCUCC_HIRCTRM_WTIDKY_Enum;

/* =======================================================  WDTRCTRM  ======================================================== */
/* ============================================  SCUCC WDTRCTRM WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_WDTRCTRM_WTIDKY                                                     */
  SCUCC_WDTRCTRM_WTIDKY_Value          = 19517, /*!< Value : Key Value (0x4c3d)                                                */
} SCUCC_WDTRCTRM_WTIDKY_Enum;



/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  SCCR  ========================================================== */
/* ==============================================  SCUCG SCCR WTIDKY [16..31]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCCR_WTIDKY                                                         */
  SCUCG_SCCR_WTIDKY_Value              = 22282, /*!< Value : Key Value (0x570a)                                                */
} SCUCG_SCCR_WTIDKY_Enum;

/* ===============================================  SCUCG SCCR MCLKSEL [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCCR_MCLKSEL                                                        */
  SCUCG_SCCR_MCLKSEL_HIRC              = 0,     /*!< HIRC : High Frequency Internal RC Oscillator (32MHz), HIRC                */
  SCUCG_SCCR_MCLKSEL_XMOSC             = 1,     /*!< XMOSC : External Main Oscillator (2 - 32MHz), XMOSC                       */
  SCUCG_SCCR_MCLKSEL_XSOSC             = 2,     /*!< XSOSC : External Sub Oscillator (32.768kHz), XSOSC                        */
  SCUCG_SCCR_MCLKSEL_WDTRC             = 3,     /*!< WDTRC : Internal Watch-Dog Timer RC Oscillator (40kHz), WDTRC             */
} SCUCG_SCCR_MCLKSEL_Enum;

/* ========================================================  CLKSRCR  ======================================================== */
/* =============================================  SCUCG CLKSRCR WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCG_CLKSRCR_WTIDKY                                                      */
  SCUCG_CLKSRCR_WTIDKY_Value           = 42247, /*!< Value : Key Value (0xa507)                                                */
} SCUCG_CLKSRCR_WTIDKY_Enum;

/* ============================================  SCUCG CLKSRCR HIRCSEL [12..13]  ============================================= */
typedef enum {                                  /*!< SCUCG_CLKSRCR_HIRCSEL                                                     */
  SCUCG_CLKSRCR_HIRCSEL_HIRC1          = 0,     /*!< HIRC1 : 32MHz HIRC                                                        */
  SCUCG_CLKSRCR_HIRCSEL_HIRC2          = 1,     /*!< HIRC2 : 16MHz HIRC                                                        */
  SCUCG_CLKSRCR_HIRCSEL_HIRC4          = 2,     /*!< HIRC4 : 8MHz HIRC                                                         */
  SCUCG_CLKSRCR_HIRCSEL_HIRC8          = 3,     /*!< HIRC8 : 4MHz HIRC                                                         */
} SCUCG_CLKSRCR_HIRCSEL_Enum;

/* ==============================================  SCUCG CLKSRCR XMFRNG [8..8]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XMFRNG                                                      */
  SCUCG_CLKSRCR_XMFRNG_Xtal            = 0,     /*!< Xtal : X-tal for XMOSC, 2 to 16MHz                                        */
  SCUCG_CLKSRCR_XMFRNG_Clock           = 1,     /*!< Clock : External Clock for XMOSC, 2MHz to 32MHz                           */
} SCUCG_CLKSRCR_XMFRNG_Enum;

/* =============================================  SCUCG CLKSRCR WDTRCEN [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_WDTRCEN                                                     */
  SCUCG_CLKSRCR_WDTRCEN_Disable        = 0,     /*!< Disable : Disable WDTRC.                                                  */
  SCUCG_CLKSRCR_WDTRCEN_Enable         = 1,     /*!< Enable : Enable WDTRC.                                                    */
} SCUCG_CLKSRCR_WDTRCEN_Enum;

/* ==============================================  SCUCG CLKSRCR HIRCEN [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_HIRCEN                                                      */
  SCUCG_CLKSRCR_HIRCEN_Disable         = 0,     /*!< Disable : Disable HIRC.                                                   */
  SCUCG_CLKSRCR_HIRCEN_Enable          = 1,     /*!< Enable : Enable HIRC.                                                     */
} SCUCG_CLKSRCR_HIRCEN_Enum;

/* =============================================  SCUCG CLKSRCR XMOSCEN [1..1]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XMOSCEN                                                     */
  SCUCG_CLKSRCR_XMOSCEN_Disable        = 0,     /*!< Disable : Disable XMOSC.                                                  */
  SCUCG_CLKSRCR_XMOSCEN_Enable         = 1,     /*!< Enable : Enable XMOSC.                                                    */
} SCUCG_CLKSRCR_XMOSCEN_Enum;

/* =============================================  SCUCG CLKSRCR XSOSCEN [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XSOSCEN                                                     */
  SCUCG_CLKSRCR_XSOSCEN_Disable        = 0,     /*!< Disable : Disable XSOSC.                                                  */
  SCUCG_CLKSRCR_XSOSCEN_Enable         = 1,     /*!< Enable : Enable XSOSC.                                                    */
} SCUCG_CLKSRCR_XSOSCEN_Enum;

/* ========================================================  SCDIVR1  ======================================================== */
/* ==============================================  SCUCG SCDIVR1 WLDIV [4..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR1_WLDIV                                                       */
  SCUCG_SCDIVR1_WLDIV_MCLK64           = 0,     /*!< MCLK64 : MCLK/64                                                          */
  SCUCG_SCDIVR1_WLDIV_MCLK128          = 1,     /*!< MCLK128 : MCLK/128                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK256          = 2,     /*!< MCLK256 : MCLK/256                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK512          = 3,     /*!< MCLK512 : MCLK/512                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK1024         = 4,     /*!< MCLK1024 : MCLK/1024                                                      */
} SCUCG_SCDIVR1_WLDIV_Enum;

/* ===============================================  SCUCG SCDIVR1 HDIV [0..2]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR1_HDIV                                                        */
  SCUCG_SCDIVR1_HDIV_MCLK16            = 0,     /*!< MCLK16 : MCLK/16                                                          */
  SCUCG_SCDIVR1_HDIV_MCLK8             = 1,     /*!< MCLK8 : MCLK/8                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK4             = 2,     /*!< MCLK4 : MCLK/4                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK2             = 3,     /*!< MCLK2 : MCLK/2                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK1             = 4,     /*!< MCLK1 : MCLK/1                                                            */
} SCUCG_SCDIVR1_HDIV_Enum;

/* ========================================================  SCDIVR2  ======================================================== */
/* =============================================  SCUCG SCDIVR2 SYSTDIV [4..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR2_SYSTDIV                                                     */
  SCUCG_SCDIVR2_SYSTDIV_HCLK1          = 0,     /*!< HCLK1 : HCLK/1                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK2          = 1,     /*!< HCLK2 : HCLK/2                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK4          = 2,     /*!< HCLK4 : HCLK/4                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK8          = 3,     /*!< HCLK8 : HCLK/8                                                            */
} SCUCG_SCDIVR2_SYSTDIV_Enum;

/* ===============================================  SCUCG SCDIVR2 PDIV [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR2_PDIV                                                        */
  SCUCG_SCDIVR2_PDIV_HCLK1             = 0,     /*!< HCLK1 : HCLK/1                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK2             = 1,     /*!< HCLK2 : HCLK/2                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK4             = 2,     /*!< HCLK4 : HCLK/4                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK8             = 3,     /*!< HCLK8 : HCLK/8                                                            */
} SCUCG_SCDIVR2_PDIV_Enum;

/* ========================================================  CLKOCR  ========================================================= */
/* ==============================================  SCUCG CLKOCR CLKOEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKOEN                                                       */
  SCUCG_CLKOCR_CLKOEN_Disable          = 0,     /*!< Disable : Disable clock output.                                           */
  SCUCG_CLKOCR_CLKOEN_Enable           = 1,     /*!< Enable : Enable clock output.                                             */
} SCUCG_CLKOCR_CLKOEN_Enum;

/* ==============================================  SCUCG CLKOCR POLSEL [6..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_POLSEL                                                       */
  SCUCG_CLKOCR_POLSEL_Low              = 0,     /*!< Low : Low level during disable                                            */
  SCUCG_CLKOCR_POLSEL_High             = 1,     /*!< High : High level during disable                                          */
} SCUCG_CLKOCR_POLSEL_Enum;

/* ==============================================  SCUCG CLKOCR CLKODIV [3..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKODIV                                                      */
  SCUCG_CLKOCR_CLKODIV_SelectedClock1  = 0,     /*!< SelectedClock1 : Selected Clock/1                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock2  = 1,     /*!< SelectedClock2 : Selected Clock/2                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock4  = 2,     /*!< SelectedClock4 : Selected Clock/4                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock8  = 3,     /*!< SelectedClock8 : Selected Clock/8                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock16 = 4,     /*!< SelectedClock16 : Selected Clock/16                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock32 = 5,     /*!< SelectedClock32 : Selected Clock/32                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock64 = 6,     /*!< SelectedClock64 : Selected Clock/64                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock128 = 7,    /*!< SelectedClock128 : Selected Clock/128                                     */
} SCUCG_CLKOCR_CLKODIV_Enum;

/* ===============================================  SCUCG CLKOCR CLKOS [0..2]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKOS                                                        */
  SCUCG_CLKOCR_CLKOS_MCLK              = 0,     /*!< MCLK : Select MCLK.                                                       */
  SCUCG_CLKOCR_CLKOS_WDTRC             = 1,     /*!< WDTRC : Select WDTRC.                                                     */
  SCUCG_CLKOCR_CLKOS_HIRC              = 2,     /*!< HIRC : Select HIRC.                                                       */
  SCUCG_CLKOCR_CLKOS_HCLK              = 3,     /*!< HCLK : Select HCLK.                                                       */
  SCUCG_CLKOCR_CLKOS_PCLK              = 4,     /*!< PCLK : Select PCLK.                                                       */
} SCUCG_CLKOCR_CLKOS_Enum;

/* ========================================================  CMONCR  ========================================================= */
/* ===============================================  SCUCG CMONCR MONEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONEN                                                        */
  SCUCG_CMONCR_MONEN_Disable           = 0,     /*!< Disable : Disable clock monitoring.                                       */
  SCUCG_CMONCR_MONEN_Enable            = 1,     /*!< Enable : Enable clock monitoring.                                         */
} SCUCG_CMONCR_MONEN_Enum;

/* ===============================================  SCUCG CMONCR MACTS [5..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MACTS                                                        */
  SCUCG_CMONCR_MACTS_FlagChk           = 0,     /*!< FlagChk : No action by clock monitoring, but flags will be set/cleared
                                                     on condition                                                              */
  SCUCG_CMONCR_MACTS_RstGen            = 1,     /*!< RstGen : Reset generation by clock monitoring                             */
  SCUCG_CMONCR_MACTS_SysClkChg         = 2,     /*!< SysClkChg : The system clock will be changed to the WDTRC regardless
                                                     of MCLKSEL[1:0] bits of system clock control register (SCU_SCCR)
                                                     only when the MCLK is selected for monitoring                             */
} SCUCG_CMONCR_MACTS_Enum;

/* ==============================================  SCUCG CMONCR MONFLAG [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONFLAG                                                      */
  SCUCG_CMONCR_MONFLAG_NotReady        = 0,     /*!< NotReady : The clock to be monitored is not ready                         */
  SCUCG_CMONCR_MONFLAG_Ready           = 1,     /*!< Ready : The clock to be monitored is ready                                */
} SCUCG_CMONCR_MONFLAG_Enum;

/* ==============================================  SCUCG CMONCR NMINTFG [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_NMINTFG                                                      */
  SCUCG_CMONCR_NMINTFG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  SCUCG_CMONCR_NMINTFG_Request         = 1,     /*!< Request : Request occurred.                                               */
} SCUCG_CMONCR_NMINTFG_Enum;

/* ===============================================  SCUCG CMONCR MONCS [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONCS                                                        */
  SCUCG_CMONCR_MONCS_MCLK              = 0,     /*!< MCLK : Select MCLK.                                                       */
  SCUCG_CMONCR_MONCS_HIRC              = 1,     /*!< HIRC : Select HIRC.                                                       */
  SCUCG_CMONCR_MONCS_XMOSC             = 2,     /*!< XMOSC : Select XMOSC.                                                     */
  SCUCG_CMONCR_MONCS_XSOSC             = 3,     /*!< XSOSC : Select XSOSC.                                                     */
} SCUCG_CMONCR_MONCS_Enum;

/* =======================================================  PPCLKEN1  ======================================================== */
/* ============================================  SCUCG PPCLKEN1 T50CLKE [30..30]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T50CLKE                                                    */
  SCUCG_PPCLKEN1_T50CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T50CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T50CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T43CLKE [25..25]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T43CLKE                                                    */
  SCUCG_PPCLKEN1_T43CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T43CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T43CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T42CLKE [24..24]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T42CLKE                                                    */
  SCUCG_PPCLKEN1_T42CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T42CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T42CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T41CLKE [23..23]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T41CLKE                                                    */
  SCUCG_PPCLKEN1_T41CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T41CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T41CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T40CLKE [22..22]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T40CLKE                                                    */
  SCUCG_PPCLKEN1_T40CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T40CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T40CLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PFCLKE [5..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PFCLKE                                                     */
  SCUCG_PPCLKEN1_PFCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PFCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PFCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PECLKE [4..4]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PECLKE                                                     */
  SCUCG_PPCLKEN1_PECLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PECLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PECLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PDCLKE [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PDCLKE                                                     */
  SCUCG_PPCLKEN1_PDCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PDCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PDCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PCCLKE [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PCCLKE                                                     */
  SCUCG_PPCLKEN1_PCCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PCCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PCCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PBCLKE [1..1]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PBCLKE                                                     */
  SCUCG_PPCLKEN1_PBCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PBCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PBCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PACLKE [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PACLKE                                                     */
  SCUCG_PPCLKEN1_PACLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PACLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PACLKE_Enum;

/* =======================================================  PPCLKEN2  ======================================================== */
/* ============================================  SCUCG PPCLKEN2 DMACLKE [31..31]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_DMACLKE                                                    */
  SCUCG_PPCLKEN2_DMACLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_DMACLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_DMACLKE_Enum;

/* ===========================================  SCUCG PPCLKEN2 CMP1CLKE [28..28]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_CMP1CLKE                                                   */
  SCUCG_PPCLKEN2_CMP1CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_CMP1CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_CMP1CLKE_Enum;

/* ===========================================  SCUCG PPCLKEN2 CMP0CLKE [27..27]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_CMP0CLKE                                                   */
  SCUCG_PPCLKEN2_CMP0CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_CMP0CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_CMP0CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 SC1CLKE [25..25]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_SC1CLKE                                                    */
  SCUCG_PPCLKEN2_SC1CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_SC1CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_SC1CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 SC0CLKE [24..24]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_SC0CLKE                                                    */
  SCUCG_PPCLKEN2_SC0CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_SC0CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_SC0CLKE_Enum;

/* ===========================================  SCUCG PPCLKEN2 SPI1CLKE [21..21]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_SPI1CLKE                                                   */
  SCUCG_PPCLKEN2_SPI1CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_SPI1CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_SPI1CLKE_Enum;

/* ===========================================  SCUCG PPCLKEN2 SPI0CLKE [20..20]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_SPI0CLKE                                                   */
  SCUCG_PPCLKEN2_SPI0CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_SPI0CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_SPI0CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 FMCLKE [19..19]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_FMCLKE                                                     */
  SCUCG_PPCLKEN2_FMCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_FMCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_FMCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 LVICLKE [18..18]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_LVICLKE                                                    */
  SCUCG_PPCLKEN2_LVICLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_LVICLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_LVICLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 WDTCLKE [17..17]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_WDTCLKE                                                    */
  SCUCG_PPCLKEN2_WDTCLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_WDTCLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_WDTCLKE_Enum;

/* ===========================================  SCUCG PPCLKEN2 LPUTCLKE [15..15]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_LPUTCLKE                                                   */
  SCUCG_PPCLKEN2_LPUTCLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_LPUTCLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_LPUTCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 LCDCLKE [13..13]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_LCDCLKE                                                    */
  SCUCG_PPCLKEN2_LCDCLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_LCDCLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_LCDCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 CRCLKE [12..12]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_CRCLKE                                                     */
  SCUCG_PPCLKEN2_CRCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_CRCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_CRCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 RTCCLKE [11..11]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_RTCCLKE                                                    */
  SCUCG_PPCLKEN2_RTCCLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_RTCCLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_RTCCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 ADCLKE [10..10]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_ADCLKE                                                     */
  SCUCG_PPCLKEN2_ADCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_ADCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_ADCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 I2C1CLKE [7..7]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_I2C1CLKE                                                   */
  SCUCG_PPCLKEN2_I2C1CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_I2C1CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_I2C1CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 I2C0CLKE [6..6]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_I2C0CLKE                                                   */
  SCUCG_PPCLKEN2_I2C0CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_I2C0CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_I2C0CLKE_Enum;

/* =============================================  SCUCG PPCLKEN2 UT1CLKE [3..3]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UT1CLKE                                                    */
  SCUCG_PPCLKEN2_UT1CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UT1CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UT1CLKE_Enum;

/* =============================================  SCUCG PPCLKEN2 UT0CLKE [2..2]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UT0CLKE                                                    */
  SCUCG_PPCLKEN2_UT0CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UT0CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UT0CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 UST10CLKE [0..0]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UST10CLKE                                                  */
  SCUCG_PPCLKEN2_UST10CLKE_Disable     = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UST10CLKE_Enable      = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UST10CLKE_Enum;

/* ========================================================  PPCLKSR  ======================================================== */
/* =============================================  SCUCG PPCLKSR T50CLK [24..25]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKSR_T50CLK                                                      */
  SCUCG_PPCLKSR_T50CLK_PCLK            = 0,     /*!< PCLK : PCLK clock                                                         */
  SCUCG_PPCLKSR_T50CLK_WDTRC           = 1,     /*!< WDTRC : WDTRC clock                                                       */
  SCUCG_PPCLKSR_T50CLK_HIRC            = 2,     /*!< HIRC : HIRC clock                                                         */
  SCUCG_PPCLKSR_T50CLK_XSOSC           = 3,     /*!< XSOSC : XSOSC clock                                                       */
} SCUCG_PPCLKSR_T50CLK_Enum;

/* ============================================  SCUCG PPCLKSR LPUTCLK [10..11]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKSR_LPUTCLK                                                     */
  SCUCG_PPCLKSR_LPUTCLK_PCLK           = 0,     /*!< PCLK : PCLK clock                                                         */
  SCUCG_PPCLKSR_LPUTCLK_HIRC           = 1,     /*!< HIRC : HIRC clock                                                         */
  SCUCG_PPCLKSR_LPUTCLK_XSOSC          = 2,     /*!< XSOSC : XSOSC clock                                                       */
} SCUCG_PPCLKSR_LPUTCLK_Enum;

/* ==============================================  SCUCG PPCLKSR RTCCLK [8..9]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_RTCCLK                                                      */
  SCUCG_PPCLKSR_RTCCLK_LowLevel        = 0,     /*!< LowLevel : Low level (RTC stuck)                                          */
  SCUCG_PPCLKSR_RTCCLK_XSOSC           = 1,     /*!< XSOSC : XSOSC clock                                                       */
  SCUCG_PPCLKSR_RTCCLK_WDTRC           = 2,     /*!< WDTRC : WDTRC clock                                                       */
  SCUCG_PPCLKSR_RTCCLK_DividedMCLK     = 3,     /*!< DividedMCLK : A clock of the MCLK which is divided by divider
                                                     2                                                                         */
} SCUCG_PPCLKSR_RTCCLK_Enum;

/* ==============================================  SCUCG PPCLKSR LCDCLK [6..7]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_LCDCLK                                                      */
  SCUCG_PPCLKSR_LCDCLK_DividedMCLK     = 0,     /*!< DividedMCLK : A clock of the MCLK which is divided by divider
                                                     2                                                                         */
  SCUCG_PPCLKSR_LCDCLK_XSOSC           = 1,     /*!< XSOSC : XSOSC clock                                                       */
  SCUCG_PPCLKSR_LCDCLK_WDTRC           = 2,     /*!< WDTRC : WDTRC clock                                                       */
} SCUCG_PPCLKSR_LCDCLK_Enum;

/* ==============================================  SCUCG PPCLKSR WDTCLK [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_WDTCLK                                                      */
  SCUCG_PPCLKSR_WDTCLK_WDTRC           = 0,     /*!< WDTRC : WDTRC clock                                                       */
  SCUCG_PPCLKSR_WDTCLK_PCLK            = 1,     /*!< PCLK : PCLK clock                                                         */
} SCUCG_PPCLKSR_WDTCLK_Enum;

/* ========================================================  PPRST1  ========================================================= */
/* ========================================================  PPRST2  ========================================================= */
/* =========================================================  XSOSC  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  LVICR  ========================================================= */
/* ===============================================  SCULV LVICR LVIEN [7..7]  ================================================ */
typedef enum {                                  /*!< SCULV_LVICR_LVIEN                                                         */
  SCULV_LVICR_LVIEN_Disable            = 0,     /*!< Disable : Disable low voltage indicator.                                  */
  SCULV_LVICR_LVIEN_Enable             = 1,     /*!< Enable : Enable low voltage indicator.                                    */
} SCULV_LVICR_LVIEN_Enum;

/* ==============================================  SCULV LVICR LVINTEN [5..5]  =============================================== */
typedef enum {                                  /*!< SCULV_LVICR_LVINTEN                                                       */
  SCULV_LVICR_LVINTEN_Disable          = 0,     /*!< Disable : Disable low voltage indicator interrupt.                        */
  SCULV_LVICR_LVINTEN_Enable           = 1,     /*!< Enable : Enable low voltage indicator interrupt.                          */
} SCULV_LVICR_LVINTEN_Enum;

/* ==============================================  SCULV LVICR LVIFLAG [4..4]  =============================================== */
typedef enum {                                  /*!< SCULV_LVICR_LVIFLAG                                                       */
  SCULV_LVICR_LVIFLAG_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  SCULV_LVICR_LVIFLAG_Request          = 1,     /*!< Request : Request occurred.                                               */
} SCULV_LVICR_LVIFLAG_Enum;

/* ===============================================  SCULV LVICR LVIVS [0..2]  ================================================ */
typedef enum {                                  /*!< SCULV_LVICR_LVIVS                                                         */
  SCULV_LVICR_LVIVS_1p75V0             = 0,     /*!< 1p75V0 : 1.75V                                                            */
  SCULV_LVICR_LVIVS_1p75V1             = 1,     /*!< 1p75V1 : 1.75V                                                            */
  SCULV_LVICR_LVIVS_1p90V              = 2,     /*!< 1p90V : 1.90V                                                             */
  SCULV_LVICR_LVIVS_2p05V              = 3,     /*!< 2p05V : 2.05V                                                             */
  SCULV_LVICR_LVIVS_2p20V              = 4,     /*!< 2p20V : 2.20V                                                             */
  SCULV_LVICR_LVIVS_2p35V              = 5,     /*!< 2p35V : 2.35V                                                             */
  SCULV_LVICR_LVIVS_2p50V              = 6,     /*!< 2p50V : 2.50V                                                             */
  SCULV_LVICR_LVIVS_2p65V              = 7,     /*!< 2p65V : 2.65V                                                             */
} SCULV_LVICR_LVIVS_Enum;

/* =========================================================  LVRCR  ========================================================= */
/* ===============================================  SCULV LVRCR LVREN [0..7]  ================================================ */
typedef enum {                                  /*!< SCULV_LVRCR_LVREN                                                         */
  SCULV_LVRCR_LVREN_Disable            = 85,    /*!< Disable : Disable low voltage reset. (0x55)                               */
  SCULV_LVRCR_LVREN_Enable             = 0,     /*!< Enable : Enable low voltage reset.                                        */
} SCULV_LVRCR_LVREN_Enum;



/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  Pn MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE12                                                             */
  Pn_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE12_Enum;

/* ================================================  Pn MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE11                                                             */
  Pn_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE11_Enum;

/* ================================================  Pn MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE10                                                             */
  Pn_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE10_Enum;

/* =================================================  Pn MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE9                                                              */
  Pn_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE9_Enum;

/* =================================================  Pn MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE8                                                              */
  Pn_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE8_Enum;

/* =================================================  Pn MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE7                                                              */
  Pn_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE7_Enum;

/* =================================================  Pn MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE6                                                              */
  Pn_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE6_Enum;

/* =================================================  Pn MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE5                                                              */
  Pn_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE5_Enum;

/* ==================================================  Pn MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE4                                                              */
  Pn_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE4_Enum;

/* ==================================================  Pn MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE3                                                              */
  Pn_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE3_Enum;

/* ==================================================  Pn MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE2                                                              */
  Pn_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE2_Enum;

/* ==================================================  Pn MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE1                                                              */
  Pn_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE1_Enum;

/* ==================================================  Pn MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE0                                                              */
  Pn_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  Pn TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP12                                                              */
  Pn_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP12_Enum;

/* =================================================  Pn TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP11                                                              */
  Pn_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP11_Enum;

/* =================================================  Pn TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP10                                                              */
  Pn_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP10_Enum;

/* ==================================================  Pn TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP9                                                               */
  Pn_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP9_Enum;

/* ==================================================  Pn TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP8                                                               */
  Pn_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP8_Enum;

/* ==================================================  Pn TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP7                                                               */
  Pn_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP7_Enum;

/* ==================================================  Pn TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP6                                                               */
  Pn_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP6_Enum;

/* ==================================================  Pn TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP4                                                               */
  Pn_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP4_Enum;

/* ==================================================  Pn TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP3                                                               */
  Pn_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP3_Enum;

/* ==================================================  Pn TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP2                                                               */
  Pn_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP2_Enum;

/* ==================================================  Pn TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP1                                                               */
  Pn_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP1_Enum;

/* ==================================================  Pn TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP0                                                               */
  Pn_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  Pn AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR7                                                            */
  Pn_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR7_Enum;

/* ================================================  Pn AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR6                                                            */
  Pn_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR6_Enum;

/* ================================================  Pn AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR5                                                            */
  Pn_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR5_Enum;

/* ================================================  Pn AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR4                                                            */
  Pn_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR4_Enum;

/* ================================================  Pn AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR3                                                            */
  Pn_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR3_Enum;

/* ================================================  Pn AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR2                                                            */
  Pn_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR2_Enum;

/* =================================================  Pn AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR1                                                            */
  Pn_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR1_Enum;

/* =================================================  Pn AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR0                                                            */
  Pn_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  Pn AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR12                                                           */
  Pn_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR2_AFSR12_Enum;

/* ===============================================  Pn AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR11                                                           */
  Pn_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR2_AFSR11_Enum;

/* ================================================  Pn AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR10                                                           */
  Pn_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR2_AFSR10_Enum;

/* =================================================  Pn AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR2_AFSR9                                                            */
  Pn_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR2_AFSR9_Enum;

/* =================================================  Pn AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR2_AFSR8                                                            */
  Pn_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  Pn_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  Pn_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  Pn_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} Pn_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  Pn PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD12                                                            */
  Pn_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD12_Enum;

/* ================================================  Pn PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD11                                                            */
  Pn_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD11_Enum;

/* ================================================  Pn PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD10                                                            */
  Pn_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD10_Enum;

/* ================================================  Pn PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD9                                                             */
  Pn_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD9_Enum;

/* ================================================  Pn PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD8                                                             */
  Pn_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD8_Enum;

/* ================================================  Pn PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD7                                                             */
  Pn_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD7_Enum;

/* ================================================  Pn PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD6                                                             */
  Pn_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD6_Enum;

/* ================================================  Pn PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD5                                                             */
  Pn_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD5_Enum;

/* =================================================  Pn PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD4                                                             */
  Pn_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD4_Enum;

/* =================================================  Pn PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD3                                                             */
  Pn_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD3_Enum;

/* =================================================  Pn PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD2                                                             */
  Pn_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD2_Enum;

/* =================================================  Pn PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD1                                                             */
  Pn_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD1_Enum;

/* =================================================  Pn PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD0                                                             */
  Pn_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  Pn BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR12                                                              */
  Pn_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR12_Enum;

/* =================================================  Pn BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR11                                                              */
  Pn_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR11_Enum;

/* =================================================  Pn BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR10                                                              */
  Pn_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR10_Enum;

/* ==================================================  Pn BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR9                                                               */
  Pn_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR9_Enum;

/* ==================================================  Pn BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR8                                                               */
  Pn_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR8_Enum;

/* ==================================================  Pn BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR7                                                               */
  Pn_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR7_Enum;

/* ==================================================  Pn BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR6                                                               */
  Pn_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR6_Enum;

/* ==================================================  Pn BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR5                                                               */
  Pn_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR5_Enum;

/* ==================================================  Pn BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR4                                                               */
  Pn_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR4_Enum;

/* ==================================================  Pn BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR3                                                               */
  Pn_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR3_Enum;

/* ==================================================  Pn BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR2                                                               */
  Pn_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR2_Enum;

/* ==================================================  Pn BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR1                                                               */
  Pn_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR1_Enum;

/* ==================================================  Pn BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR0                                                               */
  Pn_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  Pn BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR12                                                              */
  Pn_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR12_Enum;

/* =================================================  Pn BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR11                                                              */
  Pn_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR11_Enum;

/* =================================================  Pn BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR10                                                              */
  Pn_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR10_Enum;

/* ==================================================  Pn BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR9                                                               */
  Pn_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR9_Enum;

/* ==================================================  Pn BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR8                                                               */
  Pn_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR8_Enum;

/* ==================================================  Pn BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR7                                                               */
  Pn_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR7_Enum;

/* ==================================================  Pn BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR6                                                               */
  Pn_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR6_Enum;

/* ==================================================  Pn BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR5                                                               */
  Pn_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR5_Enum;

/* ==================================================  Pn BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR4                                                               */
  Pn_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR4_Enum;

/* ==================================================  Pn BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR3                                                               */
  Pn_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR3_Enum;

/* ==================================================  Pn BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR2                                                               */
  Pn_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR2_Enum;

/* ==================================================  Pn BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR1                                                               */
  Pn_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR1_Enum;

/* ==================================================  Pn BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR0                                                               */
  Pn_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  Pn OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK12                                                      */
  Pn_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK11                                                      */
  Pn_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK10                                                      */
  Pn_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK9                                                       */
  Pn_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK8                                                       */
  Pn_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK7                                                       */
  Pn_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK5                                                       */
  Pn_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK4                                                       */
  Pn_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK3                                                       */
  Pn_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK2                                                       */
  Pn_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK1                                                       */
  Pn_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK0                                                       */
  Pn_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  Pn DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< Pn_DBCR_DBCLK                                                             */
  Pn_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  Pn_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  Pn_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  Pn_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  Pn_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  Pn_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} Pn_DBCR_DBCLK_Enum;

/* ================================================  Pn DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< Pn_DBCR_DBEN12                                                            */
  Pn_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN12_Enum;

/* ================================================  Pn DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< Pn_DBCR_DBEN11                                                            */
  Pn_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN11_Enum;

/* ================================================  Pn DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< Pn_DBCR_DBEN10                                                            */
  Pn_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN10_Enum;

/* =================================================  Pn DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN9                                                             */
  Pn_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN9_Enum;

/* =================================================  Pn DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN8                                                             */
  Pn_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN8_Enum;

/* =================================================  Pn DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN7                                                             */
  Pn_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN7_Enum;

/* =================================================  Pn DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN6                                                             */
  Pn_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN6_Enum;

/* =================================================  Pn DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN5                                                             */
  Pn_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN5_Enum;

/* =================================================  Pn DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN4                                                             */
  Pn_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN4_Enum;

/* =================================================  Pn DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN3                                                             */
  Pn_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN3_Enum;

/* =================================================  Pn DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN2                                                             */
  Pn_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN2_Enum;

/* =================================================  Pn DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN1                                                             */
  Pn_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN1_Enum;

/* =================================================  Pn DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN0                                                             */
  Pn_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN0_Enum;



/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PA MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE12                                                             */
  PA_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE12_Enum;

/* ================================================  PA MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE11                                                             */
  PA_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE11_Enum;

/* ================================================  PA MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE10                                                             */
  PA_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE10_Enum;

/* =================================================  PA MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE9                                                              */
  PA_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE9_Enum;

/* =================================================  PA MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE8                                                              */
  PA_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE8_Enum;

/* =================================================  PA MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE7                                                              */
  PA_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE7_Enum;

/* =================================================  PA MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE6                                                              */
  PA_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE6_Enum;

/* =================================================  PA MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE5                                                              */
  PA_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE5_Enum;

/* ==================================================  PA MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE4                                                              */
  PA_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE4_Enum;

/* ==================================================  PA MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE3                                                              */
  PA_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE3_Enum;

/* ==================================================  PA MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE2                                                              */
  PA_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE2_Enum;

/* ==================================================  PA MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE1                                                              */
  PA_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE1_Enum;

/* ==================================================  PA MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE0                                                              */
  PA_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PA TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP12                                                              */
  PA_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP12_Enum;

/* =================================================  PA TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP11                                                              */
  PA_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP11_Enum;

/* =================================================  PA TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP10                                                              */
  PA_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP10_Enum;

/* ==================================================  PA TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP9                                                               */
  PA_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP9_Enum;

/* ==================================================  PA TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP8                                                               */
  PA_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP8_Enum;

/* ==================================================  PA TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP7                                                               */
  PA_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP7_Enum;

/* ==================================================  PA TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP6                                                               */
  PA_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP6_Enum;

/* ==================================================  PA TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP4                                                               */
  PA_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP4_Enum;

/* ==================================================  PA TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP3                                                               */
  PA_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP3_Enum;

/* ==================================================  PA TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP2                                                               */
  PA_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP2_Enum;

/* ==================================================  PA TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP1                                                               */
  PA_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP1_Enum;

/* ==================================================  PA TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP0                                                               */
  PA_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PA AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR7                                                            */
  PA_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR7_Enum;

/* ================================================  PA AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR6                                                            */
  PA_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR6_Enum;

/* ================================================  PA AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR5                                                            */
  PA_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR5_Enum;

/* ================================================  PA AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR4                                                            */
  PA_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR4_Enum;

/* ================================================  PA AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR3                                                            */
  PA_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR3_Enum;

/* ================================================  PA AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR2                                                            */
  PA_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR2_Enum;

/* =================================================  PA AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR1                                                            */
  PA_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR1_Enum;

/* =================================================  PA AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR0                                                            */
  PA_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PA AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR12                                                           */
  PA_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR2_AFSR12_Enum;

/* ===============================================  PA AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR11                                                           */
  PA_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR2_AFSR11_Enum;

/* ================================================  PA AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR10                                                           */
  PA_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR2_AFSR10_Enum;

/* =================================================  PA AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PA_AFSR2_AFSR9                                                            */
  PA_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR2_AFSR9_Enum;

/* =================================================  PA AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PA_AFSR2_AFSR8                                                            */
  PA_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PA_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PA_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PA_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PA_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PA PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD12                                                            */
  PA_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD12_Enum;

/* ================================================  PA PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD11                                                            */
  PA_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD11_Enum;

/* ================================================  PA PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD10                                                            */
  PA_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD10_Enum;

/* ================================================  PA PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD9                                                             */
  PA_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD9_Enum;

/* ================================================  PA PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD8                                                             */
  PA_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD8_Enum;

/* ================================================  PA PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD7                                                             */
  PA_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD7_Enum;

/* ================================================  PA PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD6                                                             */
  PA_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD6_Enum;

/* ================================================  PA PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD5                                                             */
  PA_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD5_Enum;

/* =================================================  PA PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD4                                                             */
  PA_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD4_Enum;

/* =================================================  PA PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD3                                                             */
  PA_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD3_Enum;

/* =================================================  PA PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD2                                                             */
  PA_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD2_Enum;

/* =================================================  PA PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD1                                                             */
  PA_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD1_Enum;

/* =================================================  PA PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD0                                                             */
  PA_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PA BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR12                                                              */
  PA_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR12_Enum;

/* =================================================  PA BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR11                                                              */
  PA_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR11_Enum;

/* =================================================  PA BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR10                                                              */
  PA_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR10_Enum;

/* ==================================================  PA BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR9                                                               */
  PA_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR9_Enum;

/* ==================================================  PA BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR8                                                               */
  PA_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR8_Enum;

/* ==================================================  PA BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR7                                                               */
  PA_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR7_Enum;

/* ==================================================  PA BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR6                                                               */
  PA_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR6_Enum;

/* ==================================================  PA BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR5                                                               */
  PA_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR5_Enum;

/* ==================================================  PA BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR4                                                               */
  PA_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR4_Enum;

/* ==================================================  PA BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR3                                                               */
  PA_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR3_Enum;

/* ==================================================  PA BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR2                                                               */
  PA_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR2_Enum;

/* ==================================================  PA BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR1                                                               */
  PA_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR1_Enum;

/* ==================================================  PA BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR0                                                               */
  PA_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PA BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR12                                                              */
  PA_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR12_Enum;

/* =================================================  PA BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR11                                                              */
  PA_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR11_Enum;

/* =================================================  PA BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR10                                                              */
  PA_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR10_Enum;

/* ==================================================  PA BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR9                                                               */
  PA_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR9_Enum;

/* ==================================================  PA BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR8                                                               */
  PA_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR8_Enum;

/* ==================================================  PA BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR7                                                               */
  PA_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR7_Enum;

/* ==================================================  PA BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR6                                                               */
  PA_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR6_Enum;

/* ==================================================  PA BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR5                                                               */
  PA_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR5_Enum;

/* ==================================================  PA BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR4                                                               */
  PA_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR4_Enum;

/* ==================================================  PA BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR3                                                               */
  PA_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR3_Enum;

/* ==================================================  PA BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR2                                                               */
  PA_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR2_Enum;

/* ==================================================  PA BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR1                                                               */
  PA_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR1_Enum;

/* ==================================================  PA BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR0                                                               */
  PA_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PA OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK12                                                      */
  PA_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PA OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK11                                                      */
  PA_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PA OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK10                                                      */
  PA_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK9                                                       */
  PA_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK8                                                       */
  PA_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK7                                                       */
  PA_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK5                                                       */
  PA_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK4                                                       */
  PA_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK3                                                       */
  PA_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK2                                                       */
  PA_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK1                                                       */
  PA_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK0                                                       */
  PA_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PA DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PA_DBCR_DBCLK                                                             */
  PA_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PA_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PA_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PA_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PA_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PA_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PA_DBCR_DBCLK_Enum;

/* ================================================  PA DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PA_DBCR_DBEN12                                                            */
  PA_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN12_Enum;

/* ================================================  PA DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PA_DBCR_DBEN11                                                            */
  PA_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN11_Enum;

/* ================================================  PA DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PA_DBCR_DBEN10                                                            */
  PA_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN10_Enum;

/* =================================================  PA DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN9                                                             */
  PA_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN9_Enum;

/* =================================================  PA DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN8                                                             */
  PA_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN8_Enum;

/* =================================================  PA DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN7                                                             */
  PA_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN7_Enum;

/* =================================================  PA DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN6                                                             */
  PA_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN6_Enum;

/* =================================================  PA DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN5                                                             */
  PA_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN5_Enum;

/* =================================================  PA DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN4                                                             */
  PA_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN4_Enum;

/* =================================================  PA DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN3                                                             */
  PA_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN3_Enum;

/* =================================================  PA DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN2                                                             */
  PA_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN2_Enum;

/* =================================================  PA DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN1                                                             */
  PA_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN1_Enum;

/* =================================================  PA DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN0                                                             */
  PA_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN0_Enum;

/* ========================================================  PA_MOD  ========================================================= */
/* ========================================================  PA_TYP  ========================================================= */
/* =======================================================  PA_AFSR1  ======================================================== */
/* =======================================================  PA_AFSR2  ======================================================== */
/* ========================================================  PA_PUPD  ======================================================== */
/* ========================================================  PA_INDR  ======================================================== */
/* =======================================================  PA_OUTDR  ======================================================== */
/* ========================================================  PA_BSR  ========================================================= */
/* ========================================================  PA_BCR  ========================================================= */
/* ======================================================  PA_OUTDMSK  ======================================================= */
/* ========================================================  PA_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PB MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE12                                                             */
  PB_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE12_Enum;

/* ================================================  PB MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE11                                                             */
  PB_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE11_Enum;

/* ================================================  PB MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE10                                                             */
  PB_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE10_Enum;

/* =================================================  PB MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE9                                                              */
  PB_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE9_Enum;

/* =================================================  PB MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE8                                                              */
  PB_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE8_Enum;

/* =================================================  PB MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE7                                                              */
  PB_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE7_Enum;

/* =================================================  PB MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE6                                                              */
  PB_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE6_Enum;

/* =================================================  PB MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE5                                                              */
  PB_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE5_Enum;

/* ==================================================  PB MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE4                                                              */
  PB_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE4_Enum;

/* ==================================================  PB MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE3                                                              */
  PB_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE3_Enum;

/* ==================================================  PB MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE2                                                              */
  PB_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE2_Enum;

/* ==================================================  PB MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE1                                                              */
  PB_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE1_Enum;

/* ==================================================  PB MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE0                                                              */
  PB_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PB TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP12                                                              */
  PB_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP12_Enum;

/* =================================================  PB TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP11                                                              */
  PB_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP11_Enum;

/* =================================================  PB TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP10                                                              */
  PB_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP10_Enum;

/* ==================================================  PB TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP9                                                               */
  PB_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP9_Enum;

/* ==================================================  PB TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP8                                                               */
  PB_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP8_Enum;

/* ==================================================  PB TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP7                                                               */
  PB_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP7_Enum;

/* ==================================================  PB TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP6                                                               */
  PB_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP6_Enum;

/* ==================================================  PB TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP4                                                               */
  PB_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP4_Enum;

/* ==================================================  PB TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP3                                                               */
  PB_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP3_Enum;

/* ==================================================  PB TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP2                                                               */
  PB_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP2_Enum;

/* ==================================================  PB TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP1                                                               */
  PB_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP1_Enum;

/* ==================================================  PB TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP0                                                               */
  PB_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PB AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR7                                                            */
  PB_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR7_Enum;

/* ================================================  PB AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR6                                                            */
  PB_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR6_Enum;

/* ================================================  PB AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR5                                                            */
  PB_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR5_Enum;

/* ================================================  PB AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR4                                                            */
  PB_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR4_Enum;

/* ================================================  PB AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR3                                                            */
  PB_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR3_Enum;

/* ================================================  PB AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR2                                                            */
  PB_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR2_Enum;

/* =================================================  PB AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR1                                                            */
  PB_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR1_Enum;

/* =================================================  PB AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR0                                                            */
  PB_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PB AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR12                                                           */
  PB_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR2_AFSR12_Enum;

/* ===============================================  PB AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR11                                                           */
  PB_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR2_AFSR11_Enum;

/* ================================================  PB AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR10                                                           */
  PB_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR2_AFSR10_Enum;

/* =================================================  PB AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PB_AFSR2_AFSR9                                                            */
  PB_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR2_AFSR9_Enum;

/* =================================================  PB AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PB_AFSR2_AFSR8                                                            */
  PB_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PB_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PB_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PB_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PB_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PB PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD12                                                            */
  PB_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD12_Enum;

/* ================================================  PB PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD11                                                            */
  PB_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD11_Enum;

/* ================================================  PB PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD10                                                            */
  PB_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD10_Enum;

/* ================================================  PB PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD9                                                             */
  PB_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD9_Enum;

/* ================================================  PB PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD8                                                             */
  PB_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD8_Enum;

/* ================================================  PB PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD7                                                             */
  PB_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD7_Enum;

/* ================================================  PB PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD6                                                             */
  PB_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD6_Enum;

/* ================================================  PB PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD5                                                             */
  PB_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD5_Enum;

/* =================================================  PB PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD4                                                             */
  PB_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD4_Enum;

/* =================================================  PB PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD3                                                             */
  PB_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD3_Enum;

/* =================================================  PB PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD2                                                             */
  PB_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD2_Enum;

/* =================================================  PB PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD1                                                             */
  PB_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD1_Enum;

/* =================================================  PB PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD0                                                             */
  PB_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PB BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR12                                                              */
  PB_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR12_Enum;

/* =================================================  PB BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR11                                                              */
  PB_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR11_Enum;

/* =================================================  PB BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR10                                                              */
  PB_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR10_Enum;

/* ==================================================  PB BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR9                                                               */
  PB_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR9_Enum;

/* ==================================================  PB BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR8                                                               */
  PB_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR8_Enum;

/* ==================================================  PB BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR7                                                               */
  PB_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR7_Enum;

/* ==================================================  PB BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR6                                                               */
  PB_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR6_Enum;

/* ==================================================  PB BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR5                                                               */
  PB_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR5_Enum;

/* ==================================================  PB BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR4                                                               */
  PB_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR4_Enum;

/* ==================================================  PB BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR3                                                               */
  PB_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR3_Enum;

/* ==================================================  PB BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR2                                                               */
  PB_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR2_Enum;

/* ==================================================  PB BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR1                                                               */
  PB_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR1_Enum;

/* ==================================================  PB BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR0                                                               */
  PB_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PB BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR12                                                              */
  PB_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR12_Enum;

/* =================================================  PB BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR11                                                              */
  PB_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR11_Enum;

/* =================================================  PB BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR10                                                              */
  PB_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR10_Enum;

/* ==================================================  PB BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR9                                                               */
  PB_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR9_Enum;

/* ==================================================  PB BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR8                                                               */
  PB_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR8_Enum;

/* ==================================================  PB BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR7                                                               */
  PB_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR7_Enum;

/* ==================================================  PB BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR6                                                               */
  PB_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR6_Enum;

/* ==================================================  PB BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR5                                                               */
  PB_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR5_Enum;

/* ==================================================  PB BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR4                                                               */
  PB_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR4_Enum;

/* ==================================================  PB BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR3                                                               */
  PB_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR3_Enum;

/* ==================================================  PB BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR2                                                               */
  PB_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR2_Enum;

/* ==================================================  PB BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR1                                                               */
  PB_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR1_Enum;

/* ==================================================  PB BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR0                                                               */
  PB_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PB OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK12                                                      */
  PB_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PB OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK11                                                      */
  PB_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PB OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK10                                                      */
  PB_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK9                                                       */
  PB_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK8                                                       */
  PB_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK7                                                       */
  PB_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK5                                                       */
  PB_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK4                                                       */
  PB_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK3                                                       */
  PB_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK2                                                       */
  PB_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK1                                                       */
  PB_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK0                                                       */
  PB_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PB DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PB_DBCR_DBCLK                                                             */
  PB_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PB_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PB_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PB_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PB_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PB_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PB_DBCR_DBCLK_Enum;

/* ================================================  PB DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PB_DBCR_DBEN12                                                            */
  PB_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN12_Enum;

/* ================================================  PB DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PB_DBCR_DBEN11                                                            */
  PB_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN11_Enum;

/* ================================================  PB DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PB_DBCR_DBEN10                                                            */
  PB_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN10_Enum;

/* =================================================  PB DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN9                                                             */
  PB_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN9_Enum;

/* =================================================  PB DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN8                                                             */
  PB_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN8_Enum;

/* =================================================  PB DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN7                                                             */
  PB_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN7_Enum;

/* =================================================  PB DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN6                                                             */
  PB_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN6_Enum;

/* =================================================  PB DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN5                                                             */
  PB_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN5_Enum;

/* =================================================  PB DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN4                                                             */
  PB_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN4_Enum;

/* =================================================  PB DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN3                                                             */
  PB_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN3_Enum;

/* =================================================  PB DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN2                                                             */
  PB_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN2_Enum;

/* =================================================  PB DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN1                                                             */
  PB_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN1_Enum;

/* =================================================  PB DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN0                                                             */
  PB_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN0_Enum;

/* ========================================================  PB_MOD  ========================================================= */
/* ========================================================  PB_TYP  ========================================================= */
/* =======================================================  PB_AFSR1  ======================================================== */
/* =======================================================  PB_AFSR2  ======================================================== */
/* ========================================================  PB_PUPD  ======================================================== */
/* ========================================================  PB_INDR  ======================================================== */
/* =======================================================  PB_OUTDR  ======================================================== */
/* ========================================================  PB_BSR  ========================================================= */
/* ========================================================  PB_BCR  ========================================================= */
/* ======================================================  PB_OUTDMSK  ======================================================= */
/* ========================================================  PB_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PC MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE12                                                             */
  PC_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE12_Enum;

/* ================================================  PC MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE11                                                             */
  PC_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE11_Enum;

/* ================================================  PC MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE10                                                             */
  PC_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE10_Enum;

/* =================================================  PC MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE9                                                              */
  PC_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE9_Enum;

/* =================================================  PC MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE8                                                              */
  PC_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE8_Enum;

/* =================================================  PC MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE7                                                              */
  PC_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE7_Enum;

/* =================================================  PC MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE6                                                              */
  PC_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE6_Enum;

/* =================================================  PC MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE5                                                              */
  PC_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE5_Enum;

/* ==================================================  PC MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE4                                                              */
  PC_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE4_Enum;

/* ==================================================  PC MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE3                                                              */
  PC_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE3_Enum;

/* ==================================================  PC MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE2                                                              */
  PC_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE2_Enum;

/* ==================================================  PC MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE1                                                              */
  PC_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE1_Enum;

/* ==================================================  PC MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE0                                                              */
  PC_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PC TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP12                                                              */
  PC_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP12_Enum;

/* =================================================  PC TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP11                                                              */
  PC_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP11_Enum;

/* =================================================  PC TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP10                                                              */
  PC_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP10_Enum;

/* ==================================================  PC TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP9                                                               */
  PC_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP9_Enum;

/* ==================================================  PC TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP8                                                               */
  PC_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP8_Enum;

/* ==================================================  PC TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP7                                                               */
  PC_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP7_Enum;

/* ==================================================  PC TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP6                                                               */
  PC_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP6_Enum;

/* ==================================================  PC TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP4                                                               */
  PC_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP4_Enum;

/* ==================================================  PC TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP3                                                               */
  PC_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP3_Enum;

/* ==================================================  PC TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP2                                                               */
  PC_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP2_Enum;

/* ==================================================  PC TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP1                                                               */
  PC_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP1_Enum;

/* ==================================================  PC TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP0                                                               */
  PC_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PC AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR7                                                            */
  PC_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR7_Enum;

/* ================================================  PC AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR6                                                            */
  PC_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR6_Enum;

/* ================================================  PC AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR5                                                            */
  PC_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR5_Enum;

/* ================================================  PC AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR4                                                            */
  PC_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR4_Enum;

/* ================================================  PC AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR3                                                            */
  PC_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR3_Enum;

/* ================================================  PC AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR2                                                            */
  PC_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR2_Enum;

/* =================================================  PC AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR1                                                            */
  PC_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR1_Enum;

/* =================================================  PC AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR0                                                            */
  PC_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PC AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR12                                                           */
  PC_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR2_AFSR12_Enum;

/* ===============================================  PC AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR11                                                           */
  PC_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR2_AFSR11_Enum;

/* ================================================  PC AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR10                                                           */
  PC_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR2_AFSR10_Enum;

/* =================================================  PC AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PC_AFSR2_AFSR9                                                            */
  PC_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR2_AFSR9_Enum;

/* =================================================  PC AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PC_AFSR2_AFSR8                                                            */
  PC_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PC_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PC_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PC_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PC_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PC PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD12                                                            */
  PC_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD12_Enum;

/* ================================================  PC PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD11                                                            */
  PC_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD11_Enum;

/* ================================================  PC PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD10                                                            */
  PC_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD10_Enum;

/* ================================================  PC PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD9                                                             */
  PC_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD9_Enum;

/* ================================================  PC PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD8                                                             */
  PC_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD8_Enum;

/* ================================================  PC PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD7                                                             */
  PC_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD7_Enum;

/* ================================================  PC PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD6                                                             */
  PC_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD6_Enum;

/* ================================================  PC PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD5                                                             */
  PC_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD5_Enum;

/* =================================================  PC PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD4                                                             */
  PC_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD4_Enum;

/* =================================================  PC PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD3                                                             */
  PC_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD3_Enum;

/* =================================================  PC PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD2                                                             */
  PC_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD2_Enum;

/* =================================================  PC PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD1                                                             */
  PC_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD1_Enum;

/* =================================================  PC PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD0                                                             */
  PC_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PC BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR12                                                              */
  PC_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR12_Enum;

/* =================================================  PC BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR11                                                              */
  PC_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR11_Enum;

/* =================================================  PC BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR10                                                              */
  PC_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR10_Enum;

/* ==================================================  PC BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR9                                                               */
  PC_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR9_Enum;

/* ==================================================  PC BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR8                                                               */
  PC_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR8_Enum;

/* ==================================================  PC BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR7                                                               */
  PC_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR7_Enum;

/* ==================================================  PC BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR6                                                               */
  PC_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR6_Enum;

/* ==================================================  PC BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR5                                                               */
  PC_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR5_Enum;

/* ==================================================  PC BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR4                                                               */
  PC_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR4_Enum;

/* ==================================================  PC BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR3                                                               */
  PC_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR3_Enum;

/* ==================================================  PC BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR2                                                               */
  PC_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR2_Enum;

/* ==================================================  PC BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR1                                                               */
  PC_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR1_Enum;

/* ==================================================  PC BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR0                                                               */
  PC_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PC BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR12                                                              */
  PC_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR12_Enum;

/* =================================================  PC BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR11                                                              */
  PC_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR11_Enum;

/* =================================================  PC BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR10                                                              */
  PC_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR10_Enum;

/* ==================================================  PC BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR9                                                               */
  PC_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR9_Enum;

/* ==================================================  PC BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR8                                                               */
  PC_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR8_Enum;

/* ==================================================  PC BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR7                                                               */
  PC_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR7_Enum;

/* ==================================================  PC BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR6                                                               */
  PC_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR6_Enum;

/* ==================================================  PC BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR5                                                               */
  PC_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR5_Enum;

/* ==================================================  PC BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR4                                                               */
  PC_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR4_Enum;

/* ==================================================  PC BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR3                                                               */
  PC_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR3_Enum;

/* ==================================================  PC BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR2                                                               */
  PC_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR2_Enum;

/* ==================================================  PC BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR1                                                               */
  PC_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR1_Enum;

/* ==================================================  PC BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR0                                                               */
  PC_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PC OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK12                                                      */
  PC_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PC OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK11                                                      */
  PC_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PC OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK10                                                      */
  PC_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK9                                                       */
  PC_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK8                                                       */
  PC_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK7                                                       */
  PC_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK5                                                       */
  PC_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK4                                                       */
  PC_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK3                                                       */
  PC_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK2                                                       */
  PC_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK1                                                       */
  PC_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK0                                                       */
  PC_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PC DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PC_DBCR_DBCLK                                                             */
  PC_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PC_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PC_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PC_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PC_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PC_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PC_DBCR_DBCLK_Enum;

/* ================================================  PC DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PC_DBCR_DBEN12                                                            */
  PC_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN12_Enum;

/* ================================================  PC DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PC_DBCR_DBEN11                                                            */
  PC_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN11_Enum;

/* ================================================  PC DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PC_DBCR_DBEN10                                                            */
  PC_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN10_Enum;

/* =================================================  PC DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN9                                                             */
  PC_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN9_Enum;

/* =================================================  PC DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN8                                                             */
  PC_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN8_Enum;

/* =================================================  PC DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN7                                                             */
  PC_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN7_Enum;

/* =================================================  PC DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN6                                                             */
  PC_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN6_Enum;

/* =================================================  PC DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN5                                                             */
  PC_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN5_Enum;

/* =================================================  PC DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN4                                                             */
  PC_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN4_Enum;

/* =================================================  PC DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN3                                                             */
  PC_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN3_Enum;

/* =================================================  PC DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN2                                                             */
  PC_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN2_Enum;

/* =================================================  PC DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN1                                                             */
  PC_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN1_Enum;

/* =================================================  PC DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN0                                                             */
  PC_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN0_Enum;

/* ========================================================  PC_MOD  ========================================================= */
/* ========================================================  PC_TYP  ========================================================= */
/* =======================================================  PC_AFSR1  ======================================================== */
/* =======================================================  PC_AFSR2  ======================================================== */
/* ========================================================  PC_PUPD  ======================================================== */
/* ========================================================  PC_INDR  ======================================================== */
/* =======================================================  PC_OUTDR  ======================================================== */
/* ========================================================  PC_BSR  ========================================================= */
/* ========================================================  PC_BCR  ========================================================= */
/* ======================================================  PC_OUTDMSK  ======================================================= */
/* ========================================================  PC_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PD MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE12                                                             */
  PD_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE12_Enum;

/* ================================================  PD MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE11                                                             */
  PD_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE11_Enum;

/* ================================================  PD MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE10                                                             */
  PD_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE10_Enum;

/* =================================================  PD MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE9                                                              */
  PD_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE9_Enum;

/* =================================================  PD MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE8                                                              */
  PD_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE8_Enum;

/* =================================================  PD MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE7                                                              */
  PD_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE7_Enum;

/* =================================================  PD MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE6                                                              */
  PD_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE6_Enum;

/* =================================================  PD MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE5                                                              */
  PD_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE5_Enum;

/* ==================================================  PD MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE4                                                              */
  PD_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE4_Enum;

/* ==================================================  PD MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE3                                                              */
  PD_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE3_Enum;

/* ==================================================  PD MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE2                                                              */
  PD_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE2_Enum;

/* ==================================================  PD MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE1                                                              */
  PD_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE1_Enum;

/* ==================================================  PD MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE0                                                              */
  PD_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PD TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP12                                                              */
  PD_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP12_Enum;

/* =================================================  PD TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP11                                                              */
  PD_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP11_Enum;

/* =================================================  PD TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP10                                                              */
  PD_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP10_Enum;

/* ==================================================  PD TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP9                                                               */
  PD_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP9_Enum;

/* ==================================================  PD TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP8                                                               */
  PD_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP8_Enum;

/* ==================================================  PD TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP7                                                               */
  PD_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP7_Enum;

/* ==================================================  PD TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP6                                                               */
  PD_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP6_Enum;

/* ==================================================  PD TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP4                                                               */
  PD_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP4_Enum;

/* ==================================================  PD TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP3                                                               */
  PD_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP3_Enum;

/* ==================================================  PD TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP2                                                               */
  PD_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP2_Enum;

/* ==================================================  PD TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP1                                                               */
  PD_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP1_Enum;

/* ==================================================  PD TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP0                                                               */
  PD_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PD AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR7                                                            */
  PD_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR7_Enum;

/* ================================================  PD AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR6                                                            */
  PD_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR6_Enum;

/* ================================================  PD AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR5                                                            */
  PD_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR5_Enum;

/* ================================================  PD AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR4                                                            */
  PD_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR4_Enum;

/* ================================================  PD AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR3                                                            */
  PD_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR3_Enum;

/* ================================================  PD AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR2                                                            */
  PD_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR2_Enum;

/* =================================================  PD AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR1                                                            */
  PD_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR1_Enum;

/* =================================================  PD AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR0                                                            */
  PD_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PD AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR12                                                           */
  PD_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR2_AFSR12_Enum;

/* ===============================================  PD AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR11                                                           */
  PD_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR2_AFSR11_Enum;

/* ================================================  PD AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR10                                                           */
  PD_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR2_AFSR10_Enum;

/* =================================================  PD AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PD_AFSR2_AFSR9                                                            */
  PD_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR2_AFSR9_Enum;

/* =================================================  PD AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PD_AFSR2_AFSR8                                                            */
  PD_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PD_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PD_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PD_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PD_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PD PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD12                                                            */
  PD_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD12_Enum;

/* ================================================  PD PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD11                                                            */
  PD_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD11_Enum;

/* ================================================  PD PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD10                                                            */
  PD_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD10_Enum;

/* ================================================  PD PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD9                                                             */
  PD_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD9_Enum;

/* ================================================  PD PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD8                                                             */
  PD_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD8_Enum;

/* ================================================  PD PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD7                                                             */
  PD_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD7_Enum;

/* ================================================  PD PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD6                                                             */
  PD_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD6_Enum;

/* ================================================  PD PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD5                                                             */
  PD_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD5_Enum;

/* =================================================  PD PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD4                                                             */
  PD_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD4_Enum;

/* =================================================  PD PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD3                                                             */
  PD_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD3_Enum;

/* =================================================  PD PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD2                                                             */
  PD_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD2_Enum;

/* =================================================  PD PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD1                                                             */
  PD_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD1_Enum;

/* =================================================  PD PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD0                                                             */
  PD_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PD BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR12                                                              */
  PD_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR12_Enum;

/* =================================================  PD BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR11                                                              */
  PD_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR11_Enum;

/* =================================================  PD BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR10                                                              */
  PD_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR10_Enum;

/* ==================================================  PD BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR9                                                               */
  PD_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR9_Enum;

/* ==================================================  PD BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR8                                                               */
  PD_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR8_Enum;

/* ==================================================  PD BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR7                                                               */
  PD_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR7_Enum;

/* ==================================================  PD BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR6                                                               */
  PD_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR6_Enum;

/* ==================================================  PD BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR5                                                               */
  PD_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR5_Enum;

/* ==================================================  PD BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR4                                                               */
  PD_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR4_Enum;

/* ==================================================  PD BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR3                                                               */
  PD_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR3_Enum;

/* ==================================================  PD BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR2                                                               */
  PD_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR2_Enum;

/* ==================================================  PD BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR1                                                               */
  PD_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR1_Enum;

/* ==================================================  PD BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR0                                                               */
  PD_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PD BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR12                                                              */
  PD_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR12_Enum;

/* =================================================  PD BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR11                                                              */
  PD_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR11_Enum;

/* =================================================  PD BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR10                                                              */
  PD_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR10_Enum;

/* ==================================================  PD BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR9                                                               */
  PD_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR9_Enum;

/* ==================================================  PD BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR8                                                               */
  PD_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR8_Enum;

/* ==================================================  PD BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR7                                                               */
  PD_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR7_Enum;

/* ==================================================  PD BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR6                                                               */
  PD_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR6_Enum;

/* ==================================================  PD BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR5                                                               */
  PD_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR5_Enum;

/* ==================================================  PD BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR4                                                               */
  PD_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR4_Enum;

/* ==================================================  PD BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR3                                                               */
  PD_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR3_Enum;

/* ==================================================  PD BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR2                                                               */
  PD_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR2_Enum;

/* ==================================================  PD BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR1                                                               */
  PD_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR1_Enum;

/* ==================================================  PD BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR0                                                               */
  PD_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PD OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK12                                                      */
  PD_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PD OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK11                                                      */
  PD_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PD OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK10                                                      */
  PD_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK9                                                       */
  PD_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK8                                                       */
  PD_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK7                                                       */
  PD_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK5                                                       */
  PD_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK4                                                       */
  PD_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK3                                                       */
  PD_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK2                                                       */
  PD_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK1                                                       */
  PD_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK0                                                       */
  PD_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PD DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PD_DBCR_DBCLK                                                             */
  PD_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PD_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PD_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PD_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PD_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PD_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PD_DBCR_DBCLK_Enum;

/* ================================================  PD DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PD_DBCR_DBEN12                                                            */
  PD_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN12_Enum;

/* ================================================  PD DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PD_DBCR_DBEN11                                                            */
  PD_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN11_Enum;

/* ================================================  PD DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PD_DBCR_DBEN10                                                            */
  PD_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN10_Enum;

/* =================================================  PD DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN9                                                             */
  PD_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN9_Enum;

/* =================================================  PD DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN8                                                             */
  PD_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN8_Enum;

/* =================================================  PD DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN7                                                             */
  PD_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN7_Enum;

/* =================================================  PD DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN6                                                             */
  PD_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN6_Enum;

/* =================================================  PD DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN5                                                             */
  PD_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN5_Enum;

/* =================================================  PD DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN4                                                             */
  PD_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN4_Enum;

/* =================================================  PD DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN3                                                             */
  PD_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN3_Enum;

/* =================================================  PD DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN2                                                             */
  PD_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN2_Enum;

/* =================================================  PD DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN1                                                             */
  PD_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN1_Enum;

/* =================================================  PD DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN0                                                             */
  PD_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN0_Enum;

/* ========================================================  PD_MOD  ========================================================= */
/* ========================================================  PD_TYP  ========================================================= */
/* =======================================================  PD_AFSR1  ======================================================== */
/* =======================================================  PD_AFSR2  ======================================================== */
/* ========================================================  PD_PUPD  ======================================================== */
/* ========================================================  PD_INDR  ======================================================== */
/* =======================================================  PD_OUTDR  ======================================================== */
/* ========================================================  PD_BSR  ========================================================= */
/* ========================================================  PD_BCR  ========================================================= */
/* ======================================================  PD_OUTDMSK  ======================================================= */
/* ========================================================  PD_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PE MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE12                                                             */
  PE_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE12_Enum;

/* ================================================  PE MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE11                                                             */
  PE_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE11_Enum;

/* ================================================  PE MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE10                                                             */
  PE_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE10_Enum;

/* =================================================  PE MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE9                                                              */
  PE_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE9_Enum;

/* =================================================  PE MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE8                                                              */
  PE_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE8_Enum;

/* =================================================  PE MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE7                                                              */
  PE_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE7_Enum;

/* =================================================  PE MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE6                                                              */
  PE_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE6_Enum;

/* =================================================  PE MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE5                                                              */
  PE_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE5_Enum;

/* ==================================================  PE MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE4                                                              */
  PE_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE4_Enum;

/* ==================================================  PE MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE3                                                              */
  PE_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE3_Enum;

/* ==================================================  PE MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE2                                                              */
  PE_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE2_Enum;

/* ==================================================  PE MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE1                                                              */
  PE_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE1_Enum;

/* ==================================================  PE MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE0                                                              */
  PE_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PE TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP12                                                              */
  PE_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP12_Enum;

/* =================================================  PE TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP11                                                              */
  PE_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP11_Enum;

/* =================================================  PE TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP10                                                              */
  PE_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP10_Enum;

/* ==================================================  PE TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP9                                                               */
  PE_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP9_Enum;

/* ==================================================  PE TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP8                                                               */
  PE_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP8_Enum;

/* ==================================================  PE TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP7                                                               */
  PE_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP7_Enum;

/* ==================================================  PE TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP6                                                               */
  PE_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP6_Enum;

/* ==================================================  PE TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP4                                                               */
  PE_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP4_Enum;

/* ==================================================  PE TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP3                                                               */
  PE_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP3_Enum;

/* ==================================================  PE TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP2                                                               */
  PE_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP2_Enum;

/* ==================================================  PE TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP1                                                               */
  PE_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP1_Enum;

/* ==================================================  PE TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP0                                                               */
  PE_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PE AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR7                                                            */
  PE_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR7_Enum;

/* ================================================  PE AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR6                                                            */
  PE_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR6_Enum;

/* ================================================  PE AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR5                                                            */
  PE_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR5_Enum;

/* ================================================  PE AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR4                                                            */
  PE_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR4_Enum;

/* ================================================  PE AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR3                                                            */
  PE_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR3_Enum;

/* ================================================  PE AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR2                                                            */
  PE_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR2_Enum;

/* =================================================  PE AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR1                                                            */
  PE_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR1_Enum;

/* =================================================  PE AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR0                                                            */
  PE_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PE AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR12                                                           */
  PE_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR2_AFSR12_Enum;

/* ===============================================  PE AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR11                                                           */
  PE_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR2_AFSR11_Enum;

/* ================================================  PE AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR10                                                           */
  PE_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR2_AFSR10_Enum;

/* =================================================  PE AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PE_AFSR2_AFSR9                                                            */
  PE_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR2_AFSR9_Enum;

/* =================================================  PE AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PE_AFSR2_AFSR8                                                            */
  PE_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PE_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PE_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PE_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PE_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PE PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD12                                                            */
  PE_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD12_Enum;

/* ================================================  PE PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD11                                                            */
  PE_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD11_Enum;

/* ================================================  PE PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD10                                                            */
  PE_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD10_Enum;

/* ================================================  PE PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD9                                                             */
  PE_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD9_Enum;

/* ================================================  PE PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD8                                                             */
  PE_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD8_Enum;

/* ================================================  PE PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD7                                                             */
  PE_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD7_Enum;

/* ================================================  PE PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD6                                                             */
  PE_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD6_Enum;

/* ================================================  PE PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD5                                                             */
  PE_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD5_Enum;

/* =================================================  PE PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD4                                                             */
  PE_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD4_Enum;

/* =================================================  PE PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD3                                                             */
  PE_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD3_Enum;

/* =================================================  PE PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD2                                                             */
  PE_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD2_Enum;

/* =================================================  PE PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD1                                                             */
  PE_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD1_Enum;

/* =================================================  PE PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD0                                                             */
  PE_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PE BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR12                                                              */
  PE_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR12_Enum;

/* =================================================  PE BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR11                                                              */
  PE_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR11_Enum;

/* =================================================  PE BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR10                                                              */
  PE_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR10_Enum;

/* ==================================================  PE BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR9                                                               */
  PE_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR9_Enum;

/* ==================================================  PE BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR8                                                               */
  PE_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR8_Enum;

/* ==================================================  PE BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR7                                                               */
  PE_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR7_Enum;

/* ==================================================  PE BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR6                                                               */
  PE_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR6_Enum;

/* ==================================================  PE BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR5                                                               */
  PE_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR5_Enum;

/* ==================================================  PE BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR4                                                               */
  PE_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR4_Enum;

/* ==================================================  PE BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR3                                                               */
  PE_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR3_Enum;

/* ==================================================  PE BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR2                                                               */
  PE_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR2_Enum;

/* ==================================================  PE BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR1                                                               */
  PE_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR1_Enum;

/* ==================================================  PE BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR0                                                               */
  PE_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PE BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR12                                                              */
  PE_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR12_Enum;

/* =================================================  PE BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR11                                                              */
  PE_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR11_Enum;

/* =================================================  PE BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR10                                                              */
  PE_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR10_Enum;

/* ==================================================  PE BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR9                                                               */
  PE_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR9_Enum;

/* ==================================================  PE BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR8                                                               */
  PE_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR8_Enum;

/* ==================================================  PE BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR7                                                               */
  PE_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR7_Enum;

/* ==================================================  PE BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR6                                                               */
  PE_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR6_Enum;

/* ==================================================  PE BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR5                                                               */
  PE_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR5_Enum;

/* ==================================================  PE BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR4                                                               */
  PE_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR4_Enum;

/* ==================================================  PE BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR3                                                               */
  PE_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR3_Enum;

/* ==================================================  PE BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR2                                                               */
  PE_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR2_Enum;

/* ==================================================  PE BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR1                                                               */
  PE_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR1_Enum;

/* ==================================================  PE BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR0                                                               */
  PE_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PE OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK12                                                      */
  PE_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PE OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK11                                                      */
  PE_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PE OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK10                                                      */
  PE_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK9                                                       */
  PE_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK8                                                       */
  PE_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK7                                                       */
  PE_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK5                                                       */
  PE_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK4                                                       */
  PE_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK3                                                       */
  PE_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK2                                                       */
  PE_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK1                                                       */
  PE_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK0                                                       */
  PE_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PE DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PE_DBCR_DBCLK                                                             */
  PE_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PE_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PE_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PE_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PE_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PE_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PE_DBCR_DBCLK_Enum;

/* ================================================  PE DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PE_DBCR_DBEN12                                                            */
  PE_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN12_Enum;

/* ================================================  PE DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PE_DBCR_DBEN11                                                            */
  PE_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN11_Enum;

/* ================================================  PE DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PE_DBCR_DBEN10                                                            */
  PE_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN10_Enum;

/* =================================================  PE DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN9                                                             */
  PE_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN9_Enum;

/* =================================================  PE DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN8                                                             */
  PE_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN8_Enum;

/* =================================================  PE DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN7                                                             */
  PE_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN7_Enum;

/* =================================================  PE DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN6                                                             */
  PE_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN6_Enum;

/* =================================================  PE DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN5                                                             */
  PE_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN5_Enum;

/* =================================================  PE DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN4                                                             */
  PE_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN4_Enum;

/* =================================================  PE DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN3                                                             */
  PE_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN3_Enum;

/* =================================================  PE DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN2                                                             */
  PE_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN2_Enum;

/* =================================================  PE DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN1                                                             */
  PE_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN1_Enum;

/* =================================================  PE DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN0                                                             */
  PE_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN0_Enum;

/* ========================================================  PE_MOD  ========================================================= */
/* ========================================================  PE_TYP  ========================================================= */
/* =======================================================  PE_AFSR1  ======================================================== */
/* =======================================================  PE_AFSR2  ======================================================== */
/* ========================================================  PE_PUPD  ======================================================== */
/* ========================================================  PE_INDR  ======================================================== */
/* =======================================================  PE_OUTDR  ======================================================== */
/* ========================================================  PE_BSR  ========================================================= */
/* ========================================================  PE_BCR  ========================================================= */
/* ======================================================  PE_OUTDMSK  ======================================================= */
/* ========================================================  PE_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PF MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE12                                                             */
  PF_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE12_Enum;

/* ================================================  PF MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE11                                                             */
  PF_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE11_Enum;

/* ================================================  PF MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE10                                                             */
  PF_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE10_Enum;

/* =================================================  PF MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE9                                                              */
  PF_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE9_Enum;

/* =================================================  PF MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE8                                                              */
  PF_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE8_Enum;

/* =================================================  PF MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE7                                                              */
  PF_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE7_Enum;

/* =================================================  PF MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE6                                                              */
  PF_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE6_Enum;

/* =================================================  PF MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE5                                                              */
  PF_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE5_Enum;

/* ==================================================  PF MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE4                                                              */
  PF_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE4_Enum;

/* ==================================================  PF MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE3                                                              */
  PF_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE3_Enum;

/* ==================================================  PF MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE2                                                              */
  PF_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE2_Enum;

/* ==================================================  PF MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE1                                                              */
  PF_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE1_Enum;

/* ==================================================  PF MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE0                                                              */
  PF_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PF TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP12                                                              */
  PF_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP12_Enum;

/* =================================================  PF TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP11                                                              */
  PF_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP11_Enum;

/* =================================================  PF TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP10                                                              */
  PF_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP10_Enum;

/* ==================================================  PF TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP9                                                               */
  PF_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP9_Enum;

/* ==================================================  PF TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP8                                                               */
  PF_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP8_Enum;

/* ==================================================  PF TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP7                                                               */
  PF_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP7_Enum;

/* ==================================================  PF TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP6                                                               */
  PF_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP6_Enum;

/* ==================================================  PF TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP4                                                               */
  PF_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP4_Enum;

/* ==================================================  PF TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP3                                                               */
  PF_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP3_Enum;

/* ==================================================  PF TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP2                                                               */
  PF_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP2_Enum;

/* ==================================================  PF TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP1                                                               */
  PF_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP1_Enum;

/* ==================================================  PF TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP0                                                               */
  PF_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PF AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR7                                                            */
  PF_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR7_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR7_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR7_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR7_Enum;

/* ================================================  PF AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR6                                                            */
  PF_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR6_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR6_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR6_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR6_Enum;

/* ================================================  PF AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR5                                                            */
  PF_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR5_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR5_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR5_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR5_Enum;

/* ================================================  PF AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR4                                                            */
  PF_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR4_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR4_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR4_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR4_Enum;

/* ================================================  PF AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR3                                                            */
  PF_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR3_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR3_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR3_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR3_Enum;

/* ================================================  PF AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR2                                                            */
  PF_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR2_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR2_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR2_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR2_Enum;

/* =================================================  PF AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR1                                                            */
  PF_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR1_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR1_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR1_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR1_Enum;

/* =================================================  PF AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR0                                                            */
  PF_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR1_AFSR0_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR1_AFSR0_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR1_AFSR0_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PF AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR12                                                           */
  PF_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR2_AFSR12_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR2_AFSR12_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR2_AFSR12_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR2_AFSR12_Enum;

/* ===============================================  PF AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR11                                                           */
  PF_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR2_AFSR11_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR2_AFSR11_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR2_AFSR11_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR2_AFSR11_Enum;

/* ================================================  PF AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR10                                                           */
  PF_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR2_AFSR10_AF5                  = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR2_AFSR10_AF6                  = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR2_AFSR10_AF7                  = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR2_AFSR10_Enum;

/* =================================================  PF AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PF_AFSR2_AFSR9                                                            */
  PF_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR2_AFSR9_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR2_AFSR9_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR2_AFSR9_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR2_AFSR9_Enum;

/* =================================================  PF AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PF_AFSR2_AFSR8                                                            */
  PF_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
  PF_AFSR2_AFSR8_AF5                   = 5,     /*!< AF5 : Alternative Function 5 (AF5)                                        */
  PF_AFSR2_AFSR8_AF6                   = 6,     /*!< AF6 : Alternative Function 6 (AF6)                                        */
  PF_AFSR2_AFSR8_AF7                   = 7,     /*!< AF7 : Alternative Function 7 (AF7)                                        */
} PF_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PF PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD12                                                            */
  PF_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD12_Enum;

/* ================================================  PF PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD11                                                            */
  PF_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD11_Enum;

/* ================================================  PF PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD10                                                            */
  PF_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD10_Enum;

/* ================================================  PF PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD9                                                             */
  PF_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD9_Enum;

/* ================================================  PF PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD8                                                             */
  PF_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD8_Enum;

/* ================================================  PF PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD7                                                             */
  PF_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD7_Enum;

/* ================================================  PF PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD6                                                             */
  PF_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD6_Enum;

/* ================================================  PF PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD5                                                             */
  PF_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD5_Enum;

/* =================================================  PF PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD4                                                             */
  PF_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD4_Enum;

/* =================================================  PF PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD3                                                             */
  PF_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD3_Enum;

/* =================================================  PF PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD2                                                             */
  PF_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD2_Enum;

/* =================================================  PF PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD1                                                             */
  PF_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD1_Enum;

/* =================================================  PF PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD0                                                             */
  PF_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PF BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR12                                                              */
  PF_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR12_Enum;

/* =================================================  PF BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR11                                                              */
  PF_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR11_Enum;

/* =================================================  PF BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR10                                                              */
  PF_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR10_Enum;

/* ==================================================  PF BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR9                                                               */
  PF_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR9_Enum;

/* ==================================================  PF BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR8                                                               */
  PF_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR8_Enum;

/* ==================================================  PF BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR7                                                               */
  PF_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR7_Enum;

/* ==================================================  PF BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR6                                                               */
  PF_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR6_Enum;

/* ==================================================  PF BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR5                                                               */
  PF_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR5_Enum;

/* ==================================================  PF BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR4                                                               */
  PF_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR4_Enum;

/* ==================================================  PF BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR3                                                               */
  PF_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR3_Enum;

/* ==================================================  PF BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR2                                                               */
  PF_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR2_Enum;

/* ==================================================  PF BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR1                                                               */
  PF_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR1_Enum;

/* ==================================================  PF BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR0                                                               */
  PF_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PF BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR12                                                              */
  PF_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR12_Enum;

/* =================================================  PF BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR11                                                              */
  PF_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR11_Enum;

/* =================================================  PF BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR10                                                              */
  PF_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR10_Enum;

/* ==================================================  PF BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR9                                                               */
  PF_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR9_Enum;

/* ==================================================  PF BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR8                                                               */
  PF_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR8_Enum;

/* ==================================================  PF BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR7                                                               */
  PF_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR7_Enum;

/* ==================================================  PF BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR6                                                               */
  PF_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR6_Enum;

/* ==================================================  PF BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR5                                                               */
  PF_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR5_Enum;

/* ==================================================  PF BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR4                                                               */
  PF_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR4_Enum;

/* ==================================================  PF BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR3                                                               */
  PF_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR3_Enum;

/* ==================================================  PF BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR2                                                               */
  PF_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR2_Enum;

/* ==================================================  PF BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR1                                                               */
  PF_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR1_Enum;

/* ==================================================  PF BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR0                                                               */
  PF_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PF OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK12                                                      */
  PF_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PF OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK11                                                      */
  PF_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PF OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK10                                                      */
  PF_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK9                                                       */
  PF_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK8                                                       */
  PF_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK7                                                       */
  PF_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK5                                                       */
  PF_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK4                                                       */
  PF_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK3                                                       */
  PF_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK2                                                       */
  PF_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK1                                                       */
  PF_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK0                                                       */
  PF_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PF DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PF_DBCR_DBCLK                                                             */
  PF_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PF_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PF_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PF_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PF_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PF_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PF_DBCR_DBCLK_Enum;

/* ================================================  PF DBCR DBEN12 [12..12]  ================================================ */
typedef enum {                                  /*!< PF_DBCR_DBEN12                                                            */
  PF_DBCR_DBEN12_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN12_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN12_Enum;

/* ================================================  PF DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PF_DBCR_DBEN11                                                            */
  PF_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN11_Enum;

/* ================================================  PF DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PF_DBCR_DBEN10                                                            */
  PF_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN10_Enum;

/* =================================================  PF DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN9                                                             */
  PF_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN9_Enum;

/* =================================================  PF DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN8                                                             */
  PF_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN8_Enum;

/* =================================================  PF DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN7                                                             */
  PF_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN7_Enum;

/* =================================================  PF DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN6                                                             */
  PF_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN6_Enum;

/* =================================================  PF DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN5                                                             */
  PF_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN5_Enum;

/* =================================================  PF DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN4                                                             */
  PF_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN4_Enum;

/* =================================================  PF DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN3                                                             */
  PF_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN3_Enum;

/* =================================================  PF DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN2                                                             */
  PF_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN2_Enum;

/* =================================================  PF DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN1                                                             */
  PF_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN1_Enum;

/* =================================================  PF DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN0                                                             */
  PF_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN0_Enum;

/* ========================================================  PF_MOD  ========================================================= */
/* ========================================================  PF_TYP  ========================================================= */
/* =======================================================  PF_AFSR1  ======================================================== */
/* =======================================================  PF_AFSR2  ======================================================== */
/* ========================================================  PF_PUPD  ======================================================== */
/* ========================================================  PF_INDR  ======================================================== */
/* =======================================================  PF_OUTDR  ======================================================== */
/* ========================================================  PF_BSR  ========================================================= */
/* ========================================================  PF_BCR  ========================================================= */
/* ======================================================  PF_OUTDMSK  ======================================================= */
/* ========================================================  PF_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  PWRCR  ========================================================= */
/* ===============================================  PMU PWRCR WTIDKY [16..31]  =============================================== */
typedef enum {                                  /*!< PMU_PWRCR_WTIDKY                                                          */
  PMU_PWRCR_WTIDKY_Value               = 20594, /*!< Value : Key Value (0x5072)                                                */
} PMU_PWRCR_WTIDKY_Enum;

/* ===============================================  PMU PWRCR ALLPWR [15..15]  =============================================== */
typedef enum {                                  /*!< PMU_PWRCR_ALLPWR                                                          */
  PMU_PWRCR_ALLPWR_BySW                = 0,     /*!< BySW : Power on/off is controlled by each power control bit               */
  PMU_PWRCR_ALLPWR_Off                 = 1,     /*!< Off : Power off all system and peripheral except always-on region         */
} PMU_PWRCR_ALLPWR_Enum;

/* ===============================================  PMU PWRCR FLASHPWR [8..8]  =============================================== */
typedef enum {                                  /*!< PMU_PWRCR_FLASHPWR                                                        */
  PMU_PWRCR_FLASHPWR_On                = 0,     /*!< On : Power On                                                             */
  PMU_PWRCR_FLASHPWR_Off               = 1,     /*!< Off : Power Off                                                           */
} PMU_PWRCR_FLASHPWR_Enum;

/* ==============================================  PMU PWRCR SRAMRTPWR [0..0]  =============================================== */
typedef enum {                                  /*!< PMU_PWRCR_SRAMRTPWR                                                       */
  PMU_PWRCR_SRAMRTPWR_NormalPower      = 0,     /*!< NormalPower : Normal power for SRAM                                       */
  PMU_PWRCR_SRAMRTPWR_RetentionPower   = 1,     /*!< RetentionPower : Retention power for SRAM on sleep and deep
                                                     sleep mode                                                                */
} PMU_PWRCR_SRAMRTPWR_Enum;

/* =========================================================  BKR0  ========================================================== */
/* =========================================================  BKR1  ========================================================== */
/* =========================================================  BKR2  ========================================================== */
/* =========================================================  BKR3  ========================================================== */
/* =========================================================  BKR4  ========================================================== */
/* =========================================================  BKR5  ========================================================== */
/* =========================================================  BKR6  ========================================================== */
/* =========================================================  BKR7  ========================================================== */
/* =========================================================  BKR8  ========================================================== */
/* =========================================================  BKR9  ========================================================== */
/* =========================================================  BKR10  ========================================================= */
/* =========================================================  BKR11  ========================================================= */
/* =========================================================  BKR12  ========================================================= */
/* =========================================================  BKR13  ========================================================= */
/* =========================================================  BKR14  ========================================================= */
/* =========================================================  BKR15  ========================================================= */
/* =========================================================  BKR16  ========================================================= */
/* =========================================================  BKR17  ========================================================= */
/* =========================================================  BKR18  ========================================================= */
/* =========================================================  BKR19  ========================================================= */
/* =========================================================  BKR20  ========================================================= */
/* =========================================================  BKR21  ========================================================= */
/* =========================================================  BKR22  ========================================================= */
/* =========================================================  BKR23  ========================================================= */
/* =========================================================  BKR24  ========================================================= */
/* =========================================================  BKR25  ========================================================= */
/* =========================================================  BKR26  ========================================================= */
/* =========================================================  BKR27  ========================================================= */
/* =========================================================  BKR28  ========================================================= */
/* =========================================================  BKR29  ========================================================= */
/* =========================================================  BKR30  ========================================================= */
/* =========================================================  BKR31  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ADR  ========================================================== */
/* =========================================================  IDR1  ========================================================== */
/* =========================================================  IDR2  ========================================================== */
/* ==========================================================  CR  =========================================================== */
/* ================================================  FMC CR WTIDKY [16..31]  ================================================= */
typedef enum {                                  /*!< FMC_CR_WTIDKY                                                             */
  FMC_CR_WTIDKY_Value                  = 27795, /*!< Value : Key Value (0x6c93)                                                */
} FMC_CR_WTIDKY_Enum;

/* ==========================================================  BCR  ========================================================== */
/* ================================================  FMC BCR WTIDKY [16..31]  ================================================ */
typedef enum {                                  /*!< FMC_BCR_WTIDKY                                                            */
  FMC_BCR_WTIDKY_Value                 = 49598, /*!< Value : Key Value (0xc1be)                                                */
} FMC_BCR_WTIDKY_Enum;

/* ========================================================  ERFLAG  ========================================================= */
/* ========================================================  PAGEBUF  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  WDT CR WTIDKY [16..31]  ================================================= */
typedef enum {                                  /*!< WDT_CR_WTIDKY                                                             */
  WDT_CR_WTIDKY_Value                  = 23145, /*!< Value : Key Value (0x5a69)                                                */
} WDT_CR_WTIDKY_Enum;

/* =================================================  WDT CR RSTEN [10..15]  ================================================= */
typedef enum {                                  /*!< WDT_CR_RSTEN                                                              */
  WDT_CR_RSTEN_Disable                 = 37,    /*!< Disable : Disable Watch-Dog Timer reset. (0x25)                           */
  WDT_CR_RSTEN_Enable                  = 0,     /*!< Enable : Enable Watch-Dog Timer reset.                                    */
} WDT_CR_RSTEN_Enum;

/* ==================================================  WDT CR CNTEN [4..9]  ================================================== */
typedef enum {                                  /*!< WDT_CR_CNTEN                                                              */
  WDT_CR_CNTEN_Disable                 = 26,    /*!< Disable : Disable Watch-Dog Timer counter. (0x1a)                         */
  WDT_CR_CNTEN_Enable                  = 0,     /*!< Enable : Enable Watch-Dog Timer counter.                                  */
} WDT_CR_CNTEN_Enum;

/* =================================================  WDT CR WINMIEN [3..3]  ================================================= */
typedef enum {                                  /*!< WDT_CR_WINMIEN                                                            */
  WDT_CR_WINMIEN_Disable               = 0,     /*!< Disable : Disable window data match interrupt.                            */
  WDT_CR_WINMIEN_Enable                = 1,     /*!< Enable : Enable window data match interrupt.                              */
} WDT_CR_WINMIEN_Enum;

/* =================================================  WDT CR UNFIEN [2..2]  ================================================== */
typedef enum {                                  /*!< WDT_CR_UNFIEN                                                             */
  WDT_CR_UNFIEN_Disable                = 0,     /*!< Disable : Disable Watch-Dog Timer underflow interrupt.                    */
  WDT_CR_UNFIEN_Enable                 = 1,     /*!< Enable : Enable Watch-Dog Timer underflow interrupt.                      */
} WDT_CR_UNFIEN_Enum;

/* =================================================  WDT CR CLKDIV [0..1]  ================================================== */
typedef enum {                                  /*!< WDT_CR_CLKDIV                                                             */
  WDT_CR_CLKDIV_fWDT4                  = 0,     /*!< fWDT4 : fWDT/4                                                            */
  WDT_CR_CLKDIV_fWDT16                 = 1,     /*!< fWDT16 : fWDT/16                                                          */
  WDT_CR_CLKDIV_fWDT64                 = 2,     /*!< fWDT64 : fWDT/64                                                          */
  WDT_CR_CLKDIV_fWDT256                = 3,     /*!< fWDT256 : fWDT/256                                                        */
} WDT_CR_CLKDIV_Enum;

/* ==========================================================  SR  =========================================================== */
/* ================================================  WDT SR DBGCNTEN [7..7]  ================================================= */
typedef enum {                                  /*!< WDT_SR_DBGCNTEN                                                           */
  WDT_SR_DBGCNTEN_Run                  = 0,     /*!< Run : The Watch-Dog Timer counter continues even if the core
                                                     is halted                                                                 */
  WDT_SR_DBGCNTEN_Stop                 = 1,     /*!< Stop : The Watch-Dog Timer counter is stopped when the core
                                                     is halted                                                                 */
} WDT_SR_DBGCNTEN_Enum;

/* ================================================  WDT SR WINMIFLAG [1..1]  ================================================ */
typedef enum {                                  /*!< WDT_SR_WINMIFLAG                                                          */
  WDT_SR_WINMIFLAG_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  WDT_SR_WINMIFLAG_Request             = 1,     /*!< Request : Request occurred.                                               */
} WDT_SR_WINMIFLAG_Enum;

/* ================================================  WDT SR UNFIFLAG [0..0]  ================================================= */
typedef enum {                                  /*!< WDT_SR_UNFIFLAG                                                           */
  WDT_SR_UNFIFLAG_NoRequest            = 0,     /*!< NoRequest : No request occurred.                                          */
  WDT_SR_UNFIFLAG_Request              = 1,     /*!< Request : Request occurred.                                               */
} WDT_SR_UNFIFLAG_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  WINDR  ========================================================= */
/* =========================================================  CNTR  ========================================================== */
/* =================================================  WDT CNTR CNTR [0..7]  ================================================== */
typedef enum {                                  /*!< WDT_CNTR_CNTR                                                             */
  WDT_CNTR_CNTR_Reload                 = 106,   /*!< Reload : Reload the WDTDR value to Watch-Dog Timer counter and
                                                     re-start                                                                  */
  WDT_CNTR_CNTR_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
} WDT_CNTR_CNTR_Enum;



/* =========================================================================================================================== */
/* ================                                           RTCC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ECR  ========================================================== */
/* =========================================================  SCNT  ========================================================== */
/* ==========================================================  SEC  ========================================================== */
/* ==========================================================  MIN  ========================================================== */
/* =========================================================  HOUR  ========================================================== */
/* ==========================================================  DAY  ========================================================== */
/* =========================================================  WEEK  ========================================================== */
/* =========================================================  MONTH  ========================================================= */
/* =========================================================  YEAR  ========================================================== */
/* =========================================================  ALMIN  ========================================================= */
/* ========================================================  ALHOUR  ========================================================= */
/* ========================================================  ALWEEK  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          TIMER4n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =============================================  TIMER4n CR T4nFRCEN [23..23]  ============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nFRCEN                                                       */
  TIMER4n_CR_T4nFRCEN_Disable          = 0,     /*!< Disable : Disable output force level.                                     */
  TIMER4n_CR_T4nFRCEN_Enable           = 1,     /*!< Enable : Enable output force level during the valid level of
                                                     the selected Tn force input.                                              */
} TIMER4n_CR_T4nFRCEN_Enum;

/* ==============================================  TIMER4n CR T4nFRCS [20..21]  ============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nFRCS                                                        */
  TIMER4n_CR_T4nFRCS_T40               = 0,     /*!< T40 : T40 force input                                                     */
  TIMER4n_CR_T4nFRCS_T41               = 1,     /*!< T41 : T41 force input                                                     */
  TIMER4n_CR_T4nFRCS_T42               = 2,     /*!< T42 : T42 force input                                                     */
  TIMER4n_CR_T4nFRCS_T43               = 3,     /*!< T43 : T43 force input                                                     */
} TIMER4n_CR_T4nFRCS_Enum;

/* ==============================================  TIMER4n CR CNTSHEN [19..19]  ============================================== */
typedef enum {                                  /*!< TIMER4n_CR_CNTSHEN                                                        */
  TIMER4n_CR_CNTSHEN_Disable           = 0,     /*!< Disable : Disable counter sharing.                                        */
  TIMER4n_CR_CNTSHEN_Enable            = 1,     /*!< Enable : Enable counter sharing.                                          */
} TIMER4n_CR_CNTSHEN_Enum;

/* ===============================================  TIMER4n CR CNTSH [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_CNTSH                                                          */
  TIMER4n_CR_CNTSH_T40                 = 0,     /*!< T40 : Timer n uses timer 40's counter instead of itself.                  */
  TIMER4n_CR_CNTSH_T41                 = 1,     /*!< T41 : Timer n uses timer 41's counter instead of itself.                  */
  TIMER4n_CR_CNTSH_T42                 = 2,     /*!< T42 : Timer n uses timer 42's counter instead of itself.                  */
  TIMER4n_CR_CNTSH_T43                 = 3,     /*!< T43 : Timer n uses timer 43's counter instead of itself.                  */
} TIMER4n_CR_CNTSH_Enum;

/* ===============================================  TIMER4n CR T4nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nEN                                                          */
  TIMER4n_CR_T4nEN_Disable             = 0,     /*!< Disable : Disable timer n operation.                                      */
  TIMER4n_CR_T4nEN_Enable              = 1,     /*!< Enable : Enable timer n operation. (Counter clear and start)              */
} TIMER4n_CR_T4nEN_Enum;

/* ==============================================  TIMER4n CR T4nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nCLK                                                         */
  TIMER4n_CR_T4nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER4n_CR_T4nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER4n_CR_T4nCLK_Enum;

/* ===============================================  TIMER4n CR T4nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nMS                                                          */
  TIMER4n_CR_T4nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER4n_CR_T4nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER4n_CR_T4nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All match and bottom interrupts
                                                     can occur)                                                                */
  TIMER4n_CR_T4nMS_OneShotMode         = 3,     /*!< OneShotMode : One-shot interval mode. (All match interrupts
                                                     can occur)                                                                */
} TIMER4n_CR_T4nMS_Enum;

/* ==============================================  TIMER4n CR T4nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nECE                                                         */
  TIMER4n_CR_T4nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER4n_CR_T4nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER4n_CR_T4nECE_Enum;

/* =============================================  TIMER4n CR T4nOPAIR [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nOPAIR                                                       */
  TIMER4n_CR_T4nOPAIR_NoPair           = 0,     /*!< NoPair : No output pair                                                   */
  TIMER4n_CR_T4nOPAIR_Pair             = 1,     /*!< Pair : Output pair (The TnOUTB signal depends on TIMERn_ADR
                                                     register)                                                                 */
} TIMER4n_CR_T4nOPAIR_Enum;

/* ================================================  TIMER4n CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER4n_CR_DLYEN                                                          */
  TIMER4n_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable to insert delay time to the TnOUTA/TnOUTB.              */
  TIMER4n_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable to insert delay time to the TnOUTA/TnOUTB.                */
} TIMER4n_CR_DLYEN_Enum;

/* ===============================================  TIMER4n CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER4n_CR_DLYPOS                                                         */
  TIMER4n_CR_DLYPOS_FrontABackB        = 0,     /*!< FrontABackB : Insert at front of TnOUTA and at back of TnOUTB
                                                     pins.                                                                     */
  TIMER4n_CR_DLYPOS_BackAFrontB        = 1,     /*!< BackAFrontB : Insert at back of TnOUTA and at front of TnOUTB
                                                     pins.                                                                     */
} TIMER4n_CR_DLYPOS_Enum;

/* ================================================  TIMER4n CR UPDT [6..7]  ================================================= */
typedef enum {                                  /*!< TIMER4n_CR_UPDT                                                           */
  TIMER4n_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER4n_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER4n_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER4n_CR_UPDT_Enum;

/* ==============================================  TIMER4n CR T4nINPOL [4..5]  =============================================== */
typedef enum {                                  /*!< TIMER4n_CR_T4nINPOL                                                       */
  TIMER4n_CR_T4nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture on falling edge, Force level on low level.          */
  TIMER4n_CR_T4nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture on rising edge, Force level on high level.           */
  TIMER4n_CR_T4nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture on both of falling and rising edge, Not available
                                                     for force level.                                                          */
} TIMER4n_CR_T4nINPOL_Enum;

/* ===============================================  TIMER4n CR T4nPAU [1..1]  ================================================ */
typedef enum {                                  /*!< TIMER4n_CR_T4nPAU                                                         */
  TIMER4n_CR_T4nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER4n_CR_T4nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER4n_CR_T4nPAU_Enum;

/* ===============================================  TIMER4n CR T4nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER4n_CR_T4nCLR                                                         */
  TIMER4n_CR_T4nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER4n_CR_T4nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER4n_CR_T4nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ===============================================  TIMER4n OUTCR POLB [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_POLB                                                        */
  TIMER4n_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTB pin is started with low
                                                     level after counting)                                                     */
  TIMER4n_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTB pin is started with
                                                     high level after counting)                                                */
} TIMER4n_OUTCR_POLB_Enum;

/* ===============================================  TIMER4n OUTCR POLA [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_POLA                                                        */
  TIMER4n_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTA pins are started with
                                                     low level after counting)                                                 */
  TIMER4n_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTA pins are started with
                                                     high level after counting)                                                */
} TIMER4n_OUTCR_POLA_Enum;

/* ==============================================  TIMER4n OUTCR T4nBOE [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_T4nBOE                                                      */
  TIMER4n_OUTCR_T4nBOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER4n_OUTCR_T4nBOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER4n_OUTCR_T4nBOE_Enum;

/* ==============================================  TIMER4n OUTCR T4nAOE [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_T4nAOE                                                      */
  TIMER4n_OUTCR_T4nAOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER4n_OUTCR_T4nAOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER4n_OUTCR_T4nAOE_Enum;

/* ===============================================  TIMER4n OUTCR LVLB [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_LVLB                                                        */
  TIMER4n_OUTCR_LVLB_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER4n_OUTCR_LVLB_High              = 1,     /*!< High : High level                                                         */
} TIMER4n_OUTCR_LVLB_Enum;

/* ===============================================  TIMER4n OUTCR LVLA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER4n_OUTCR_LVLA                                                        */
  TIMER4n_OUTCR_LVLA_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER4n_OUTCR_LVLA_High              = 1,     /*!< High : High level                                                         */
} TIMER4n_OUTCR_LVLA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ===========================================  TIMER4n INTCR T4nFRCIEN [11..11]  ============================================ */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nFRCIEN                                                   */
  TIMER4n_INTCR_T4nFRCIEN_Disable      = 0,     /*!< Disable : Disable timer n output hold interrupt.                          */
  TIMER4n_INTCR_T4nFRCIEN_Enable       = 1,     /*!< Enable : Enable timer n output hold interrupt.                            */
} TIMER4n_INTCR_T4nFRCIEN_Enum;

/* ============================================  TIMER4n INTCR T4nCIEN [10..10]  ============================================= */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nCIEN                                                     */
  TIMER4n_INTCR_T4nCIEN_Disable        = 0,     /*!< Disable : Disable timer n capture interrupt.                              */
  TIMER4n_INTCR_T4nCIEN_Enable         = 1,     /*!< Enable : Enable timer n capture interrupt.                                */
} TIMER4n_INTCR_T4nCIEN_Enum;

/* =============================================  TIMER4n INTCR T4nBTIEN [9..9]  ============================================= */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nBTIEN                                                    */
  TIMER4n_INTCR_T4nBTIEN_Disable       = 0,     /*!< Disable : Disable timer n bottom interrupt.                               */
  TIMER4n_INTCR_T4nBTIEN_Enable        = 1,     /*!< Enable : Enable timer n bottom interrupt.                                 */
} TIMER4n_INTCR_T4nBTIEN_Enum;

/* =============================================  TIMER4n INTCR T4nPMIEN [8..8]  ============================================= */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nPMIEN                                                    */
  TIMER4n_INTCR_T4nPMIEN_Disable       = 0,     /*!< Disable : Disable timer n period interrupt.                               */
  TIMER4n_INTCR_T4nPMIEN_Enable        = 1,     /*!< Enable : Enable timer n period interrupt.                                 */
} TIMER4n_INTCR_T4nPMIEN_Enum;

/* =============================================  TIMER4n INTCR T4nBMIEN [2..3]  ============================================= */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nBMIEN                                                    */
  TIMER4n_INTCR_T4nBMIEN_Disable       = 0,     /*!< Disable : Disable B match interrupt.                                      */
  TIMER4n_INTCR_T4nBMIEN_UpCount       = 1,     /*!< UpCount : Enable B match interrupt on up counting.                        */
  TIMER4n_INTCR_T4nBMIEN_DownCount     = 2,     /*!< DownCount : Enable B match interrupt on down counting.                    */
  TIMER4n_INTCR_T4nBMIEN_BothCount     = 3,     /*!< BothCount : Enable B match interrupt on up and down counting.             */
} TIMER4n_INTCR_T4nBMIEN_Enum;

/* =============================================  TIMER4n INTCR T4nAMIEN [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER4n_INTCR_T4nAMIEN                                                    */
  TIMER4n_INTCR_T4nAMIEN_Disable       = 0,     /*!< Disable : Disable A match interrupt.                                      */
  TIMER4n_INTCR_T4nAMIEN_UpCount       = 1,     /*!< UpCount : Enable A match interrupt on up counting.                        */
  TIMER4n_INTCR_T4nAMIEN_DownCount     = 2,     /*!< DownCount : Enable A match interrupt on down counting.                    */
  TIMER4n_INTCR_T4nAMIEN_BothCount     = 3,     /*!< BothCount : Enable A match interrupt on up and down counting.             */
} TIMER4n_INTCR_T4nAMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ==========================================  TIMER4n INTFLAG T4nFRCIFLAG [7..7]  =========================================== */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nFRCIFLAG                                               */
  TIMER4n_INTFLAG_T4nFRCIFLAG_NoRequest = 0,    /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nFRCIFLAG_Request  = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nFRCIFLAG_Enum;

/* ===========================================  TIMER4n INTFLAG T4nCIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nCIFLAG                                                 */
  TIMER4n_INTFLAG_T4nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nCIFLAG_Enum;

/* ===========================================  TIMER4n INTFLAG T4nBTIFLAG [5..5]  =========================================== */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nBTIFLAG                                                */
  TIMER4n_INTFLAG_T4nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nBTIFLAG_Enum;

/* ===========================================  TIMER4n INTFLAG T4nPMIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nPMIFLAG                                                */
  TIMER4n_INTFLAG_T4nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nPMIFLAG_Enum;

/* ===========================================  TIMER4n INTFLAG T4nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nBMIFLAG                                                */
  TIMER4n_INTFLAG_T4nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nBMIFLAG_Enum;

/* ===========================================  TIMER4n INTFLAG T4nAMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER4n_INTFLAG_T4nAMIFLAG                                                */
  TIMER4n_INTFLAG_T4nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER4n_INTFLAG_T4nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER4n_INTFLAG_T4nAMIFLAG_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER4n ADTCR T4nBTTG [9..9]  ============================================== */
typedef enum {                                  /*!< TIMER4n_ADTCR_T4nBTTG                                                     */
  TIMER4n_ADTCR_T4nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER4n_ADTCR_T4nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER4n_ADTCR_T4nBTTG_Enum;

/* =============================================  TIMER4n ADTCR T4nPMTG [8..8]  ============================================== */
typedef enum {                                  /*!< TIMER4n_ADTCR_T4nPMTG                                                     */
  TIMER4n_ADTCR_T4nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER4n_ADTCR_T4nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER4n_ADTCR_T4nPMTG_Enum;

/* =============================================  TIMER4n ADTCR T4nBMTG [2..3]  ============================================== */
typedef enum {                                  /*!< TIMER4n_ADTCR_T4nBMTG                                                     */
  TIMER4n_ADTCR_T4nBMTG_DisableUpdown  = 0,     /*!< DisableUpdown : Disable ADC trigger signal generator by B match.          */
  TIMER4n_ADTCR_T4nBMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by B match on
                                                     up counting.                                                              */
  TIMER4n_ADTCR_T4nBMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by B match on
                                                     down counting.                                                            */
  TIMER4n_ADTCR_T4nBMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by B match on
                                                     up and down counting.                                                     */
} TIMER4n_ADTCR_T4nBMTG_Enum;

/* =============================================  TIMER4n ADTCR T4nAMTG [0..1]  ============================================== */
typedef enum {                                  /*!< TIMER4n_ADTCR_T4nAMTG                                                     */
  TIMER4n_ADTCR_T4nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A match.                */
  TIMER4n_ADTCR_T4nAMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by A match on
                                                     up counting.                                                              */
  TIMER4n_ADTCR_T4nAMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by A match on
                                                     down counting.                                                            */
  TIMER4n_ADTCR_T4nAMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by A match on
                                                     up and down counting.                                                     */
} TIMER4n_ADTCR_T4nAMTG_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER40                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =============================================  TIMER40 CR T4nFRCEN [23..23]  ============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nFRCEN                                                       */
  TIMER40_CR_T4nFRCEN_Disable          = 0,     /*!< Disable : Disable output force level.                                     */
  TIMER40_CR_T4nFRCEN_Enable           = 1,     /*!< Enable : Enable output force level during the valid level of
                                                     the selected Tn force input.                                              */
} TIMER40_CR_T4nFRCEN_Enum;

/* ==============================================  TIMER40 CR T4nFRCS [20..21]  ============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nFRCS                                                        */
  TIMER40_CR_T4nFRCS_T40               = 0,     /*!< T40 : T40 force input                                                     */
  TIMER40_CR_T4nFRCS_T41               = 1,     /*!< T41 : T41 force input                                                     */
  TIMER40_CR_T4nFRCS_T42               = 2,     /*!< T42 : T42 force input                                                     */
  TIMER40_CR_T4nFRCS_T43               = 3,     /*!< T43 : T43 force input                                                     */
} TIMER40_CR_T4nFRCS_Enum;

/* ==============================================  TIMER40 CR CNTSHEN [19..19]  ============================================== */
typedef enum {                                  /*!< TIMER40_CR_CNTSHEN                                                        */
  TIMER40_CR_CNTSHEN_Disable           = 0,     /*!< Disable : Disable counter sharing.                                        */
  TIMER40_CR_CNTSHEN_Enable            = 1,     /*!< Enable : Enable counter sharing.                                          */
} TIMER40_CR_CNTSHEN_Enum;

/* ===============================================  TIMER40 CR CNTSH [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_CNTSH                                                          */
  TIMER40_CR_CNTSH_T40                 = 0,     /*!< T40 : Timer n uses timer 40's counter instead of itself.                  */
  TIMER40_CR_CNTSH_T41                 = 1,     /*!< T41 : Timer n uses timer 41's counter instead of itself.                  */
  TIMER40_CR_CNTSH_T42                 = 2,     /*!< T42 : Timer n uses timer 42's counter instead of itself.                  */
  TIMER40_CR_CNTSH_T43                 = 3,     /*!< T43 : Timer n uses timer 43's counter instead of itself.                  */
} TIMER40_CR_CNTSH_Enum;

/* ===============================================  TIMER40 CR T4nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nEN                                                          */
  TIMER40_CR_T4nEN_Disable             = 0,     /*!< Disable : Disable timer n operation.                                      */
  TIMER40_CR_T4nEN_Enable              = 1,     /*!< Enable : Enable timer n operation. (Counter clear and start)              */
} TIMER40_CR_T4nEN_Enum;

/* ==============================================  TIMER40 CR T4nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nCLK                                                         */
  TIMER40_CR_T4nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER40_CR_T4nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER40_CR_T4nCLK_Enum;

/* ===============================================  TIMER40 CR T4nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nMS                                                          */
  TIMER40_CR_T4nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER40_CR_T4nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER40_CR_T4nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All match and bottom interrupts
                                                     can occur)                                                                */
  TIMER40_CR_T4nMS_OneShotMode         = 3,     /*!< OneShotMode : One-shot interval mode. (All match interrupts
                                                     can occur)                                                                */
} TIMER40_CR_T4nMS_Enum;

/* ==============================================  TIMER40 CR T4nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nECE                                                         */
  TIMER40_CR_T4nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER40_CR_T4nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER40_CR_T4nECE_Enum;

/* =============================================  TIMER40 CR T4nOPAIR [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nOPAIR                                                       */
  TIMER40_CR_T4nOPAIR_NoPair           = 0,     /*!< NoPair : No output pair                                                   */
  TIMER40_CR_T4nOPAIR_Pair             = 1,     /*!< Pair : Output pair (The TnOUTB signal depends on TIMERn_ADR
                                                     register)                                                                 */
} TIMER40_CR_T4nOPAIR_Enum;

/* ================================================  TIMER40 CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER40_CR_DLYEN                                                          */
  TIMER40_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable to insert delay time to the TnOUTA/TnOUTB.              */
  TIMER40_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable to insert delay time to the TnOUTA/TnOUTB.                */
} TIMER40_CR_DLYEN_Enum;

/* ===============================================  TIMER40 CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER40_CR_DLYPOS                                                         */
  TIMER40_CR_DLYPOS_FrontABackB        = 0,     /*!< FrontABackB : Insert at front of TnOUTA and at back of TnOUTB
                                                     pins.                                                                     */
  TIMER40_CR_DLYPOS_BackAFrontB        = 1,     /*!< BackAFrontB : Insert at back of TnOUTA and at front of TnOUTB
                                                     pins.                                                                     */
} TIMER40_CR_DLYPOS_Enum;

/* ================================================  TIMER40 CR UPDT [6..7]  ================================================= */
typedef enum {                                  /*!< TIMER40_CR_UPDT                                                           */
  TIMER40_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER40_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER40_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER40_CR_UPDT_Enum;

/* ==============================================  TIMER40 CR T4nINPOL [4..5]  =============================================== */
typedef enum {                                  /*!< TIMER40_CR_T4nINPOL                                                       */
  TIMER40_CR_T4nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture on falling edge, Force level on low level.          */
  TIMER40_CR_T4nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture on rising edge, Force level on high level.           */
  TIMER40_CR_T4nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture on both of falling and rising edge, Not available
                                                     for force level.                                                          */
} TIMER40_CR_T4nINPOL_Enum;

/* ===============================================  TIMER40 CR T4nPAU [1..1]  ================================================ */
typedef enum {                                  /*!< TIMER40_CR_T4nPAU                                                         */
  TIMER40_CR_T4nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER40_CR_T4nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER40_CR_T4nPAU_Enum;

/* ===============================================  TIMER40 CR T4nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER40_CR_T4nCLR                                                         */
  TIMER40_CR_T4nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER40_CR_T4nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER40_CR_T4nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ===============================================  TIMER40 OUTCR POLB [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_POLB                                                        */
  TIMER40_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTB pin is started with low
                                                     level after counting)                                                     */
  TIMER40_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTB pin is started with
                                                     high level after counting)                                                */
} TIMER40_OUTCR_POLB_Enum;

/* ===============================================  TIMER40 OUTCR POLA [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_POLA                                                        */
  TIMER40_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTA pins are started with
                                                     low level after counting)                                                 */
  TIMER40_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTA pins are started with
                                                     high level after counting)                                                */
} TIMER40_OUTCR_POLA_Enum;

/* ==============================================  TIMER40 OUTCR T4nBOE [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_T4nBOE                                                      */
  TIMER40_OUTCR_T4nBOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER40_OUTCR_T4nBOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER40_OUTCR_T4nBOE_Enum;

/* ==============================================  TIMER40 OUTCR T4nAOE [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_T4nAOE                                                      */
  TIMER40_OUTCR_T4nAOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER40_OUTCR_T4nAOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER40_OUTCR_T4nAOE_Enum;

/* ===============================================  TIMER40 OUTCR LVLB [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_LVLB                                                        */
  TIMER40_OUTCR_LVLB_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER40_OUTCR_LVLB_High              = 1,     /*!< High : High level                                                         */
} TIMER40_OUTCR_LVLB_Enum;

/* ===============================================  TIMER40 OUTCR LVLA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER40_OUTCR_LVLA                                                        */
  TIMER40_OUTCR_LVLA_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER40_OUTCR_LVLA_High              = 1,     /*!< High : High level                                                         */
} TIMER40_OUTCR_LVLA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ===========================================  TIMER40 INTCR T4nFRCIEN [11..11]  ============================================ */
typedef enum {                                  /*!< TIMER40_INTCR_T4nFRCIEN                                                   */
  TIMER40_INTCR_T4nFRCIEN_Disable      = 0,     /*!< Disable : Disable timer n output hold interrupt.                          */
  TIMER40_INTCR_T4nFRCIEN_Enable       = 1,     /*!< Enable : Enable timer n output hold interrupt.                            */
} TIMER40_INTCR_T4nFRCIEN_Enum;

/* ============================================  TIMER40 INTCR T4nCIEN [10..10]  ============================================= */
typedef enum {                                  /*!< TIMER40_INTCR_T4nCIEN                                                     */
  TIMER40_INTCR_T4nCIEN_Disable        = 0,     /*!< Disable : Disable timer n capture interrupt.                              */
  TIMER40_INTCR_T4nCIEN_Enable         = 1,     /*!< Enable : Enable timer n capture interrupt.                                */
} TIMER40_INTCR_T4nCIEN_Enum;

/* =============================================  TIMER40 INTCR T4nBTIEN [9..9]  ============================================= */
typedef enum {                                  /*!< TIMER40_INTCR_T4nBTIEN                                                    */
  TIMER40_INTCR_T4nBTIEN_Disable       = 0,     /*!< Disable : Disable timer n bottom interrupt.                               */
  TIMER40_INTCR_T4nBTIEN_Enable        = 1,     /*!< Enable : Enable timer n bottom interrupt.                                 */
} TIMER40_INTCR_T4nBTIEN_Enum;

/* =============================================  TIMER40 INTCR T4nPMIEN [8..8]  ============================================= */
typedef enum {                                  /*!< TIMER40_INTCR_T4nPMIEN                                                    */
  TIMER40_INTCR_T4nPMIEN_Disable       = 0,     /*!< Disable : Disable timer n period interrupt.                               */
  TIMER40_INTCR_T4nPMIEN_Enable        = 1,     /*!< Enable : Enable timer n period interrupt.                                 */
} TIMER40_INTCR_T4nPMIEN_Enum;

/* =============================================  TIMER40 INTCR T4nBMIEN [2..3]  ============================================= */
typedef enum {                                  /*!< TIMER40_INTCR_T4nBMIEN                                                    */
  TIMER40_INTCR_T4nBMIEN_Disable       = 0,     /*!< Disable : Disable B match interrupt.                                      */
  TIMER40_INTCR_T4nBMIEN_UpCount       = 1,     /*!< UpCount : Enable B match interrupt on up counting.                        */
  TIMER40_INTCR_T4nBMIEN_DownCount     = 2,     /*!< DownCount : Enable B match interrupt on down counting.                    */
  TIMER40_INTCR_T4nBMIEN_BothCount     = 3,     /*!< BothCount : Enable B match interrupt on up and down counting.             */
} TIMER40_INTCR_T4nBMIEN_Enum;

/* =============================================  TIMER40 INTCR T4nAMIEN [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER40_INTCR_T4nAMIEN                                                    */
  TIMER40_INTCR_T4nAMIEN_Disable       = 0,     /*!< Disable : Disable A match interrupt.                                      */
  TIMER40_INTCR_T4nAMIEN_UpCount       = 1,     /*!< UpCount : Enable A match interrupt on up counting.                        */
  TIMER40_INTCR_T4nAMIEN_DownCount     = 2,     /*!< DownCount : Enable A match interrupt on down counting.                    */
  TIMER40_INTCR_T4nAMIEN_BothCount     = 3,     /*!< BothCount : Enable A match interrupt on up and down counting.             */
} TIMER40_INTCR_T4nAMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ==========================================  TIMER40 INTFLAG T4nFRCIFLAG [7..7]  =========================================== */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nFRCIFLAG                                               */
  TIMER40_INTFLAG_T4nFRCIFLAG_NoRequest = 0,    /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nFRCIFLAG_Request  = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nFRCIFLAG_Enum;

/* ===========================================  TIMER40 INTFLAG T4nCIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nCIFLAG                                                 */
  TIMER40_INTFLAG_T4nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nCIFLAG_Enum;

/* ===========================================  TIMER40 INTFLAG T4nBTIFLAG [5..5]  =========================================== */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nBTIFLAG                                                */
  TIMER40_INTFLAG_T4nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nBTIFLAG_Enum;

/* ===========================================  TIMER40 INTFLAG T4nPMIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nPMIFLAG                                                */
  TIMER40_INTFLAG_T4nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nPMIFLAG_Enum;

/* ===========================================  TIMER40 INTFLAG T4nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nBMIFLAG                                                */
  TIMER40_INTFLAG_T4nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nBMIFLAG_Enum;

/* ===========================================  TIMER40 INTFLAG T4nAMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER40_INTFLAG_T4nAMIFLAG                                                */
  TIMER40_INTFLAG_T4nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER40_INTFLAG_T4nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER40_INTFLAG_T4nAMIFLAG_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER40 ADTCR T4nBTTG [9..9]  ============================================== */
typedef enum {                                  /*!< TIMER40_ADTCR_T4nBTTG                                                     */
  TIMER40_ADTCR_T4nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER40_ADTCR_T4nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER40_ADTCR_T4nBTTG_Enum;

/* =============================================  TIMER40 ADTCR T4nPMTG [8..8]  ============================================== */
typedef enum {                                  /*!< TIMER40_ADTCR_T4nPMTG                                                     */
  TIMER40_ADTCR_T4nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER40_ADTCR_T4nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER40_ADTCR_T4nPMTG_Enum;

/* =============================================  TIMER40 ADTCR T4nBMTG [2..3]  ============================================== */
typedef enum {                                  /*!< TIMER40_ADTCR_T4nBMTG                                                     */
  TIMER40_ADTCR_T4nBMTG_DisableUpdown  = 0,     /*!< DisableUpdown : Disable ADC trigger signal generator by B match.          */
  TIMER40_ADTCR_T4nBMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by B match on
                                                     up counting.                                                              */
  TIMER40_ADTCR_T4nBMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by B match on
                                                     down counting.                                                            */
  TIMER40_ADTCR_T4nBMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by B match on
                                                     up and down counting.                                                     */
} TIMER40_ADTCR_T4nBMTG_Enum;

/* =============================================  TIMER40 ADTCR T4nAMTG [0..1]  ============================================== */
typedef enum {                                  /*!< TIMER40_ADTCR_T4nAMTG                                                     */
  TIMER40_ADTCR_T4nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A match.                */
  TIMER40_ADTCR_T4nAMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by A match on
                                                     up counting.                                                              */
  TIMER40_ADTCR_T4nAMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by A match on
                                                     down counting.                                                            */
  TIMER40_ADTCR_T4nAMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by A match on
                                                     up and down counting.                                                     */
} TIMER40_ADTCR_T4nAMTG_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER41                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =============================================  TIMER41 CR T4nFRCEN [23..23]  ============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nFRCEN                                                       */
  TIMER41_CR_T4nFRCEN_Disable          = 0,     /*!< Disable : Disable output force level.                                     */
  TIMER41_CR_T4nFRCEN_Enable           = 1,     /*!< Enable : Enable output force level during the valid level of
                                                     the selected Tn force input.                                              */
} TIMER41_CR_T4nFRCEN_Enum;

/* ==============================================  TIMER41 CR T4nFRCS [20..21]  ============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nFRCS                                                        */
  TIMER41_CR_T4nFRCS_T40               = 0,     /*!< T40 : T40 force input                                                     */
  TIMER41_CR_T4nFRCS_T41               = 1,     /*!< T41 : T41 force input                                                     */
  TIMER41_CR_T4nFRCS_T42               = 2,     /*!< T42 : T42 force input                                                     */
  TIMER41_CR_T4nFRCS_T43               = 3,     /*!< T43 : T43 force input                                                     */
} TIMER41_CR_T4nFRCS_Enum;

/* ==============================================  TIMER41 CR CNTSHEN [19..19]  ============================================== */
typedef enum {                                  /*!< TIMER41_CR_CNTSHEN                                                        */
  TIMER41_CR_CNTSHEN_Disable           = 0,     /*!< Disable : Disable counter sharing.                                        */
  TIMER41_CR_CNTSHEN_Enable            = 1,     /*!< Enable : Enable counter sharing.                                          */
} TIMER41_CR_CNTSHEN_Enum;

/* ===============================================  TIMER41 CR CNTSH [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_CNTSH                                                          */
  TIMER41_CR_CNTSH_T40                 = 0,     /*!< T40 : Timer n uses timer 40's counter instead of itself.                  */
  TIMER41_CR_CNTSH_T41                 = 1,     /*!< T41 : Timer n uses timer 41's counter instead of itself.                  */
  TIMER41_CR_CNTSH_T42                 = 2,     /*!< T42 : Timer n uses timer 42's counter instead of itself.                  */
  TIMER41_CR_CNTSH_T43                 = 3,     /*!< T43 : Timer n uses timer 43's counter instead of itself.                  */
} TIMER41_CR_CNTSH_Enum;

/* ===============================================  TIMER41 CR T4nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nEN                                                          */
  TIMER41_CR_T4nEN_Disable             = 0,     /*!< Disable : Disable timer n operation.                                      */
  TIMER41_CR_T4nEN_Enable              = 1,     /*!< Enable : Enable timer n operation. (Counter clear and start)              */
} TIMER41_CR_T4nEN_Enum;

/* ==============================================  TIMER41 CR T4nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nCLK                                                         */
  TIMER41_CR_T4nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER41_CR_T4nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER41_CR_T4nCLK_Enum;

/* ===============================================  TIMER41 CR T4nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nMS                                                          */
  TIMER41_CR_T4nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER41_CR_T4nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER41_CR_T4nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All match and bottom interrupts
                                                     can occur)                                                                */
  TIMER41_CR_T4nMS_OneShotMode         = 3,     /*!< OneShotMode : One-shot interval mode. (All match interrupts
                                                     can occur)                                                                */
} TIMER41_CR_T4nMS_Enum;

/* ==============================================  TIMER41 CR T4nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nECE                                                         */
  TIMER41_CR_T4nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER41_CR_T4nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER41_CR_T4nECE_Enum;

/* =============================================  TIMER41 CR T4nOPAIR [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nOPAIR                                                       */
  TIMER41_CR_T4nOPAIR_NoPair           = 0,     /*!< NoPair : No output pair                                                   */
  TIMER41_CR_T4nOPAIR_Pair             = 1,     /*!< Pair : Output pair (The TnOUTB signal depends on TIMERn_ADR
                                                     register)                                                                 */
} TIMER41_CR_T4nOPAIR_Enum;

/* ================================================  TIMER41 CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER41_CR_DLYEN                                                          */
  TIMER41_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable to insert delay time to the TnOUTA/TnOUTB.              */
  TIMER41_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable to insert delay time to the TnOUTA/TnOUTB.                */
} TIMER41_CR_DLYEN_Enum;

/* ===============================================  TIMER41 CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER41_CR_DLYPOS                                                         */
  TIMER41_CR_DLYPOS_FrontABackB        = 0,     /*!< FrontABackB : Insert at front of TnOUTA and at back of TnOUTB
                                                     pins.                                                                     */
  TIMER41_CR_DLYPOS_BackAFrontB        = 1,     /*!< BackAFrontB : Insert at back of TnOUTA and at front of TnOUTB
                                                     pins.                                                                     */
} TIMER41_CR_DLYPOS_Enum;

/* ================================================  TIMER41 CR UPDT [6..7]  ================================================= */
typedef enum {                                  /*!< TIMER41_CR_UPDT                                                           */
  TIMER41_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER41_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER41_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER41_CR_UPDT_Enum;

/* ==============================================  TIMER41 CR T4nINPOL [4..5]  =============================================== */
typedef enum {                                  /*!< TIMER41_CR_T4nINPOL                                                       */
  TIMER41_CR_T4nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture on falling edge, Force level on low level.          */
  TIMER41_CR_T4nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture on rising edge, Force level on high level.           */
  TIMER41_CR_T4nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture on both of falling and rising edge, Not available
                                                     for force level.                                                          */
} TIMER41_CR_T4nINPOL_Enum;

/* ===============================================  TIMER41 CR T4nPAU [1..1]  ================================================ */
typedef enum {                                  /*!< TIMER41_CR_T4nPAU                                                         */
  TIMER41_CR_T4nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER41_CR_T4nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER41_CR_T4nPAU_Enum;

/* ===============================================  TIMER41 CR T4nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER41_CR_T4nCLR                                                         */
  TIMER41_CR_T4nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER41_CR_T4nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER41_CR_T4nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ===============================================  TIMER41 OUTCR POLB [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_POLB                                                        */
  TIMER41_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTB pin is started with low
                                                     level after counting)                                                     */
  TIMER41_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTB pin is started with
                                                     high level after counting)                                                */
} TIMER41_OUTCR_POLB_Enum;

/* ===============================================  TIMER41 OUTCR POLA [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_POLA                                                        */
  TIMER41_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTA pins are started with
                                                     low level after counting)                                                 */
  TIMER41_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTA pins are started with
                                                     high level after counting)                                                */
} TIMER41_OUTCR_POLA_Enum;

/* ==============================================  TIMER41 OUTCR T4nBOE [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_T4nBOE                                                      */
  TIMER41_OUTCR_T4nBOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER41_OUTCR_T4nBOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER41_OUTCR_T4nBOE_Enum;

/* ==============================================  TIMER41 OUTCR T4nAOE [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_T4nAOE                                                      */
  TIMER41_OUTCR_T4nAOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER41_OUTCR_T4nAOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER41_OUTCR_T4nAOE_Enum;

/* ===============================================  TIMER41 OUTCR LVLB [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_LVLB                                                        */
  TIMER41_OUTCR_LVLB_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER41_OUTCR_LVLB_High              = 1,     /*!< High : High level                                                         */
} TIMER41_OUTCR_LVLB_Enum;

/* ===============================================  TIMER41 OUTCR LVLA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER41_OUTCR_LVLA                                                        */
  TIMER41_OUTCR_LVLA_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER41_OUTCR_LVLA_High              = 1,     /*!< High : High level                                                         */
} TIMER41_OUTCR_LVLA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ===========================================  TIMER41 INTCR T4nFRCIEN [11..11]  ============================================ */
typedef enum {                                  /*!< TIMER41_INTCR_T4nFRCIEN                                                   */
  TIMER41_INTCR_T4nFRCIEN_Disable      = 0,     /*!< Disable : Disable timer n output hold interrupt.                          */
  TIMER41_INTCR_T4nFRCIEN_Enable       = 1,     /*!< Enable : Enable timer n output hold interrupt.                            */
} TIMER41_INTCR_T4nFRCIEN_Enum;

/* ============================================  TIMER41 INTCR T4nCIEN [10..10]  ============================================= */
typedef enum {                                  /*!< TIMER41_INTCR_T4nCIEN                                                     */
  TIMER41_INTCR_T4nCIEN_Disable        = 0,     /*!< Disable : Disable timer n capture interrupt.                              */
  TIMER41_INTCR_T4nCIEN_Enable         = 1,     /*!< Enable : Enable timer n capture interrupt.                                */
} TIMER41_INTCR_T4nCIEN_Enum;

/* =============================================  TIMER41 INTCR T4nBTIEN [9..9]  ============================================= */
typedef enum {                                  /*!< TIMER41_INTCR_T4nBTIEN                                                    */
  TIMER41_INTCR_T4nBTIEN_Disable       = 0,     /*!< Disable : Disable timer n bottom interrupt.                               */
  TIMER41_INTCR_T4nBTIEN_Enable        = 1,     /*!< Enable : Enable timer n bottom interrupt.                                 */
} TIMER41_INTCR_T4nBTIEN_Enum;

/* =============================================  TIMER41 INTCR T4nPMIEN [8..8]  ============================================= */
typedef enum {                                  /*!< TIMER41_INTCR_T4nPMIEN                                                    */
  TIMER41_INTCR_T4nPMIEN_Disable       = 0,     /*!< Disable : Disable timer n period interrupt.                               */
  TIMER41_INTCR_T4nPMIEN_Enable        = 1,     /*!< Enable : Enable timer n period interrupt.                                 */
} TIMER41_INTCR_T4nPMIEN_Enum;

/* =============================================  TIMER41 INTCR T4nBMIEN [2..3]  ============================================= */
typedef enum {                                  /*!< TIMER41_INTCR_T4nBMIEN                                                    */
  TIMER41_INTCR_T4nBMIEN_Disable       = 0,     /*!< Disable : Disable B match interrupt.                                      */
  TIMER41_INTCR_T4nBMIEN_UpCount       = 1,     /*!< UpCount : Enable B match interrupt on up counting.                        */
  TIMER41_INTCR_T4nBMIEN_DownCount     = 2,     /*!< DownCount : Enable B match interrupt on down counting.                    */
  TIMER41_INTCR_T4nBMIEN_BothCount     = 3,     /*!< BothCount : Enable B match interrupt on up and down counting.             */
} TIMER41_INTCR_T4nBMIEN_Enum;

/* =============================================  TIMER41 INTCR T4nAMIEN [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER41_INTCR_T4nAMIEN                                                    */
  TIMER41_INTCR_T4nAMIEN_Disable       = 0,     /*!< Disable : Disable A match interrupt.                                      */
  TIMER41_INTCR_T4nAMIEN_UpCount       = 1,     /*!< UpCount : Enable A match interrupt on up counting.                        */
  TIMER41_INTCR_T4nAMIEN_DownCount     = 2,     /*!< DownCount : Enable A match interrupt on down counting.                    */
  TIMER41_INTCR_T4nAMIEN_BothCount     = 3,     /*!< BothCount : Enable A match interrupt on up and down counting.             */
} TIMER41_INTCR_T4nAMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ==========================================  TIMER41 INTFLAG T4nFRCIFLAG [7..7]  =========================================== */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nFRCIFLAG                                               */
  TIMER41_INTFLAG_T4nFRCIFLAG_NoRequest = 0,    /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nFRCIFLAG_Request  = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nFRCIFLAG_Enum;

/* ===========================================  TIMER41 INTFLAG T4nCIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nCIFLAG                                                 */
  TIMER41_INTFLAG_T4nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nCIFLAG_Enum;

/* ===========================================  TIMER41 INTFLAG T4nBTIFLAG [5..5]  =========================================== */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nBTIFLAG                                                */
  TIMER41_INTFLAG_T4nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nBTIFLAG_Enum;

/* ===========================================  TIMER41 INTFLAG T4nPMIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nPMIFLAG                                                */
  TIMER41_INTFLAG_T4nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nPMIFLAG_Enum;

/* ===========================================  TIMER41 INTFLAG T4nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nBMIFLAG                                                */
  TIMER41_INTFLAG_T4nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nBMIFLAG_Enum;

/* ===========================================  TIMER41 INTFLAG T4nAMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER41_INTFLAG_T4nAMIFLAG                                                */
  TIMER41_INTFLAG_T4nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER41_INTFLAG_T4nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER41_INTFLAG_T4nAMIFLAG_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER41 ADTCR T4nBTTG [9..9]  ============================================== */
typedef enum {                                  /*!< TIMER41_ADTCR_T4nBTTG                                                     */
  TIMER41_ADTCR_T4nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER41_ADTCR_T4nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER41_ADTCR_T4nBTTG_Enum;

/* =============================================  TIMER41 ADTCR T4nPMTG [8..8]  ============================================== */
typedef enum {                                  /*!< TIMER41_ADTCR_T4nPMTG                                                     */
  TIMER41_ADTCR_T4nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER41_ADTCR_T4nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER41_ADTCR_T4nPMTG_Enum;

/* =============================================  TIMER41 ADTCR T4nBMTG [2..3]  ============================================== */
typedef enum {                                  /*!< TIMER41_ADTCR_T4nBMTG                                                     */
  TIMER41_ADTCR_T4nBMTG_DisableUpdown  = 0,     /*!< DisableUpdown : Disable ADC trigger signal generator by B match.          */
  TIMER41_ADTCR_T4nBMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by B match on
                                                     up counting.                                                              */
  TIMER41_ADTCR_T4nBMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by B match on
                                                     down counting.                                                            */
  TIMER41_ADTCR_T4nBMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by B match on
                                                     up and down counting.                                                     */
} TIMER41_ADTCR_T4nBMTG_Enum;

/* =============================================  TIMER41 ADTCR T4nAMTG [0..1]  ============================================== */
typedef enum {                                  /*!< TIMER41_ADTCR_T4nAMTG                                                     */
  TIMER41_ADTCR_T4nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A match.                */
  TIMER41_ADTCR_T4nAMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by A match on
                                                     up counting.                                                              */
  TIMER41_ADTCR_T4nAMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by A match on
                                                     down counting.                                                            */
  TIMER41_ADTCR_T4nAMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by A match on
                                                     up and down counting.                                                     */
} TIMER41_ADTCR_T4nAMTG_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER42                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =============================================  TIMER42 CR T4nFRCEN [23..23]  ============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nFRCEN                                                       */
  TIMER42_CR_T4nFRCEN_Disable          = 0,     /*!< Disable : Disable output force level.                                     */
  TIMER42_CR_T4nFRCEN_Enable           = 1,     /*!< Enable : Enable output force level during the valid level of
                                                     the selected Tn force input.                                              */
} TIMER42_CR_T4nFRCEN_Enum;

/* ==============================================  TIMER42 CR T4nFRCS [20..21]  ============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nFRCS                                                        */
  TIMER42_CR_T4nFRCS_T40               = 0,     /*!< T40 : T40 force input                                                     */
  TIMER42_CR_T4nFRCS_T41               = 1,     /*!< T41 : T41 force input                                                     */
  TIMER42_CR_T4nFRCS_T42               = 2,     /*!< T42 : T42 force input                                                     */
  TIMER42_CR_T4nFRCS_T43               = 3,     /*!< T43 : T43 force input                                                     */
} TIMER42_CR_T4nFRCS_Enum;

/* ==============================================  TIMER42 CR CNTSHEN [19..19]  ============================================== */
typedef enum {                                  /*!< TIMER42_CR_CNTSHEN                                                        */
  TIMER42_CR_CNTSHEN_Disable           = 0,     /*!< Disable : Disable counter sharing.                                        */
  TIMER42_CR_CNTSHEN_Enable            = 1,     /*!< Enable : Enable counter sharing.                                          */
} TIMER42_CR_CNTSHEN_Enum;

/* ===============================================  TIMER42 CR CNTSH [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_CNTSH                                                          */
  TIMER42_CR_CNTSH_T40                 = 0,     /*!< T40 : Timer n uses timer 40's counter instead of itself.                  */
  TIMER42_CR_CNTSH_T41                 = 1,     /*!< T41 : Timer n uses timer 41's counter instead of itself.                  */
  TIMER42_CR_CNTSH_T42                 = 2,     /*!< T42 : Timer n uses timer 42's counter instead of itself.                  */
  TIMER42_CR_CNTSH_T43                 = 3,     /*!< T43 : Timer n uses timer 43's counter instead of itself.                  */
} TIMER42_CR_CNTSH_Enum;

/* ===============================================  TIMER42 CR T4nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nEN                                                          */
  TIMER42_CR_T4nEN_Disable             = 0,     /*!< Disable : Disable timer n operation.                                      */
  TIMER42_CR_T4nEN_Enable              = 1,     /*!< Enable : Enable timer n operation. (Counter clear and start)              */
} TIMER42_CR_T4nEN_Enum;

/* ==============================================  TIMER42 CR T4nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nCLK                                                         */
  TIMER42_CR_T4nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER42_CR_T4nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER42_CR_T4nCLK_Enum;

/* ===============================================  TIMER42 CR T4nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nMS                                                          */
  TIMER42_CR_T4nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER42_CR_T4nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER42_CR_T4nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All match and bottom interrupts
                                                     can occur)                                                                */
  TIMER42_CR_T4nMS_OneShotMode         = 3,     /*!< OneShotMode : One-shot interval mode. (All match interrupts
                                                     can occur)                                                                */
} TIMER42_CR_T4nMS_Enum;

/* ==============================================  TIMER42 CR T4nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nECE                                                         */
  TIMER42_CR_T4nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER42_CR_T4nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER42_CR_T4nECE_Enum;

/* =============================================  TIMER42 CR T4nOPAIR [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nOPAIR                                                       */
  TIMER42_CR_T4nOPAIR_NoPair           = 0,     /*!< NoPair : No output pair                                                   */
  TIMER42_CR_T4nOPAIR_Pair             = 1,     /*!< Pair : Output pair (The TnOUTB signal depends on TIMERn_ADR
                                                     register)                                                                 */
} TIMER42_CR_T4nOPAIR_Enum;

/* ================================================  TIMER42 CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER42_CR_DLYEN                                                          */
  TIMER42_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable to insert delay time to the TnOUTA/TnOUTB.              */
  TIMER42_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable to insert delay time to the TnOUTA/TnOUTB.                */
} TIMER42_CR_DLYEN_Enum;

/* ===============================================  TIMER42 CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER42_CR_DLYPOS                                                         */
  TIMER42_CR_DLYPOS_FrontABackB        = 0,     /*!< FrontABackB : Insert at front of TnOUTA and at back of TnOUTB
                                                     pins.                                                                     */
  TIMER42_CR_DLYPOS_BackAFrontB        = 1,     /*!< BackAFrontB : Insert at back of TnOUTA and at front of TnOUTB
                                                     pins.                                                                     */
} TIMER42_CR_DLYPOS_Enum;

/* ================================================  TIMER42 CR UPDT [6..7]  ================================================= */
typedef enum {                                  /*!< TIMER42_CR_UPDT                                                           */
  TIMER42_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER42_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER42_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER42_CR_UPDT_Enum;

/* ==============================================  TIMER42 CR T4nINPOL [4..5]  =============================================== */
typedef enum {                                  /*!< TIMER42_CR_T4nINPOL                                                       */
  TIMER42_CR_T4nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture on falling edge, Force level on low level.          */
  TIMER42_CR_T4nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture on rising edge, Force level on high level.           */
  TIMER42_CR_T4nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture on both of falling and rising edge, Not available
                                                     for force level.                                                          */
} TIMER42_CR_T4nINPOL_Enum;

/* ===============================================  TIMER42 CR T4nPAU [1..1]  ================================================ */
typedef enum {                                  /*!< TIMER42_CR_T4nPAU                                                         */
  TIMER42_CR_T4nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER42_CR_T4nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER42_CR_T4nPAU_Enum;

/* ===============================================  TIMER42 CR T4nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER42_CR_T4nCLR                                                         */
  TIMER42_CR_T4nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER42_CR_T4nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER42_CR_T4nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ===============================================  TIMER42 OUTCR POLB [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_POLB                                                        */
  TIMER42_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTB pin is started with low
                                                     level after counting)                                                     */
  TIMER42_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTB pin is started with
                                                     high level after counting)                                                */
} TIMER42_OUTCR_POLB_Enum;

/* ===============================================  TIMER42 OUTCR POLA [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_POLA                                                        */
  TIMER42_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTA pins are started with
                                                     low level after counting)                                                 */
  TIMER42_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTA pins are started with
                                                     high level after counting)                                                */
} TIMER42_OUTCR_POLA_Enum;

/* ==============================================  TIMER42 OUTCR T4nBOE [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_T4nBOE                                                      */
  TIMER42_OUTCR_T4nBOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER42_OUTCR_T4nBOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER42_OUTCR_T4nBOE_Enum;

/* ==============================================  TIMER42 OUTCR T4nAOE [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_T4nAOE                                                      */
  TIMER42_OUTCR_T4nAOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER42_OUTCR_T4nAOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER42_OUTCR_T4nAOE_Enum;

/* ===============================================  TIMER42 OUTCR LVLB [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_LVLB                                                        */
  TIMER42_OUTCR_LVLB_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER42_OUTCR_LVLB_High              = 1,     /*!< High : High level                                                         */
} TIMER42_OUTCR_LVLB_Enum;

/* ===============================================  TIMER42 OUTCR LVLA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER42_OUTCR_LVLA                                                        */
  TIMER42_OUTCR_LVLA_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER42_OUTCR_LVLA_High              = 1,     /*!< High : High level                                                         */
} TIMER42_OUTCR_LVLA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ===========================================  TIMER42 INTCR T4nFRCIEN [11..11]  ============================================ */
typedef enum {                                  /*!< TIMER42_INTCR_T4nFRCIEN                                                   */
  TIMER42_INTCR_T4nFRCIEN_Disable      = 0,     /*!< Disable : Disable timer n output hold interrupt.                          */
  TIMER42_INTCR_T4nFRCIEN_Enable       = 1,     /*!< Enable : Enable timer n output hold interrupt.                            */
} TIMER42_INTCR_T4nFRCIEN_Enum;

/* ============================================  TIMER42 INTCR T4nCIEN [10..10]  ============================================= */
typedef enum {                                  /*!< TIMER42_INTCR_T4nCIEN                                                     */
  TIMER42_INTCR_T4nCIEN_Disable        = 0,     /*!< Disable : Disable timer n capture interrupt.                              */
  TIMER42_INTCR_T4nCIEN_Enable         = 1,     /*!< Enable : Enable timer n capture interrupt.                                */
} TIMER42_INTCR_T4nCIEN_Enum;

/* =============================================  TIMER42 INTCR T4nBTIEN [9..9]  ============================================= */
typedef enum {                                  /*!< TIMER42_INTCR_T4nBTIEN                                                    */
  TIMER42_INTCR_T4nBTIEN_Disable       = 0,     /*!< Disable : Disable timer n bottom interrupt.                               */
  TIMER42_INTCR_T4nBTIEN_Enable        = 1,     /*!< Enable : Enable timer n bottom interrupt.                                 */
} TIMER42_INTCR_T4nBTIEN_Enum;

/* =============================================  TIMER42 INTCR T4nPMIEN [8..8]  ============================================= */
typedef enum {                                  /*!< TIMER42_INTCR_T4nPMIEN                                                    */
  TIMER42_INTCR_T4nPMIEN_Disable       = 0,     /*!< Disable : Disable timer n period interrupt.                               */
  TIMER42_INTCR_T4nPMIEN_Enable        = 1,     /*!< Enable : Enable timer n period interrupt.                                 */
} TIMER42_INTCR_T4nPMIEN_Enum;

/* =============================================  TIMER42 INTCR T4nBMIEN [2..3]  ============================================= */
typedef enum {                                  /*!< TIMER42_INTCR_T4nBMIEN                                                    */
  TIMER42_INTCR_T4nBMIEN_Disable       = 0,     /*!< Disable : Disable B match interrupt.                                      */
  TIMER42_INTCR_T4nBMIEN_UpCount       = 1,     /*!< UpCount : Enable B match interrupt on up counting.                        */
  TIMER42_INTCR_T4nBMIEN_DownCount     = 2,     /*!< DownCount : Enable B match interrupt on down counting.                    */
  TIMER42_INTCR_T4nBMIEN_BothCount     = 3,     /*!< BothCount : Enable B match interrupt on up and down counting.             */
} TIMER42_INTCR_T4nBMIEN_Enum;

/* =============================================  TIMER42 INTCR T4nAMIEN [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER42_INTCR_T4nAMIEN                                                    */
  TIMER42_INTCR_T4nAMIEN_Disable       = 0,     /*!< Disable : Disable A match interrupt.                                      */
  TIMER42_INTCR_T4nAMIEN_UpCount       = 1,     /*!< UpCount : Enable A match interrupt on up counting.                        */
  TIMER42_INTCR_T4nAMIEN_DownCount     = 2,     /*!< DownCount : Enable A match interrupt on down counting.                    */
  TIMER42_INTCR_T4nAMIEN_BothCount     = 3,     /*!< BothCount : Enable A match interrupt on up and down counting.             */
} TIMER42_INTCR_T4nAMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ==========================================  TIMER42 INTFLAG T4nFRCIFLAG [7..7]  =========================================== */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nFRCIFLAG                                               */
  TIMER42_INTFLAG_T4nFRCIFLAG_NoRequest = 0,    /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nFRCIFLAG_Request  = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nFRCIFLAG_Enum;

/* ===========================================  TIMER42 INTFLAG T4nCIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nCIFLAG                                                 */
  TIMER42_INTFLAG_T4nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nCIFLAG_Enum;

/* ===========================================  TIMER42 INTFLAG T4nBTIFLAG [5..5]  =========================================== */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nBTIFLAG                                                */
  TIMER42_INTFLAG_T4nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nBTIFLAG_Enum;

/* ===========================================  TIMER42 INTFLAG T4nPMIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nPMIFLAG                                                */
  TIMER42_INTFLAG_T4nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nPMIFLAG_Enum;

/* ===========================================  TIMER42 INTFLAG T4nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nBMIFLAG                                                */
  TIMER42_INTFLAG_T4nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nBMIFLAG_Enum;

/* ===========================================  TIMER42 INTFLAG T4nAMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER42_INTFLAG_T4nAMIFLAG                                                */
  TIMER42_INTFLAG_T4nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER42_INTFLAG_T4nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER42_INTFLAG_T4nAMIFLAG_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER42 ADTCR T4nBTTG [9..9]  ============================================== */
typedef enum {                                  /*!< TIMER42_ADTCR_T4nBTTG                                                     */
  TIMER42_ADTCR_T4nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER42_ADTCR_T4nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER42_ADTCR_T4nBTTG_Enum;

/* =============================================  TIMER42 ADTCR T4nPMTG [8..8]  ============================================== */
typedef enum {                                  /*!< TIMER42_ADTCR_T4nPMTG                                                     */
  TIMER42_ADTCR_T4nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER42_ADTCR_T4nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER42_ADTCR_T4nPMTG_Enum;

/* =============================================  TIMER42 ADTCR T4nBMTG [2..3]  ============================================== */
typedef enum {                                  /*!< TIMER42_ADTCR_T4nBMTG                                                     */
  TIMER42_ADTCR_T4nBMTG_DisableUpdown  = 0,     /*!< DisableUpdown : Disable ADC trigger signal generator by B match.          */
  TIMER42_ADTCR_T4nBMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by B match on
                                                     up counting.                                                              */
  TIMER42_ADTCR_T4nBMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by B match on
                                                     down counting.                                                            */
  TIMER42_ADTCR_T4nBMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by B match on
                                                     up and down counting.                                                     */
} TIMER42_ADTCR_T4nBMTG_Enum;

/* =============================================  TIMER42 ADTCR T4nAMTG [0..1]  ============================================== */
typedef enum {                                  /*!< TIMER42_ADTCR_T4nAMTG                                                     */
  TIMER42_ADTCR_T4nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A match.                */
  TIMER42_ADTCR_T4nAMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by A match on
                                                     up counting.                                                              */
  TIMER42_ADTCR_T4nAMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by A match on
                                                     down counting.                                                            */
  TIMER42_ADTCR_T4nAMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by A match on
                                                     up and down counting.                                                     */
} TIMER42_ADTCR_T4nAMTG_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER43                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =============================================  TIMER43 CR T4nFRCEN [23..23]  ============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nFRCEN                                                       */
  TIMER43_CR_T4nFRCEN_Disable          = 0,     /*!< Disable : Disable output force level.                                     */
  TIMER43_CR_T4nFRCEN_Enable           = 1,     /*!< Enable : Enable output force level during the valid level of
                                                     the selected Tn force input.                                              */
} TIMER43_CR_T4nFRCEN_Enum;

/* ==============================================  TIMER43 CR T4nFRCS [20..21]  ============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nFRCS                                                        */
  TIMER43_CR_T4nFRCS_T40               = 0,     /*!< T40 : T40 force input                                                     */
  TIMER43_CR_T4nFRCS_T41               = 1,     /*!< T41 : T41 force input                                                     */
  TIMER43_CR_T4nFRCS_T42               = 2,     /*!< T42 : T42 force input                                                     */
  TIMER43_CR_T4nFRCS_T43               = 3,     /*!< T43 : T43 force input                                                     */
} TIMER43_CR_T4nFRCS_Enum;

/* ==============================================  TIMER43 CR CNTSHEN [19..19]  ============================================== */
typedef enum {                                  /*!< TIMER43_CR_CNTSHEN                                                        */
  TIMER43_CR_CNTSHEN_Disable           = 0,     /*!< Disable : Disable counter sharing.                                        */
  TIMER43_CR_CNTSHEN_Enable            = 1,     /*!< Enable : Enable counter sharing.                                          */
} TIMER43_CR_CNTSHEN_Enum;

/* ===============================================  TIMER43 CR CNTSH [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_CNTSH                                                          */
  TIMER43_CR_CNTSH_T40                 = 0,     /*!< T40 : Timer n uses timer 40's counter instead of itself.                  */
  TIMER43_CR_CNTSH_T41                 = 1,     /*!< T41 : Timer n uses timer 41's counter instead of itself.                  */
  TIMER43_CR_CNTSH_T42                 = 2,     /*!< T42 : Timer n uses timer 42's counter instead of itself.                  */
  TIMER43_CR_CNTSH_T43                 = 3,     /*!< T43 : Timer n uses timer 43's counter instead of itself.                  */
} TIMER43_CR_CNTSH_Enum;

/* ===============================================  TIMER43 CR T4nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nEN                                                          */
  TIMER43_CR_T4nEN_Disable             = 0,     /*!< Disable : Disable timer n operation.                                      */
  TIMER43_CR_T4nEN_Enable              = 1,     /*!< Enable : Enable timer n operation. (Counter clear and start)              */
} TIMER43_CR_T4nEN_Enum;

/* ==============================================  TIMER43 CR T4nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nCLK                                                         */
  TIMER43_CR_T4nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER43_CR_T4nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER43_CR_T4nCLK_Enum;

/* ===============================================  TIMER43 CR T4nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nMS                                                          */
  TIMER43_CR_T4nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER43_CR_T4nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER43_CR_T4nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All match and bottom interrupts
                                                     can occur)                                                                */
  TIMER43_CR_T4nMS_OneShotMode         = 3,     /*!< OneShotMode : One-shot interval mode. (All match interrupts
                                                     can occur)                                                                */
} TIMER43_CR_T4nMS_Enum;

/* ==============================================  TIMER43 CR T4nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nECE                                                         */
  TIMER43_CR_T4nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER43_CR_T4nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER43_CR_T4nECE_Enum;

/* =============================================  TIMER43 CR T4nOPAIR [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nOPAIR                                                       */
  TIMER43_CR_T4nOPAIR_NoPair           = 0,     /*!< NoPair : No output pair                                                   */
  TIMER43_CR_T4nOPAIR_Pair             = 1,     /*!< Pair : Output pair (The TnOUTB signal depends on TIMERn_ADR
                                                     register)                                                                 */
} TIMER43_CR_T4nOPAIR_Enum;

/* ================================================  TIMER43 CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER43_CR_DLYEN                                                          */
  TIMER43_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable to insert delay time to the TnOUTA/TnOUTB.              */
  TIMER43_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable to insert delay time to the TnOUTA/TnOUTB.                */
} TIMER43_CR_DLYEN_Enum;

/* ===============================================  TIMER43 CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER43_CR_DLYPOS                                                         */
  TIMER43_CR_DLYPOS_FrontABackB        = 0,     /*!< FrontABackB : Insert at front of TnOUTA and at back of TnOUTB
                                                     pins.                                                                     */
  TIMER43_CR_DLYPOS_BackAFrontB        = 1,     /*!< BackAFrontB : Insert at back of TnOUTA and at front of TnOUTB
                                                     pins.                                                                     */
} TIMER43_CR_DLYPOS_Enum;

/* ================================================  TIMER43 CR UPDT [6..7]  ================================================= */
typedef enum {                                  /*!< TIMER43_CR_UPDT                                                           */
  TIMER43_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER43_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER43_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER43_CR_UPDT_Enum;

/* ==============================================  TIMER43 CR T4nINPOL [4..5]  =============================================== */
typedef enum {                                  /*!< TIMER43_CR_T4nINPOL                                                       */
  TIMER43_CR_T4nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture on falling edge, Force level on low level.          */
  TIMER43_CR_T4nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture on rising edge, Force level on high level.           */
  TIMER43_CR_T4nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture on both of falling and rising edge, Not available
                                                     for force level.                                                          */
} TIMER43_CR_T4nINPOL_Enum;

/* ===============================================  TIMER43 CR T4nPAU [1..1]  ================================================ */
typedef enum {                                  /*!< TIMER43_CR_T4nPAU                                                         */
  TIMER43_CR_T4nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER43_CR_T4nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER43_CR_T4nPAU_Enum;

/* ===============================================  TIMER43 CR T4nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER43_CR_T4nCLR                                                         */
  TIMER43_CR_T4nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER43_CR_T4nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER43_CR_T4nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ===============================================  TIMER43 OUTCR POLB [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_POLB                                                        */
  TIMER43_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTB pin is started with low
                                                     level after counting)                                                     */
  TIMER43_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTB pin is started with
                                                     high level after counting)                                                */
} TIMER43_OUTCR_POLB_Enum;

/* ===============================================  TIMER43 OUTCR POLA [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_POLA                                                        */
  TIMER43_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start (The TnOUTA pins are started with
                                                     low level after counting)                                                 */
  TIMER43_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start (The TnOUTA pins are started with
                                                     high level after counting)                                                */
} TIMER43_OUTCR_POLA_Enum;

/* ==============================================  TIMER43 OUTCR T4nBOE [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_T4nBOE                                                      */
  TIMER43_OUTCR_T4nBOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER43_OUTCR_T4nBOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER43_OUTCR_T4nBOE_Enum;

/* ==============================================  TIMER43 OUTCR T4nAOE [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_T4nAOE                                                      */
  TIMER43_OUTCR_T4nAOE_Disable         = 0,     /*!< Disable : Disable output.                                                 */
  TIMER43_OUTCR_T4nAOE_Enable          = 1,     /*!< Enable : Enable output.                                                   */
} TIMER43_OUTCR_T4nAOE_Enum;

/* ===============================================  TIMER43 OUTCR LVLB [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_LVLB                                                        */
  TIMER43_OUTCR_LVLB_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER43_OUTCR_LVLB_High              = 1,     /*!< High : High level                                                         */
} TIMER43_OUTCR_LVLB_Enum;

/* ===============================================  TIMER43 OUTCR LVLA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER43_OUTCR_LVLA                                                        */
  TIMER43_OUTCR_LVLA_Low               = 0,     /*!< Low : Low level                                                           */
  TIMER43_OUTCR_LVLA_High              = 1,     /*!< High : High level                                                         */
} TIMER43_OUTCR_LVLA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ===========================================  TIMER43 INTCR T4nFRCIEN [11..11]  ============================================ */
typedef enum {                                  /*!< TIMER43_INTCR_T4nFRCIEN                                                   */
  TIMER43_INTCR_T4nFRCIEN_Disable      = 0,     /*!< Disable : Disable timer n output hold interrupt.                          */
  TIMER43_INTCR_T4nFRCIEN_Enable       = 1,     /*!< Enable : Enable timer n output hold interrupt.                            */
} TIMER43_INTCR_T4nFRCIEN_Enum;

/* ============================================  TIMER43 INTCR T4nCIEN [10..10]  ============================================= */
typedef enum {                                  /*!< TIMER43_INTCR_T4nCIEN                                                     */
  TIMER43_INTCR_T4nCIEN_Disable        = 0,     /*!< Disable : Disable timer n capture interrupt.                              */
  TIMER43_INTCR_T4nCIEN_Enable         = 1,     /*!< Enable : Enable timer n capture interrupt.                                */
} TIMER43_INTCR_T4nCIEN_Enum;

/* =============================================  TIMER43 INTCR T4nBTIEN [9..9]  ============================================= */
typedef enum {                                  /*!< TIMER43_INTCR_T4nBTIEN                                                    */
  TIMER43_INTCR_T4nBTIEN_Disable       = 0,     /*!< Disable : Disable timer n bottom interrupt.                               */
  TIMER43_INTCR_T4nBTIEN_Enable        = 1,     /*!< Enable : Enable timer n bottom interrupt.                                 */
} TIMER43_INTCR_T4nBTIEN_Enum;

/* =============================================  TIMER43 INTCR T4nPMIEN [8..8]  ============================================= */
typedef enum {                                  /*!< TIMER43_INTCR_T4nPMIEN                                                    */
  TIMER43_INTCR_T4nPMIEN_Disable       = 0,     /*!< Disable : Disable timer n period interrupt.                               */
  TIMER43_INTCR_T4nPMIEN_Enable        = 1,     /*!< Enable : Enable timer n period interrupt.                                 */
} TIMER43_INTCR_T4nPMIEN_Enum;

/* =============================================  TIMER43 INTCR T4nBMIEN [2..3]  ============================================= */
typedef enum {                                  /*!< TIMER43_INTCR_T4nBMIEN                                                    */
  TIMER43_INTCR_T4nBMIEN_Disable       = 0,     /*!< Disable : Disable B match interrupt.                                      */
  TIMER43_INTCR_T4nBMIEN_UpCount       = 1,     /*!< UpCount : Enable B match interrupt on up counting.                        */
  TIMER43_INTCR_T4nBMIEN_DownCount     = 2,     /*!< DownCount : Enable B match interrupt on down counting.                    */
  TIMER43_INTCR_T4nBMIEN_BothCount     = 3,     /*!< BothCount : Enable B match interrupt on up and down counting.             */
} TIMER43_INTCR_T4nBMIEN_Enum;

/* =============================================  TIMER43 INTCR T4nAMIEN [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER43_INTCR_T4nAMIEN                                                    */
  TIMER43_INTCR_T4nAMIEN_Disable       = 0,     /*!< Disable : Disable A match interrupt.                                      */
  TIMER43_INTCR_T4nAMIEN_UpCount       = 1,     /*!< UpCount : Enable A match interrupt on up counting.                        */
  TIMER43_INTCR_T4nAMIEN_DownCount     = 2,     /*!< DownCount : Enable A match interrupt on down counting.                    */
  TIMER43_INTCR_T4nAMIEN_BothCount     = 3,     /*!< BothCount : Enable A match interrupt on up and down counting.             */
} TIMER43_INTCR_T4nAMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ==========================================  TIMER43 INTFLAG T4nFRCIFLAG [7..7]  =========================================== */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nFRCIFLAG                                               */
  TIMER43_INTFLAG_T4nFRCIFLAG_NoRequest = 0,    /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nFRCIFLAG_Request  = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nFRCIFLAG_Enum;

/* ===========================================  TIMER43 INTFLAG T4nCIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nCIFLAG                                                 */
  TIMER43_INTFLAG_T4nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nCIFLAG_Enum;

/* ===========================================  TIMER43 INTFLAG T4nBTIFLAG [5..5]  =========================================== */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nBTIFLAG                                                */
  TIMER43_INTFLAG_T4nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nBTIFLAG_Enum;

/* ===========================================  TIMER43 INTFLAG T4nPMIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nPMIFLAG                                                */
  TIMER43_INTFLAG_T4nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nPMIFLAG_Enum;

/* ===========================================  TIMER43 INTFLAG T4nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nBMIFLAG                                                */
  TIMER43_INTFLAG_T4nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nBMIFLAG_Enum;

/* ===========================================  TIMER43 INTFLAG T4nAMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER43_INTFLAG_T4nAMIFLAG                                                */
  TIMER43_INTFLAG_T4nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER43_INTFLAG_T4nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER43_INTFLAG_T4nAMIFLAG_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER43 ADTCR T4nBTTG [9..9]  ============================================== */
typedef enum {                                  /*!< TIMER43_ADTCR_T4nBTTG                                                     */
  TIMER43_ADTCR_T4nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER43_ADTCR_T4nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER43_ADTCR_T4nBTTG_Enum;

/* =============================================  TIMER43 ADTCR T4nPMTG [8..8]  ============================================== */
typedef enum {                                  /*!< TIMER43_ADTCR_T4nPMTG                                                     */
  TIMER43_ADTCR_T4nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER43_ADTCR_T4nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER43_ADTCR_T4nPMTG_Enum;

/* =============================================  TIMER43 ADTCR T4nBMTG [2..3]  ============================================== */
typedef enum {                                  /*!< TIMER43_ADTCR_T4nBMTG                                                     */
  TIMER43_ADTCR_T4nBMTG_DisableUpdown  = 0,     /*!< DisableUpdown : Disable ADC trigger signal generator by B match.          */
  TIMER43_ADTCR_T4nBMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by B match on
                                                     up counting.                                                              */
  TIMER43_ADTCR_T4nBMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by B match on
                                                     down counting.                                                            */
  TIMER43_ADTCR_T4nBMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by B match on
                                                     up and down counting.                                                     */
} TIMER43_ADTCR_T4nBMTG_Enum;

/* =============================================  TIMER43 ADTCR T4nAMTG [0..1]  ============================================== */
typedef enum {                                  /*!< TIMER43_ADTCR_T4nAMTG                                                     */
  TIMER43_ADTCR_T4nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A match.                */
  TIMER43_ADTCR_T4nAMTG_UpCount        = 1,     /*!< UpCount : Enable ADC trigger signal generator by A match on
                                                     up counting.                                                              */
  TIMER43_ADTCR_T4nAMTG_DownCount      = 2,     /*!< DownCount : Enable ADC trigger signal generator by A match on
                                                     down counting.                                                            */
  TIMER43_ADTCR_T4nAMTG_BothCount      = 3,     /*!< BothCount : Enable ADC trigger signal generator by A match on
                                                     up and down counting.                                                     */
} TIMER43_ADTCR_T4nAMTG_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER5n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==============================================  TIMER5n CR T5nCLEN [20..20]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCLEN                                                        */
  TIMER5n_CR_T5nCLEN_Disable           = 0,     /*!< Disable : Disable counter clear input.                                    */
  TIMER5n_CR_T5nCLEN_Enable            = 1,     /*!< Enable : Enable counter clear input at a valid edge by TnINPOL[1:0]
                                                     bits.                                                                     */
} TIMER5n_CR_T5nCLEN_Enum;

/* =============================================  TIMER5n CR T5nINSEL [18..19]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nINSEL                                                       */
  TIMER5n_CR_T5nINSEL_ExtClock         = 0,     /*!< ExtClock : Select the external clock.                                     */
  TIMER5n_CR_T5nINSEL_XSOSC            = 1,     /*!< XSOSC : Select XSOSC.                                                     */
  TIMER5n_CR_T5nINSEL_WDTRC            = 2,     /*!< WDTRC : Select WDTRC.                                                     */
} TIMER5n_CR_T5nINSEL_Enum;

/* =============================================  TIMER5n CR T5nINPOL [16..17]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nINPOL                                                       */
  TIMER5n_CR_T5nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture or 'Counter Clear Input' on Falling Edge            */
  TIMER5n_CR_T5nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture or 'Counter Clear Input' on Rising Edge              */
  TIMER5n_CR_T5nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture or 'Counter Clear Input' on both of Falling
                                                     and Rising Edge                                                           */
} TIMER5n_CR_T5nINPOL_Enum;

/* ===============================================  TIMER5n CR T5nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nEN                                                          */
  TIMER5n_CR_T5nEN_Disable             = 0,     /*!< Disable : Disable the timer operation.                                    */
  TIMER5n_CR_T5nEN_Enable              = 1,     /*!< Enable : Enable the timer operation.                                      */
} TIMER5n_CR_T5nEN_Enum;

/* ==============================================  TIMER5n CR T5nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCLK                                                         */
  TIMER5n_CR_T5nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER5n_CR_T5nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER5n_CR_T5nCLK_Enum;

/* ===============================================  TIMER5n CR T5nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nMS                                                          */
  TIMER5n_CR_T5nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (T5nOUT: toggle at A-match)                 */
  TIMER5n_CR_T5nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The A-match interrupt can occur)             */
  TIMER5n_CR_T5nMS_OneShotMode         = 2,     /*!< OneShotMode : PPG one-shot mode. (T5nOUT: Programmable pulse
                                                     output)                                                                   */
  TIMER5n_CR_T5nMS_PWMMode             = 3,     /*!< PWMMode : PPG repeat mode. (T5nOUT: Programmable pulse output)            */
} TIMER5n_CR_T5nMS_Enum;

/* ==============================================  TIMER5n CR T5nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nECE                                                         */
  TIMER5n_CR_T5nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER5n_CR_T5nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER5n_CR_T5nECE_Enum;

/* ===============================================  TIMER5n CR T5nOPOL [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nOPOL                                                        */
  TIMER5n_CR_T5nOPOL_StartHigh         = 0,     /*!< StartHigh : Start high. (T5nOUT is low level at disable)                  */
  TIMER5n_CR_T5nOPOL_StartLow          = 1,     /*!< StartLow : Start low. (T5nOUT is high level at disable)                   */
} TIMER5n_CR_T5nOPOL_Enum;

/* ===============================================  TIMER5n CR T5nPAU [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER5n_CR_T5nPAU                                                         */
  TIMER5n_CR_T5nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER5n_CR_T5nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER5n_CR_T5nPAU_Enum;

/* ===============================================  TIMER5n CR T5nMIEN [7..7]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nMIEN                                                        */
  TIMER5n_CR_T5nMIEN_Disable           = 0,     /*!< Disable : Disable the match interrupt.                                    */
  TIMER5n_CR_T5nMIEN_Enable            = 1,     /*!< Enable : Enable the match interrupt.                                      */
} TIMER5n_CR_T5nMIEN_Enum;

/* ===============================================  TIMER5n CR T5nCIEN [6..6]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCIEN                                                        */
  TIMER5n_CR_T5nCIEN_Disable           = 0,     /*!< Disable : Disable the capture interrupt.                                  */
  TIMER5n_CR_T5nCIEN_Enable            = 1,     /*!< Enable : Enable the capture interrupt.                                    */
} TIMER5n_CR_T5nCIEN_Enum;

/* ==============================================  TIMER5n CR T5nCLIEN [5..5]  =============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCLIEN                                                       */
  TIMER5n_CR_T5nCLIEN_Disable          = 0,     /*!< Disable : Disable the counter clear input interrupt.                      */
  TIMER5n_CR_T5nCLIEN_Enable           = 1,     /*!< Enable : Enable the counter clear input interrupt.                        */
} TIMER5n_CR_T5nCLIEN_Enum;

/* ==============================================  TIMER5n CR T5nMIFLAG [3..3]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nMIFLAG                                                      */
  TIMER5n_CR_T5nMIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER5n_CR_T5nMIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} TIMER5n_CR_T5nMIFLAG_Enum;

/* ==============================================  TIMER5n CR T5nCIFLAG [2..2]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCIFLAG                                                      */
  TIMER5n_CR_T5nCIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER5n_CR_T5nCIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} TIMER5n_CR_T5nCIFLAG_Enum;

/* =============================================  TIMER5n CR T5nCLIFLAG [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER5n_CR_T5nCLIFLAG                                                     */
  TIMER5n_CR_T5nCLIFLAG_NoRequest      = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER5n_CR_T5nCLIFLAG_Request        = 1,     /*!< Request : Request occurred.                                               */
} TIMER5n_CR_T5nCLIFLAG_Enum;

/* ===============================================  TIMER5n CR T5nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER5n_CR_T5nCLR                                                         */
  TIMER5n_CR_T5nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER5n_CR_T5nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER5n_CR_T5nCLR_Enum;

/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER50                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==============================================  TIMER50 CR T5nCLEN [20..20]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCLEN                                                        */
  TIMER50_CR_T5nCLEN_Disable           = 0,     /*!< Disable : Disable counter clear input.                                    */
  TIMER50_CR_T5nCLEN_Enable            = 1,     /*!< Enable : Enable counter clear input at a valid edge by TnINPOL[1:0]
                                                     bits.                                                                     */
} TIMER50_CR_T5nCLEN_Enum;

/* =============================================  TIMER50 CR T5nINSEL [18..19]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nINSEL                                                       */
  TIMER50_CR_T5nINSEL_ExtClock         = 0,     /*!< ExtClock : Select the external clock.                                     */
  TIMER50_CR_T5nINSEL_XSOSC            = 1,     /*!< XSOSC : Select XSOSC.                                                     */
  TIMER50_CR_T5nINSEL_WDTRC            = 2,     /*!< WDTRC : Select WDTRC.                                                     */
} TIMER50_CR_T5nINSEL_Enum;

/* =============================================  TIMER50 CR T5nINPOL [16..17]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nINPOL                                                       */
  TIMER50_CR_T5nINPOL_FallingEdge      = 0,     /*!< FallingEdge : Capture or 'Counter Clear Input' on Falling Edge            */
  TIMER50_CR_T5nINPOL_RisingEdge       = 1,     /*!< RisingEdge : Capture or 'Counter Clear Input' on Rising Edge              */
  TIMER50_CR_T5nINPOL_BothEdge         = 2,     /*!< BothEdge : Capture or 'Counter Clear Input' on both of Falling
                                                     and Rising Edge                                                           */
} TIMER50_CR_T5nINPOL_Enum;

/* ===============================================  TIMER50 CR T5nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nEN                                                          */
  TIMER50_CR_T5nEN_Disable             = 0,     /*!< Disable : Disable the timer operation.                                    */
  TIMER50_CR_T5nEN_Enable              = 1,     /*!< Enable : Enable the timer operation.                                      */
} TIMER50_CR_T5nEN_Enum;

/* ==============================================  TIMER50 CR T5nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCLK                                                         */
  TIMER50_CR_T5nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select the internal prescaled clock.                  */
  TIMER50_CR_T5nCLK_ExtClock           = 1,     /*!< ExtClock : Select the external clock.                                     */
} TIMER50_CR_T5nCLK_Enum;

/* ===============================================  TIMER50 CR T5nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nMS                                                          */
  TIMER50_CR_T5nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (T5nOUT: toggle at A-match)                 */
  TIMER50_CR_T5nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The A-match interrupt can occur)             */
  TIMER50_CR_T5nMS_OneShotMode         = 2,     /*!< OneShotMode : PPG one-shot mode. (T5nOUT: Programmable pulse
                                                     output)                                                                   */
  TIMER50_CR_T5nMS_PWMMode             = 3,     /*!< PWMMode : PPG repeat mode. (T5nOUT: Programmable pulse output)            */
} TIMER50_CR_T5nMS_Enum;

/* ==============================================  TIMER50 CR T5nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nECE                                                         */
  TIMER50_CR_T5nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER50_CR_T5nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER50_CR_T5nECE_Enum;

/* ===============================================  TIMER50 CR T5nOPOL [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nOPOL                                                        */
  TIMER50_CR_T5nOPOL_StartHigh         = 0,     /*!< StartHigh : Start high. (T5nOUT is low level at disable)                  */
  TIMER50_CR_T5nOPOL_StartLow          = 1,     /*!< StartLow : Start low. (T5nOUT is high level at disable)                   */
} TIMER50_CR_T5nOPOL_Enum;

/* ===============================================  TIMER50 CR T5nPAU [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER50_CR_T5nPAU                                                         */
  TIMER50_CR_T5nPAU_Disable            = 0,     /*!< Disable : Continue counting                                               */
  TIMER50_CR_T5nPAU_Enable             = 1,     /*!< Enable : Temporary pause                                                  */
} TIMER50_CR_T5nPAU_Enum;

/* ===============================================  TIMER50 CR T5nMIEN [7..7]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nMIEN                                                        */
  TIMER50_CR_T5nMIEN_Disable           = 0,     /*!< Disable : Disable the match interrupt.                                    */
  TIMER50_CR_T5nMIEN_Enable            = 1,     /*!< Enable : Enable the match interrupt.                                      */
} TIMER50_CR_T5nMIEN_Enum;

/* ===============================================  TIMER50 CR T5nCIEN [6..6]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCIEN                                                        */
  TIMER50_CR_T5nCIEN_Disable           = 0,     /*!< Disable : Disable the capture interrupt.                                  */
  TIMER50_CR_T5nCIEN_Enable            = 1,     /*!< Enable : Enable the capture interrupt.                                    */
} TIMER50_CR_T5nCIEN_Enum;

/* ==============================================  TIMER50 CR T5nCLIEN [5..5]  =============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCLIEN                                                       */
  TIMER50_CR_T5nCLIEN_Disable          = 0,     /*!< Disable : Disable the counter clear input interrupt.                      */
  TIMER50_CR_T5nCLIEN_Enable           = 1,     /*!< Enable : Enable the counter clear input interrupt.                        */
} TIMER50_CR_T5nCLIEN_Enum;

/* ==============================================  TIMER50 CR T5nMIFLAG [3..3]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nMIFLAG                                                      */
  TIMER50_CR_T5nMIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER50_CR_T5nMIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} TIMER50_CR_T5nMIFLAG_Enum;

/* ==============================================  TIMER50 CR T5nCIFLAG [2..2]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCIFLAG                                                      */
  TIMER50_CR_T5nCIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER50_CR_T5nCIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} TIMER50_CR_T5nCIFLAG_Enum;

/* =============================================  TIMER50 CR T5nCLIFLAG [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER50_CR_T5nCLIFLAG                                                     */
  TIMER50_CR_T5nCLIFLAG_NoRequest      = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER50_CR_T5nCLIFLAG_Request        = 1,     /*!< Request : Request occurred.                                               */
} TIMER50_CR_T5nCLIFLAG_Enum;

/* ===============================================  TIMER50 CR T5nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER50_CR_T5nCLR                                                         */
  TIMER50_CR_T5nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER50_CR_T5nCLR_Clear              = 1,     /*!< Clear : Clear Counter and Prescaler. (Automatically cleared
                                                     to '0' after operation)                                                   */
} TIMER50_CR_T5nCLR_Enum;

/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =================================================  ADC CR ADCEN [15..15]  ================================================= */
typedef enum {                                  /*!< ADC_CR_ADCEN                                                              */
  ADC_CR_ADCEN_Disable                 = 0,     /*!< Disable : Disable ADC Module Operation.                                   */
  ADC_CR_ADCEN_Enable                  = 1,     /*!< Enable : Enable ADC Module Operation.                                     */
} ADC_CR_ADCEN_Enum;

/* =================================================  ADC CR TRIG [10..12]  ================================================== */
typedef enum {                                  /*!< ADC_CR_TRIG                                                               */
  ADC_CR_TRIG_ADST                     = 0,     /*!< ADST : Select ADST.                                                       */
  ADC_CR_TRIG_TIMER40                  = 1,     /*!< TIMER40 : Timer 40 Trigger Signals                                        */
  ADC_CR_TRIG_TIMER41                  = 2,     /*!< TIMER41 : Timer 41 Trigger Signals                                        */
  ADC_CR_TRIG_TIMER42                  = 3,     /*!< TIMER42 : Timer 42 Trigger Signals                                        */
  ADC_CR_TRIG_TIMER43                  = 4,     /*!< TIMER43 : Timer 43 Trigger Signals                                        */
  ADC_CR_TRIG_ADTRG                    = 7,     /*!< ADTRG : External ADC Trigger Input                                        */
} ADC_CR_TRIG_Enum;

/* ==================================================  ADC CR ETRGP [8..9]  ================================================== */
typedef enum {                                  /*!< ADC_CR_ETRGP                                                              */
  ADC_CR_ETRGP_Disable                 = 0,     /*!< Disable : Disable ADC external trigger function.                          */
  ADC_CR_ETRGP_FallingEdge             = 1,     /*!< FallingEdge : Trigger on falling edge                                     */
  ADC_CR_ETRGP_RisingEdge              = 2,     /*!< RisingEdge : Trigger on rising edge                                       */
  ADC_CR_ETRGP_BothEdge                = 3,     /*!< BothEdge : Trigger on both of falling and rising edge                     */
} ADC_CR_ETRGP_Enum;

/* ==================================================  ADC CR ADRDY [7..7]  ================================================== */
typedef enum {                                  /*!< ADC_CR_ADRDY                                                              */
  ADC_CR_ADRDY_Stop                    = 0,     /*!< Stop : Stop subsequent steps.                                             */
  ADC_CR_ADRDY_Ready                   = 1,     /*!< Ready : Ready to convert.                                                 */
} ADC_CR_ADRDY_Enum;

/* ==================================================  ADC CR MDSEL [3..4]  ================================================== */
typedef enum {                                  /*!< ADC_CR_MDSEL                                                              */
  ADC_CR_MDSEL_Single                  = 0,     /*!< Single : Single Conversion Mode                                           */
  ADC_CR_MDSEL_Sequential              = 1,     /*!< Sequential : Sequential Conversion Mode                                   */
  ADC_CR_MDSEL_Continuous              = 2,     /*!< Continuous : Continuous Conversion Mode                                   */
} ADC_CR_MDSEL_Enum;

/* ==================================================  ADC CR ADST [0..0]  =================================================== */
typedef enum {                                  /*!< ADC_CR_ADST                                                               */
  ADC_CR_ADST_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  ADC_CR_ADST_Start                    = 1,     /*!< Start : Trigger signal generation for conversion start.                   */
} ADC_CR_ADST_Enum;

/* =========================================================  OVSCR  ========================================================= */
/* ==============================================  ADC OVSCR OVSMPEN [15..15]  =============================================== */
typedef enum {                                  /*!< ADC_OVSCR_OVSMPEN                                                         */
  ADC_OVSCR_OVSMPEN_Disable            = 0,     /*!< Disable : Disable oversampling.                                           */
  ADC_OVSCR_OVSMPEN_Enable             = 1,     /*!< Enable : Enable oversampling.                                             */
} ADC_OVSCR_OVSMPEN_Enum;

/* ================================================  ADC OVSCR OVSHT [0..3]  ================================================= */
typedef enum {                                  /*!< ADC_OVSCR_OVSHT                                                           */
  ADC_OVSCR_OVSHT_NoShift              = 0,     /*!< NoShift : No shift                                                        */
  ADC_OVSCR_OVSHT_ShiftRight1Bit       = 1,     /*!< ShiftRight1Bit : Shift right 1-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight2Bit       = 2,     /*!< ShiftRight2Bit : Shift right 2-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight3Bit       = 3,     /*!< ShiftRight3Bit : Shift right 3-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight4Bit       = 4,     /*!< ShiftRight4Bit : Shift right 4-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight5Bit       = 5,     /*!< ShiftRight5Bit : Shift right 5-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight6Bit       = 6,     /*!< ShiftRight6Bit : Shift right 6-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight7Bit       = 7,     /*!< ShiftRight7Bit : Shift right 7-bit                                        */
  ADC_OVSCR_OVSHT_ShiftRight8Bit       = 8,     /*!< ShiftRight8Bit : Shift right 8-bit                                        */
} ADC_OVSCR_OVSHT_Enum;

/* =========================================================  IESR  ========================================================== */
/* ===============================================  ADC IESR STBIEN [11..11]  ================================================ */
typedef enum {                                  /*!< ADC_IESR_STBIEN                                                           */
  ADC_IESR_STBIEN_Disable              = 0,     /*!< Disable : Disable stabilization interrupt.                                */
  ADC_IESR_STBIEN_Enable               = 1,     /*!< Enable : Enable stabilization interrupt.                                  */
} ADC_IESR_STBIEN_Enum;

/* ==============================================  ADC IESR OVRUNIEN [10..10]  =============================================== */
typedef enum {                                  /*!< ADC_IESR_OVRUNIEN                                                         */
  ADC_IESR_OVRUNIEN_Disable            = 0,     /*!< Disable : Disable overrun interrupt.                                      */
  ADC_IESR_OVRUNIEN_Enable             = 1,     /*!< Enable : Enable overrun interrupt.                                        */
} ADC_IESR_OVRUNIEN_Enum;

/* ================================================  ADC IESR EOCIEN [9..9]  ================================================= */
typedef enum {                                  /*!< ADC_IESR_EOCIEN                                                           */
  ADC_IESR_EOCIEN_Disable              = 0,     /*!< Disable : Disable end of conversion interrupt.                            */
  ADC_IESR_EOCIEN_Enable               = 1,     /*!< Enable : Enable end of conversion interrupt.                              */
} ADC_IESR_EOCIEN_Enum;

/* ================================================  ADC IESR EOSIEN [8..8]  ================================================= */
typedef enum {                                  /*!< ADC_IESR_EOSIEN                                                           */
  ADC_IESR_EOSIEN_Disable              = 0,     /*!< Disable : Disable end of sequence interrupt.                              */
  ADC_IESR_EOSIEN_Enable               = 1,     /*!< Enable : Enable end of sequence interrupt.                                */
} ADC_IESR_EOSIEN_Enum;

/* ===============================================  ADC IESR STBIFLAG [3..3]  ================================================ */
typedef enum {                                  /*!< ADC_IESR_STBIFLAG                                                         */
  ADC_IESR_STBIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  ADC_IESR_STBIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} ADC_IESR_STBIFLAG_Enum;

/* ==============================================  ADC IESR OVRUNIFLAG [2..2]  =============================================== */
typedef enum {                                  /*!< ADC_IESR_OVRUNIFLAG                                                       */
  ADC_IESR_OVRUNIFLAG_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  ADC_IESR_OVRUNIFLAG_Request          = 1,     /*!< Request : Request occurred.                                               */
} ADC_IESR_OVRUNIFLAG_Enum;

/* ===============================================  ADC IESR EOCIFLAG [1..1]  ================================================ */
typedef enum {                                  /*!< ADC_IESR_EOCIFLAG                                                         */
  ADC_IESR_EOCIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  ADC_IESR_EOCIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} ADC_IESR_EOCIFLAG_Enum;

/* ===============================================  ADC IESR EOSIFLAG [0..0]  ================================================ */
typedef enum {                                  /*!< ADC_IESR_EOSIFLAG                                                         */
  ADC_IESR_EOSIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  ADC_IESR_EOSIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} ADC_IESR_EOSIFLAG_Enum;

/* ==========================================================  DR  =========================================================== */
/* =========================================================  PREDR  ========================================================= */
/* =========================================================  SAMR  ========================================================== */
/* ========================================================  CHSELR  ========================================================= */
/* ===============================================  ADC CHSELR AN19 [19..19]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN19                                                           */
  ADC_CHSELR_AN19_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN19_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN19_Enum;

/* ===============================================  ADC CHSELR AN18 [18..18]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN18                                                           */
  ADC_CHSELR_AN18_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN18_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN18_Enum;

/* ===============================================  ADC CHSELR AN16 [16..16]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN16                                                           */
  ADC_CHSELR_AN16_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN16_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN16_Enum;

/* ===============================================  ADC CHSELR AN15 [15..15]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN15                                                           */
  ADC_CHSELR_AN15_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN15_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN15_Enum;

/* ===============================================  ADC CHSELR AN14 [14..14]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN14                                                           */
  ADC_CHSELR_AN14_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN14_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN14_Enum;

/* ===============================================  ADC CHSELR AN13 [13..13]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN13                                                           */
  ADC_CHSELR_AN13_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN13_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN13_Enum;

/* ===============================================  ADC CHSELR AN12 [12..12]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN12                                                           */
  ADC_CHSELR_AN12_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN12_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN12_Enum;

/* ===============================================  ADC CHSELR AN11 [11..11]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN11                                                           */
  ADC_CHSELR_AN11_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN11_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN11_Enum;

/* ===============================================  ADC CHSELR AN10 [10..10]  ================================================ */
typedef enum {                                  /*!< ADC_CHSELR_AN10                                                           */
  ADC_CHSELR_AN10_NotSelected          = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN10_Selected             = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN10_Enum;

/* =================================================  ADC CHSELR AN9 [9..9]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN9                                                            */
  ADC_CHSELR_AN9_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN9_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN9_Enum;

/* =================================================  ADC CHSELR AN8 [8..8]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN8                                                            */
  ADC_CHSELR_AN8_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN8_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN8_Enum;

/* =================================================  ADC CHSELR AN7 [7..7]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN7                                                            */
  ADC_CHSELR_AN7_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN7_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN7_Enum;

/* =================================================  ADC CHSELR AN6 [6..6]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN6                                                            */
  ADC_CHSELR_AN6_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN6_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN6_Enum;

/* =================================================  ADC CHSELR AN5 [5..5]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN5                                                            */
  ADC_CHSELR_AN5_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN5_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN5_Enum;

/* =================================================  ADC CHSELR AN4 [4..4]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN4                                                            */
  ADC_CHSELR_AN4_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN4_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN4_Enum;

/* =================================================  ADC CHSELR AN3 [3..3]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN3                                                            */
  ADC_CHSELR_AN3_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN3_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN3_Enum;

/* =================================================  ADC CHSELR AN2 [2..2]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN2                                                            */
  ADC_CHSELR_AN2_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN2_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN2_Enum;

/* =================================================  ADC CHSELR AN1 [1..1]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN1                                                            */
  ADC_CHSELR_AN1_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN1_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN1_Enum;

/* =================================================  ADC CHSELR AN0 [0..0]  ================================================= */
typedef enum {                                  /*!< ADC_CHSELR_AN0                                                            */
  ADC_CHSELR_AN0_NotSelected           = 0,     /*!< NotSelected : ANx is not selected for conversion                          */
  ADC_CHSELR_AN0_Selected              = 1,     /*!< Selected : ANx is selected for conversion                                 */
} ADC_CHSELR_AN0_Enum;



/* =========================================================================================================================== */
/* ================                                           CMPn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  CMPn CR CMPnEN [15..15]  ================================================ */
typedef enum {                                  /*!< CMPn_CR_CMPnEN                                                            */
  CMPn_CR_CMPnEN_Disable               = 0,     /*!< Disable : Disable comparator n operation.                                 */
  CMPn_CR_CMPnEN_Enable                = 1,     /*!< Enable : Enable comparator n operation.                                   */
} CMPn_CR_CMPnEN_Enum;

/* ===============================================  CMPn CR CMPnNEG [12..14]  ================================================ */
typedef enum {                                  /*!< CMPn_CR_CMPnNEG                                                           */
  CMPn_CR_CMPnNEG_CPnN0                = 0,     /*!< CPnN0 : Select external CPnN0 pin.                                        */
  CMPn_CR_CMPnNEG_CPnN1                = 1,     /*!< CPnN1 : Select external CPnN1 pin.                                        */
  CMPn_CR_CMPnNEG_CPnN2                = 2,     /*!< CPnN2 : Select external CPnN2 pin.                                        */
  CMPn_CR_CMPnNEG_CPnN3                = 3,     /*!< CPnN3 : Select external CPnN3 pin. (Reserved on comparator 0)             */
  CMPn_CR_CMPnNEG_IntRef               = 7,     /*!< IntRef : Select internal reference.                                       */
} CMPn_CR_CMPnNEG_Enum;

/* ================================================  CMPn CR CMPnPOS [9..11]  ================================================ */
typedef enum {                                  /*!< CMPn_CR_CMPnPOS                                                           */
  CMPn_CR_CMPnPOS_CPnP0                = 0,     /*!< CPnP0 : Select external CPnP0 pin.                                        */
  CMPn_CR_CMPnPOS_CPnP1                = 1,     /*!< CPnP1 : Select external CPnP1 pin. (CP1POS signal on comparator
                                                     0)                                                                        */
  CMPn_CR_CMPnPOS_CPnP2                = 2,     /*!< CPnP2 : Select external CPnP2 pin. (Reserved on comparator 0)             */
  CMPn_CR_CMPnPOS_CPnP3                = 3,     /*!< CPnP3 : Select external CPnP3 pin. (Reserved on comparator 0)             */
  CMPn_CR_CMPnPOS_CPnP4                = 4,     /*!< CPnP4 : Select external CPnP4 pin. (Reserved on comparator 0)             */
  CMPn_CR_CMPnPOS_CPnP5                = 5,     /*!< CPnP5 : Select external CPnP5 pin. (Reserved on comparator 0)             */
} CMPn_CR_CMPnPOS_Enum;

/* =================================================  CMPn CR HYSnEN [8..8]  ================================================= */
typedef enum {                                  /*!< CMPn_CR_HYSnEN                                                            */
  CMPn_CR_HYSnEN_Disable               = 0,     /*!< Disable : Disable hysteresis function.                                    */
  CMPn_CR_HYSnEN_Enable                = 1,     /*!< Enable : Enable hysteresis function.                                      */
} CMPn_CR_HYSnEN_Enum;

/* ================================================  CMPn CR CMPnSPD [6..6]  ================================================= */
typedef enum {                                  /*!< CMPn_CR_CMPnSPD                                                           */
  CMPn_CR_CMPnSPD_Slow                 = 0,     /*!< Slow : Slow speed                                                         */
  CMPn_CR_CMPnSPD_Fast                 = 1,     /*!< Fast : Fast speed                                                         */
} CMPn_CR_CMPnSPD_Enum;

/* ================================================  CMPn CR CMPnPOL [4..5]  ================================================= */
typedef enum {                                  /*!< CMPn_CR_CMPnPOL                                                           */
  CMPn_CR_CMPnPOL_NoInterrupt          = 0,     /*!< NoInterrupt : No interrupt at any edge                                    */
  CMPn_CR_CMPnPOL_FallingEdge          = 1,     /*!< FallingEdge : Interrupt on falling edge                                   */
  CMPn_CR_CMPnPOL_RisingEdge           = 2,     /*!< RisingEdge : Interrupt on rising edge                                     */
  CMPn_CR_CMPnPOL_BothEdge             = 3,     /*!< BothEdge : Interrupt on both of falling and rising edge                   */
} CMPn_CR_CMPnPOL_Enum;

/* =================================================  CMPn CR NFCKn [0..2]  ================================================== */
typedef enum {                                  /*!< CMPn_CR_NFCKn                                                             */
  CMPn_CR_NFCKn_PCLK1                  = 0,     /*!< PCLK1 : PCLK/1                                                            */
  CMPn_CR_NFCKn_PCLK2                  = 1,     /*!< PCLK2 : PCLK/2                                                            */
  CMPn_CR_NFCKn_PCLK4                  = 2,     /*!< PCLK4 : PCLK/4                                                            */
  CMPn_CR_NFCKn_PCLK8                  = 3,     /*!< PCLK8 : PCLK/8                                                            */
  CMPn_CR_NFCKn_PCLK16                 = 4,     /*!< PCLK16 : PCLK/16                                                          */
  CMPn_CR_NFCKn_PCLK32                 = 5,     /*!< PCLK32 : PCLK/32                                                          */
  CMPn_CR_NFCKn_PCLK64                 = 6,     /*!< PCLK64 : PCLK/64                                                          */
} CMPn_CR_NFCKn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  CMPn SR CMPnIFLAG [4..4]  ================================================ */
typedef enum {                                  /*!< CMPn_SR_CMPnIFLAG                                                         */
  CMPn_SR_CMPnIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  CMPn_SR_CMPnIFLAG_Request            = 1,     /*!< Request : Request occurred. This bit is cleared to '0' when
                                                     write '1'.                                                                */
} CMPn_SR_CMPnIFLAG_Enum;

/* =================================================  CMPn SR CMPnST [0..0]  ================================================= */
typedef enum {                                  /*!< CMPn_SR_CMPnST                                                            */
  CMPn_SR_CMPnST_Low                   = 0,     /*!< Low : Comparator n output is low.                                         */
  CMPn_SR_CMPnST_High                  = 1,     /*!< High : Comparator n output is high.                                       */
} CMPn_SR_CMPnST_Enum;

/* ==========================================================  RCR  ========================================================== */
/* ================================================  CMPn RCR REFnEN [7..7]  ================================================= */
typedef enum {                                  /*!< CMPn_RCR_REFnEN                                                           */
  CMPn_RCR_REFnEN_Disable              = 0,     /*!< Disable : Disable internal reference.                                     */
  CMPn_RCR_REFnEN_Enable               = 1,     /*!< Enable : Enable internal reference.                                       */
} CMPn_RCR_REFnEN_Enum;

/* ================================================  CMPn RCR CMPnREF [0..2]  ================================================ */
typedef enum {                                  /*!< CMPn_RCR_CMPnREF                                                          */
  CMPn_RCR_CMPnREF_2over11VDD          = 0,     /*!< 2over11VDD : Select reference voltage level 0. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_3over11VDD          = 1,     /*!< 3over11VDD : Select reference voltage level 1. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_4over11VDD          = 2,     /*!< 4over11VDD : Select reference voltage level 2. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_5over11VDD          = 3,     /*!< 5over11VDD : Select reference voltage level 3. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_6over11VDD          = 4,     /*!< 6over11VDD : Select reference voltage level 4. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_7over11VDD          = 5,     /*!< 7over11VDD : Select reference voltage level 5. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_8over11VDD          = 6,     /*!< 8over11VDD : Select reference voltage level 6. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMPn_RCR_CMPnREF_9over11VDD          = 7,     /*!< 9over11VDD : Select reference voltage level 7. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
} CMPn_RCR_CMPnREF_Enum;



/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  CMP0 CR CMPnEN [15..15]  ================================================ */
typedef enum {                                  /*!< CMP0_CR_CMPnEN                                                            */
  CMP0_CR_CMPnEN_Disable               = 0,     /*!< Disable : Disable comparator n operation.                                 */
  CMP0_CR_CMPnEN_Enable                = 1,     /*!< Enable : Enable comparator n operation.                                   */
} CMP0_CR_CMPnEN_Enum;

/* ===============================================  CMP0 CR CMPnNEG [12..14]  ================================================ */
typedef enum {                                  /*!< CMP0_CR_CMPnNEG                                                           */
  CMP0_CR_CMPnNEG_CPnN0                = 0,     /*!< CPnN0 : Select external CPnN0 pin.                                        */
  CMP0_CR_CMPnNEG_CPnN1                = 1,     /*!< CPnN1 : Select external CPnN1 pin.                                        */
  CMP0_CR_CMPnNEG_CPnN2                = 2,     /*!< CPnN2 : Select external CPnN2 pin.                                        */
  CMP0_CR_CMPnNEG_CPnN3                = 3,     /*!< CPnN3 : Select external CPnN3 pin. (Reserved on comparator 0)             */
  CMP0_CR_CMPnNEG_IntRef               = 7,     /*!< IntRef : Select internal reference.                                       */
} CMP0_CR_CMPnNEG_Enum;

/* ================================================  CMP0 CR CMPnPOS [9..11]  ================================================ */
typedef enum {                                  /*!< CMP0_CR_CMPnPOS                                                           */
  CMP0_CR_CMPnPOS_CPnP0                = 0,     /*!< CPnP0 : Select external CPnP0 pin.                                        */
  CMP0_CR_CMPnPOS_CPnP1                = 1,     /*!< CPnP1 : Select external CPnP1 pin. (CP1POS signal on comparator
                                                     0)                                                                        */
  CMP0_CR_CMPnPOS_CPnP2                = 2,     /*!< CPnP2 : Select external CPnP2 pin. (Reserved on comparator 0)             */
  CMP0_CR_CMPnPOS_CPnP3                = 3,     /*!< CPnP3 : Select external CPnP3 pin. (Reserved on comparator 0)             */
  CMP0_CR_CMPnPOS_CPnP4                = 4,     /*!< CPnP4 : Select external CPnP4 pin. (Reserved on comparator 0)             */
  CMP0_CR_CMPnPOS_CPnP5                = 5,     /*!< CPnP5 : Select external CPnP5 pin. (Reserved on comparator 0)             */
} CMP0_CR_CMPnPOS_Enum;

/* =================================================  CMP0 CR HYSnEN [8..8]  ================================================= */
typedef enum {                                  /*!< CMP0_CR_HYSnEN                                                            */
  CMP0_CR_HYSnEN_Disable               = 0,     /*!< Disable : Disable hysteresis function.                                    */
  CMP0_CR_HYSnEN_Enable                = 1,     /*!< Enable : Enable hysteresis function.                                      */
} CMP0_CR_HYSnEN_Enum;

/* ================================================  CMP0 CR CMPnSPD [6..6]  ================================================= */
typedef enum {                                  /*!< CMP0_CR_CMPnSPD                                                           */
  CMP0_CR_CMPnSPD_Slow                 = 0,     /*!< Slow : Slow speed                                                         */
  CMP0_CR_CMPnSPD_Fast                 = 1,     /*!< Fast : Fast speed                                                         */
} CMP0_CR_CMPnSPD_Enum;

/* ================================================  CMP0 CR CMPnPOL [4..5]  ================================================= */
typedef enum {                                  /*!< CMP0_CR_CMPnPOL                                                           */
  CMP0_CR_CMPnPOL_NoInterrupt          = 0,     /*!< NoInterrupt : No interrupt at any edge                                    */
  CMP0_CR_CMPnPOL_FallingEdge          = 1,     /*!< FallingEdge : Interrupt on falling edge                                   */
  CMP0_CR_CMPnPOL_RisingEdge           = 2,     /*!< RisingEdge : Interrupt on rising edge                                     */
  CMP0_CR_CMPnPOL_BothEdge             = 3,     /*!< BothEdge : Interrupt on both of falling and rising edge                   */
} CMP0_CR_CMPnPOL_Enum;

/* =================================================  CMP0 CR NFCKn [0..2]  ================================================== */
typedef enum {                                  /*!< CMP0_CR_NFCKn                                                             */
  CMP0_CR_NFCKn_PCLK1                  = 0,     /*!< PCLK1 : PCLK/1                                                            */
  CMP0_CR_NFCKn_PCLK2                  = 1,     /*!< PCLK2 : PCLK/2                                                            */
  CMP0_CR_NFCKn_PCLK4                  = 2,     /*!< PCLK4 : PCLK/4                                                            */
  CMP0_CR_NFCKn_PCLK8                  = 3,     /*!< PCLK8 : PCLK/8                                                            */
  CMP0_CR_NFCKn_PCLK16                 = 4,     /*!< PCLK16 : PCLK/16                                                          */
  CMP0_CR_NFCKn_PCLK32                 = 5,     /*!< PCLK32 : PCLK/32                                                          */
  CMP0_CR_NFCKn_PCLK64                 = 6,     /*!< PCLK64 : PCLK/64                                                          */
} CMP0_CR_NFCKn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  CMP0 SR CMPnIFLAG [4..4]  ================================================ */
typedef enum {                                  /*!< CMP0_SR_CMPnIFLAG                                                         */
  CMP0_SR_CMPnIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  CMP0_SR_CMPnIFLAG_Request            = 1,     /*!< Request : Request occurred. This bit is cleared to '0' when
                                                     write '1'.                                                                */
} CMP0_SR_CMPnIFLAG_Enum;

/* =================================================  CMP0 SR CMPnST [0..0]  ================================================= */
typedef enum {                                  /*!< CMP0_SR_CMPnST                                                            */
  CMP0_SR_CMPnST_Low                   = 0,     /*!< Low : Comparator n output is low.                                         */
  CMP0_SR_CMPnST_High                  = 1,     /*!< High : Comparator n output is high.                                       */
} CMP0_SR_CMPnST_Enum;

/* ==========================================================  RCR  ========================================================== */
/* ================================================  CMP0 RCR REFnEN [7..7]  ================================================= */
typedef enum {                                  /*!< CMP0_RCR_REFnEN                                                           */
  CMP0_RCR_REFnEN_Disable              = 0,     /*!< Disable : Disable internal reference.                                     */
  CMP0_RCR_REFnEN_Enable               = 1,     /*!< Enable : Enable internal reference.                                       */
} CMP0_RCR_REFnEN_Enum;

/* ================================================  CMP0 RCR CMPnREF [0..2]  ================================================ */
typedef enum {                                  /*!< CMP0_RCR_CMPnREF                                                          */
  CMP0_RCR_CMPnREF_2over11VDD          = 0,     /*!< 2over11VDD : Select reference voltage level 0. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_3over11VDD          = 1,     /*!< 3over11VDD : Select reference voltage level 1. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_4over11VDD          = 2,     /*!< 4over11VDD : Select reference voltage level 2. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_5over11VDD          = 3,     /*!< 5over11VDD : Select reference voltage level 3. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_6over11VDD          = 4,     /*!< 6over11VDD : Select reference voltage level 4. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_7over11VDD          = 5,     /*!< 7over11VDD : Select reference voltage level 5. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_8over11VDD          = 6,     /*!< 8over11VDD : Select reference voltage level 6. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP0_RCR_CMPnREF_9over11VDD          = 7,     /*!< 9over11VDD : Select reference voltage level 7. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
} CMP0_RCR_CMPnREF_Enum;

/* ========================================================  CMP0_CR  ======================================================== */
/* =============================================  CMP0 CMP0_CR CMPnEN [15..15]  ============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_CMPnEN                                                       */
  CMP0_CMP0_CR_CMPnEN_Disable          = 0,     /*!< Disable : Disable comparator n operation.                                 */
  CMP0_CMP0_CR_CMPnEN_Enable           = 1,     /*!< Enable : Enable comparator n operation.                                   */
} CMP0_CMP0_CR_CMPnEN_Enum;

/* =============================================  CMP0 CMP0_CR CMPnNEG [12..14]  ============================================= */
typedef enum {                                  /*!< CMP0_CMP0_CR_CMPnNEG                                                      */
  CMP0_CMP0_CR_CMPnNEG_CPnN0           = 0,     /*!< CPnN0 : Select external CPnN0 pin.                                        */
  CMP0_CMP0_CR_CMPnNEG_CPnN1           = 1,     /*!< CPnN1 : Select external CPnN1 pin.                                        */
  CMP0_CMP0_CR_CMPnNEG_CPnN2           = 2,     /*!< CPnN2 : Select external CPnN2 pin.                                        */
  CMP0_CMP0_CR_CMPnNEG_IntRef          = 7,     /*!< IntRef : Select internal reference.                                       */
} CMP0_CMP0_CR_CMPnNEG_Enum;

/* =============================================  CMP0 CMP0_CR CMPnPOS [9..11]  ============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_CMPnPOS                                                      */
  CMP0_CMP0_CR_CMPnPOS_CPnP0           = 0,     /*!< CPnP0 : Select external CPnP0 pin.                                        */
  CMP0_CMP0_CR_CMPnPOS_CPnP1           = 1,     /*!< CPnP1 : Select external CPnP1 pin. (CP1POS signal on comparator
                                                     0)                                                                        */
} CMP0_CMP0_CR_CMPnPOS_Enum;

/* ==============================================  CMP0 CMP0_CR HYSnEN [8..8]  =============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_HYSnEN                                                       */
  CMP0_CMP0_CR_HYSnEN_Disable          = 0,     /*!< Disable : Disable hysteresis function.                                    */
  CMP0_CMP0_CR_HYSnEN_Enable           = 1,     /*!< Enable : Enable hysteresis function.                                      */
} CMP0_CMP0_CR_HYSnEN_Enum;

/* ==============================================  CMP0 CMP0_CR CMPnSPD [6..6]  ============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_CMPnSPD                                                      */
  CMP0_CMP0_CR_CMPnSPD_Slow            = 0,     /*!< Slow : Slow speed                                                         */
  CMP0_CMP0_CR_CMPnSPD_Fast            = 1,     /*!< Fast : Fast speed                                                         */
} CMP0_CMP0_CR_CMPnSPD_Enum;

/* ==============================================  CMP0 CMP0_CR CMPnPOL [4..5]  ============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_CMPnPOL                                                      */
  CMP0_CMP0_CR_CMPnPOL_NoInterrupt     = 0,     /*!< NoInterrupt : No interrupt at any edge                                    */
  CMP0_CMP0_CR_CMPnPOL_FallingEdge     = 1,     /*!< FallingEdge : Interrupt on falling edge                                   */
  CMP0_CMP0_CR_CMPnPOL_RisingEdge      = 2,     /*!< RisingEdge : Interrupt on rising edge                                     */
  CMP0_CMP0_CR_CMPnPOL_BothEdge        = 3,     /*!< BothEdge : Interrupt on both of falling and rising edge                   */
} CMP0_CMP0_CR_CMPnPOL_Enum;

/* ===============================================  CMP0 CMP0_CR NFCKn [0..2]  =============================================== */
typedef enum {                                  /*!< CMP0_CMP0_CR_NFCKn                                                        */
  CMP0_CMP0_CR_NFCKn_PCLK1             = 0,     /*!< PCLK1 : PCLK/1                                                            */
  CMP0_CMP0_CR_NFCKn_PCLK2             = 1,     /*!< PCLK2 : PCLK/2                                                            */
  CMP0_CMP0_CR_NFCKn_PCLK4             = 2,     /*!< PCLK4 : PCLK/4                                                            */
  CMP0_CMP0_CR_NFCKn_PCLK8             = 3,     /*!< PCLK8 : PCLK/8                                                            */
  CMP0_CMP0_CR_NFCKn_PCLK16            = 4,     /*!< PCLK16 : PCLK/16                                                          */
  CMP0_CMP0_CR_NFCKn_PCLK32            = 5,     /*!< PCLK32 : PCLK/32                                                          */
  CMP0_CMP0_CR_NFCKn_PCLK64            = 6,     /*!< PCLK64 : PCLK/64                                                          */
} CMP0_CMP0_CR_NFCKn_Enum;



/* =========================================================================================================================== */
/* ================                                           CMP1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  CMP1 CR CMPnEN [15..15]  ================================================ */
typedef enum {                                  /*!< CMP1_CR_CMPnEN                                                            */
  CMP1_CR_CMPnEN_Disable               = 0,     /*!< Disable : Disable comparator n operation.                                 */
  CMP1_CR_CMPnEN_Enable                = 1,     /*!< Enable : Enable comparator n operation.                                   */
} CMP1_CR_CMPnEN_Enum;

/* ===============================================  CMP1 CR CMPnNEG [12..14]  ================================================ */
typedef enum {                                  /*!< CMP1_CR_CMPnNEG                                                           */
  CMP1_CR_CMPnNEG_CPnN0                = 0,     /*!< CPnN0 : Select external CPnN0 pin.                                        */
  CMP1_CR_CMPnNEG_CPnN1                = 1,     /*!< CPnN1 : Select external CPnN1 pin.                                        */
  CMP1_CR_CMPnNEG_CPnN2                = 2,     /*!< CPnN2 : Select external CPnN2 pin.                                        */
  CMP1_CR_CMPnNEG_CPnN3                = 3,     /*!< CPnN3 : Select external CPnN3 pin. (Reserved on comparator 0)             */
  CMP1_CR_CMPnNEG_IntRef               = 7,     /*!< IntRef : Select internal reference.                                       */
} CMP1_CR_CMPnNEG_Enum;

/* ================================================  CMP1 CR CMPnPOS [9..11]  ================================================ */
typedef enum {                                  /*!< CMP1_CR_CMPnPOS                                                           */
  CMP1_CR_CMPnPOS_CPnP0                = 0,     /*!< CPnP0 : Select external CPnP0 pin.                                        */
  CMP1_CR_CMPnPOS_CPnP1                = 1,     /*!< CPnP1 : Select external CPnP1 pin. (CP1POS signal on comparator
                                                     0)                                                                        */
  CMP1_CR_CMPnPOS_CPnP2                = 2,     /*!< CPnP2 : Select external CPnP2 pin. (Reserved on comparator 0)             */
  CMP1_CR_CMPnPOS_CPnP3                = 3,     /*!< CPnP3 : Select external CPnP3 pin. (Reserved on comparator 0)             */
  CMP1_CR_CMPnPOS_CPnP4                = 4,     /*!< CPnP4 : Select external CPnP4 pin. (Reserved on comparator 0)             */
  CMP1_CR_CMPnPOS_CPnP5                = 5,     /*!< CPnP5 : Select external CPnP5 pin. (Reserved on comparator 0)             */
} CMP1_CR_CMPnPOS_Enum;

/* =================================================  CMP1 CR HYSnEN [8..8]  ================================================= */
typedef enum {                                  /*!< CMP1_CR_HYSnEN                                                            */
  CMP1_CR_HYSnEN_Disable               = 0,     /*!< Disable : Disable hysteresis function.                                    */
  CMP1_CR_HYSnEN_Enable                = 1,     /*!< Enable : Enable hysteresis function.                                      */
} CMP1_CR_HYSnEN_Enum;

/* ================================================  CMP1 CR CMPnSPD [6..6]  ================================================= */
typedef enum {                                  /*!< CMP1_CR_CMPnSPD                                                           */
  CMP1_CR_CMPnSPD_Slow                 = 0,     /*!< Slow : Slow speed                                                         */
  CMP1_CR_CMPnSPD_Fast                 = 1,     /*!< Fast : Fast speed                                                         */
} CMP1_CR_CMPnSPD_Enum;

/* ================================================  CMP1 CR CMPnPOL [4..5]  ================================================= */
typedef enum {                                  /*!< CMP1_CR_CMPnPOL                                                           */
  CMP1_CR_CMPnPOL_NoInterrupt          = 0,     /*!< NoInterrupt : No interrupt at any edge                                    */
  CMP1_CR_CMPnPOL_FallingEdge          = 1,     /*!< FallingEdge : Interrupt on falling edge                                   */
  CMP1_CR_CMPnPOL_RisingEdge           = 2,     /*!< RisingEdge : Interrupt on rising edge                                     */
  CMP1_CR_CMPnPOL_BothEdge             = 3,     /*!< BothEdge : Interrupt on both of falling and rising edge                   */
} CMP1_CR_CMPnPOL_Enum;

/* =================================================  CMP1 CR NFCKn [0..2]  ================================================== */
typedef enum {                                  /*!< CMP1_CR_NFCKn                                                             */
  CMP1_CR_NFCKn_PCLK1                  = 0,     /*!< PCLK1 : PCLK/1                                                            */
  CMP1_CR_NFCKn_PCLK2                  = 1,     /*!< PCLK2 : PCLK/2                                                            */
  CMP1_CR_NFCKn_PCLK4                  = 2,     /*!< PCLK4 : PCLK/4                                                            */
  CMP1_CR_NFCKn_PCLK8                  = 3,     /*!< PCLK8 : PCLK/8                                                            */
  CMP1_CR_NFCKn_PCLK16                 = 4,     /*!< PCLK16 : PCLK/16                                                          */
  CMP1_CR_NFCKn_PCLK32                 = 5,     /*!< PCLK32 : PCLK/32                                                          */
  CMP1_CR_NFCKn_PCLK64                 = 6,     /*!< PCLK64 : PCLK/64                                                          */
} CMP1_CR_NFCKn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  CMP1 SR CMPnIFLAG [4..4]  ================================================ */
typedef enum {                                  /*!< CMP1_SR_CMPnIFLAG                                                         */
  CMP1_SR_CMPnIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  CMP1_SR_CMPnIFLAG_Request            = 1,     /*!< Request : Request occurred. This bit is cleared to '0' when
                                                     write '1'.                                                                */
} CMP1_SR_CMPnIFLAG_Enum;

/* =================================================  CMP1 SR CMPnST [0..0]  ================================================= */
typedef enum {                                  /*!< CMP1_SR_CMPnST                                                            */
  CMP1_SR_CMPnST_Low                   = 0,     /*!< Low : Comparator n output is low.                                         */
  CMP1_SR_CMPnST_High                  = 1,     /*!< High : Comparator n output is high.                                       */
} CMP1_SR_CMPnST_Enum;

/* ==========================================================  RCR  ========================================================== */
/* ================================================  CMP1 RCR REFnEN [7..7]  ================================================= */
typedef enum {                                  /*!< CMP1_RCR_REFnEN                                                           */
  CMP1_RCR_REFnEN_Disable              = 0,     /*!< Disable : Disable internal reference.                                     */
  CMP1_RCR_REFnEN_Enable               = 1,     /*!< Enable : Enable internal reference.                                       */
} CMP1_RCR_REFnEN_Enum;

/* ================================================  CMP1 RCR CMPnREF [0..2]  ================================================ */
typedef enum {                                  /*!< CMP1_RCR_CMPnREF                                                          */
  CMP1_RCR_CMPnREF_2over11VDD          = 0,     /*!< 2over11VDD : Select reference voltage level 0. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_3over11VDD          = 1,     /*!< 3over11VDD : Select reference voltage level 1. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_4over11VDD          = 2,     /*!< 4over11VDD : Select reference voltage level 2. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_5over11VDD          = 3,     /*!< 5over11VDD : Select reference voltage level 3. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_6over11VDD          = 4,     /*!< 6over11VDD : Select reference voltage level 4. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_7over11VDD          = 5,     /*!< 7over11VDD : Select reference voltage level 5. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_8over11VDD          = 6,     /*!< 8over11VDD : Select reference voltage level 6. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
  CMP1_RCR_CMPnREF_9over11VDD          = 7,     /*!< 9over11VDD : Select reference voltage level 7. NOTE) Reference
                                                     voltage = (2+k)xVDD/11, k: 0 to 7                                         */
} CMP1_RCR_CMPnREF_Enum;

/* ========================================================  CMP1_CR  ======================================================== */
/* =============================================  CMP1 CMP1_CR CMPnEN [15..15]  ============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_CMPnEN                                                       */
  CMP1_CMP1_CR_CMPnEN_Disable          = 0,     /*!< Disable : Disable comparator n operation.                                 */
  CMP1_CMP1_CR_CMPnEN_Enable           = 1,     /*!< Enable : Enable comparator n operation.                                   */
} CMP1_CMP1_CR_CMPnEN_Enum;

/* =============================================  CMP1 CMP1_CR CMPnNEG [12..14]  ============================================= */
typedef enum {                                  /*!< CMP1_CMP1_CR_CMPnNEG                                                      */
  CMP1_CMP1_CR_CMPnNEG_CPnN0           = 0,     /*!< CPnN0 : Select external CPnN0 pin.                                        */
  CMP1_CMP1_CR_CMPnNEG_CPnN1           = 1,     /*!< CPnN1 : Select external CPnN1 pin.                                        */
  CMP1_CMP1_CR_CMPnNEG_CPnN2           = 2,     /*!< CPnN2 : Select external CPnN2 pin.                                        */
  CMP1_CMP1_CR_CMPnNEG_CPnN3           = 3,     /*!< CPnN3 : Select external CPnN3 pin.                                        */
  CMP1_CMP1_CR_CMPnNEG_IntRef          = 7,     /*!< IntRef : Select internal reference.                                       */
} CMP1_CMP1_CR_CMPnNEG_Enum;

/* =============================================  CMP1 CMP1_CR CMPnPOS [9..11]  ============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_CMPnPOS                                                      */
  CMP1_CMP1_CR_CMPnPOS_CPnP0           = 0,     /*!< CPnP0 : Select external CPnP0 pin.                                        */
  CMP1_CMP1_CR_CMPnPOS_CPnP1           = 1,     /*!< CPnP1 : Select external CPnP1 pin. (CP1POS signal on comparator
                                                     0)                                                                        */
  CMP1_CMP1_CR_CMPnPOS_CPnP2           = 2,     /*!< CPnP2 : Select external CPnP2 pin.                                        */
  CMP1_CMP1_CR_CMPnPOS_CPnP3           = 3,     /*!< CPnP3 : Select external CPnP3 pin.                                        */
  CMP1_CMP1_CR_CMPnPOS_CPnP4           = 4,     /*!< CPnP4 : Select external CPnP4 pin                                         */
  CMP1_CMP1_CR_CMPnPOS_CPnP5           = 5,     /*!< CPnP5 : Select external CPnP5 pin.                                        */
} CMP1_CMP1_CR_CMPnPOS_Enum;

/* ==============================================  CMP1 CMP1_CR HYSnEN [8..8]  =============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_HYSnEN                                                       */
  CMP1_CMP1_CR_HYSnEN_Disable          = 0,     /*!< Disable : Disable hysteresis function.                                    */
  CMP1_CMP1_CR_HYSnEN_Enable           = 1,     /*!< Enable : Enable hysteresis function.                                      */
} CMP1_CMP1_CR_HYSnEN_Enum;

/* ==============================================  CMP1 CMP1_CR CMPnSPD [6..6]  ============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_CMPnSPD                                                      */
  CMP1_CMP1_CR_CMPnSPD_Slow            = 0,     /*!< Slow : Slow speed                                                         */
  CMP1_CMP1_CR_CMPnSPD_Fast            = 1,     /*!< Fast : Fast speed                                                         */
} CMP1_CMP1_CR_CMPnSPD_Enum;

/* ==============================================  CMP1 CMP1_CR CMPnPOL [4..5]  ============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_CMPnPOL                                                      */
  CMP1_CMP1_CR_CMPnPOL_NoInterrupt     = 0,     /*!< NoInterrupt : No interrupt at any edge                                    */
  CMP1_CMP1_CR_CMPnPOL_FallingEdge     = 1,     /*!< FallingEdge : Interrupt on falling edge                                   */
  CMP1_CMP1_CR_CMPnPOL_RisingEdge      = 2,     /*!< RisingEdge : Interrupt on rising edge                                     */
  CMP1_CMP1_CR_CMPnPOL_BothEdge        = 3,     /*!< BothEdge : Interrupt on both of falling and rising edge                   */
} CMP1_CMP1_CR_CMPnPOL_Enum;

/* ===============================================  CMP1 CMP1_CR NFCKn [0..2]  =============================================== */
typedef enum {                                  /*!< CMP1_CMP1_CR_NFCKn                                                        */
  CMP1_CMP1_CR_NFCKn_PCLK1             = 0,     /*!< PCLK1 : PCLK/1                                                            */
  CMP1_CMP1_CR_NFCKn_PCLK2             = 1,     /*!< PCLK2 : PCLK/2                                                            */
  CMP1_CMP1_CR_NFCKn_PCLK4             = 2,     /*!< PCLK4 : PCLK/4                                                            */
  CMP1_CMP1_CR_NFCKn_PCLK8             = 3,     /*!< PCLK8 : PCLK/8                                                            */
  CMP1_CMP1_CR_NFCKn_PCLK16            = 4,     /*!< PCLK16 : PCLK/16                                                          */
  CMP1_CMP1_CR_NFCKn_PCLK32            = 5,     /*!< PCLK32 : PCLK/32                                                          */
  CMP1_CMP1_CR_NFCKn_PCLK64            = 6,     /*!< PCLK64 : PCLK/64                                                          */
} CMP1_CMP1_CR_NFCKn_Enum;



/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART1n CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnMS                                                        */
  USART1n_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART1n_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART1n_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART1n_CR1_USTnMS_Enum;

/* ==============================================  USART1n CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnP                                                         */
  USART1n_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART1n_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART1n_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART1n_CR1_USTnP_Enum;

/* ===============================================  USART1n CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnS                                                         */
  USART1n_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART1n_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART1n_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART1n_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART1n_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART1n_CR1_USTnS_Enum;

/* ================================================  USART1n CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_ORDn                                                          */
  USART1n_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : lsb first                                                      */
  USART1n_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : msb first                                                      */
} USART1n_CR1_ORDn_Enum;

/* ===============================================  USART1n CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_CPOLn                                                         */
  USART1n_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : SCK to 0 when idle                                              */
  USART1n_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : SCK to 1 when idle                                             */
} USART1n_CR1_CPOLn_Enum;

/* ===============================================  USART1n CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_CPHAn                                                         */
  USART1n_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART1n_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART1n_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  CR3  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  RCDR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART10 CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnMS                                                        */
  USART10_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART10_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART10_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART10_CR1_USTnMS_Enum;

/* ==============================================  USART10 CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnP                                                         */
  USART10_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART10_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART10_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART10_CR1_USTnP_Enum;

/* ===============================================  USART10 CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnS                                                         */
  USART10_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART10_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART10_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART10_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART10_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART10_CR1_USTnS_Enum;

/* ================================================  USART10 CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_ORDn                                                          */
  USART10_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : lsb first                                                      */
  USART10_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : msb first                                                      */
} USART10_CR1_ORDn_Enum;

/* ===============================================  USART10 CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_CPOLn                                                         */
  USART10_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : SCK to 0 when idle                                              */
  USART10_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : SCK to 1 when idle                                             */
} USART10_CR1_CPOLn_Enum;

/* ===============================================  USART10 CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_CPHAn                                                         */
  USART10_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART10_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART10_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  CR3  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  RCDR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UARTn BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UARTn_BFR_BFR                                                             */
  UARTn_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UARTn_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UART0 BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UART0_BFR_BFR                                                             */
  UART0_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UART0_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UART1 BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UART1_BFR_BFR                                                             */
  UART1_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UART1_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          LPUART                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* =========================================================  IFSR  ========================================================== */
/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  BCMP  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  RCDR  ========================================================== */
/* =========================================================  DLYDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            SCn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ================================================  SCn CR1 SCnMD [15..15]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_SCnMD                                                             */
  SCn_CR1_SCnMD_SCI                    = 0,     /*!< SCI : Smartcard interface mode (SCnPWR/RST/CLK/DATA/IN)                   */
  SCn_CR1_SCnMD_UART                   = 1,     /*!< UART : UART mode (SCnRXD/TXD)                                             */
} SCn_CR1_SCnMD_Enum;

/* =================================================  SCn CR1 PENn [14..14]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_PENn                                                              */
  SCn_CR1_PENn_Disable                 = 0,     /*!< Disable : Disable parity bit generation and detection.                    */
  SCn_CR1_PENn_Enable                  = 1,     /*!< Enable : Enable parity bit generation and detection                       */
} SCn_CR1_PENn_Enum;

/* ================================================  SCn CR1 PSELn [13..13]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_PSELn                                                             */
  SCn_CR1_PSELn_Odd                    = 0,     /*!< Odd : Odd parity (Odd number of logic '1')                                */
  SCn_CR1_PSELn_Even                   = 1,     /*!< Even : Even parity (Even number of logic '1')                             */
} SCn_CR1_PSELn_Enum;

/* =================================================  SCn CR1 DLENn [9..10]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_DLENn                                                             */
  SCn_CR1_DLENn_5bit                   = 0,     /*!< 5bit : 5bit. Start,D0,D1,D2,D3,D4,(Parity),Stop1,(Stop2)                  */
  SCn_CR1_DLENn_6bit                   = 1,     /*!< 6bit : 6bit. Start,D0,D1,D2,D3,D4,D5,(Parity),Stop1,(Stop2)               */
  SCn_CR1_DLENn_7bit                   = 2,     /*!< 7bit : 7bit. Start,D0,D1,D2,D3,D4,D5,D6,(Parity),Stop1,(Stop2)            */
  SCn_CR1_DLENn_8bit                   = 3,     /*!< 8bit : 8bit. Start,D0,D1,D2,D3,D4,D5,D6,D7,(Parity),Stop1,(Stop2)         */
} SCn_CR1_DLENn_Enum;

/* =================================================  SCn CR1 STOPBn [7..7]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_STOPBn                                                            */
  SCn_CR1_STOPBn_1bit                  = 0,     /*!< 1bit : 1 Stop bit                                                         */
  SCn_CR1_STOPBn_2bit                  = 1,     /*!< 2bit : 2 Stop bits                                                        */
} SCn_CR1_STOPBn_Enum;

/* =================================================  SCn CR1 OVRSn [4..4]  ================================================== */
typedef enum {                                  /*!< SCn_CR1_OVRSn                                                             */
  SCn_CR1_OVRSn_16                     = 0,     /*!< 16 : 16 oversampling                                                      */
  SCn_CR1_OVRSn_8                      = 1,     /*!< 8 : 8 oversampling                                                        */
} SCn_CR1_OVRSn_Enum;

/* ==================================================  SCn CR1 TXEn [3..3]  ================================================== */
typedef enum {                                  /*!< SCn_CR1_TXEn                                                              */
  SCn_CR1_TXEn_Disable                 = 0,     /*!< Disable : Transmitter is disabled.                                        */
  SCn_CR1_TXEn_Enable                  = 1,     /*!< Enable : Transmitter is enabled.                                          */
} SCn_CR1_TXEn_Enum;

/* ==================================================  SCn CR1 RXEn [2..2]  ================================================== */
typedef enum {                                  /*!< SCn_CR1_RXEn                                                              */
  SCn_CR1_RXEn_Disable                 = 0,     /*!< Disable : Receiver is disabled.                                           */
  SCn_CR1_RXEn_Enable                  = 1,     /*!< Enable : Receiver is enabled.                                             */
} SCn_CR1_RXEn_Enum;

/* =================================================  SCn CR1 RTOENn [1..1]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_RTOENn                                                            */
  SCn_CR1_RTOENn_Disable               = 0,     /*!< Disable : Disable receive time out function.                              */
  SCn_CR1_RTOENn_Enable                = 1,     /*!< Enable : Enable receive time out function.                                */
} SCn_CR1_RTOENn_Enum;

/* =================================================  SCn CR1 SCInEN [0..0]  ================================================= */
typedef enum {                                  /*!< SCn_CR1_SCInEN                                                            */
  SCn_CR1_SCInEN_Disable               = 0,     /*!< Disable : Disable SCn block.                                              */
  SCn_CR1_SCInEN_Enable                = 1,     /*!< Enable : Enable SCn block.                                                */
} SCn_CR1_SCInEN_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ================================================  SCn CR2 ACTENn [15..15]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_ACTENn                                                            */
  SCn_CR2_ACTENn_NoEffect              = 0,     /*!< NoEffect : No effect.                                                     */
  SCn_CR2_ACTENn_Enable                = 1,     /*!< Enable : Enable activation and cold reset. (This bit is automatically
                                                     cleared after operation)                                                  */
} SCn_CR2_ACTENn_Enum;

/* ================================================  SCn CR2 WRENn [14..14]  ================================================= */
typedef enum {                                  /*!< SCn_CR2_WRENn                                                             */
  SCn_CR2_WRENn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SCn_CR2_WRENn_Enable                 = 1,     /*!< Enable : Enable warm reset. (This bit is automatically cleared
                                                     after operation)                                                          */
} SCn_CR2_WRENn_Enum;

/* ===============================================  SCn CR2 DACTENn [13..13]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_DACTENn                                                           */
  SCn_CR2_DACTENn_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SCn_CR2_DACTENn_Enable               = 1,     /*!< Enable : Enable deactivation. (This bit is automatically cleared
                                                     after operation)                                                          */
} SCn_CR2_DACTENn_Enum;

/* ================================================  SCn CR2 SCnINST [9..9]  ================================================= */
typedef enum {                                  /*!< SCn_CR2_SCnINST                                                           */
  SCn_CR2_SCnINST_LowLevel             = 0,     /*!< LowLevel : SCnIN pin state at low level                                   */
  SCn_CR2_SCnINST_HighLevel            = 1,     /*!< HighLevel : SCnIN pin state at high level                                 */
} SCn_CR2_SCnINST_Enum;

/* ================================================  SCn CR2 SCnPWRLV [8..8]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_SCnPWRLV                                                          */
  SCn_CR2_SCnPWRLV_LowLevel            = 0,     /*!< LowLevel : SCnPWR pin to low level                                        */
  SCn_CR2_SCnPWRLV_HighLevel           = 1,     /*!< HighLevel : SCnPWR pin to high level                                      */
} SCn_CR2_SCnPWRLV_Enum;

/* ================================================  SCn CR2 SCnRSTLV [7..7]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_SCnRSTLV                                                          */
  SCn_CR2_SCnRSTLV_LowLevel            = 0,     /*!< LowLevel : SCnRST pin to low level                                        */
  SCn_CR2_SCnRSTLV_HighLevel           = 1,     /*!< HighLevel : SCnRST pin to high level                                      */
} SCn_CR2_SCnRSTLV_Enum;

/* ===============================================  SCn CR2 SCnDATALV [6..6]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_SCnDATALV                                                         */
  SCn_CR2_SCnDATALV_LowLevel           = 0,     /*!< LowLevel : SCnDATA pin to low level                                       */
  SCn_CR2_SCnDATALV_HighLevel          = 1,     /*!< HighLevel : The SCnDATA pin is high level with an external pull-up
                                                     resistor and reception mode.                                              */
} SCn_CR2_SCnDATALV_Enum;

/* ================================================  SCn CR2 SCnCLKLV [5..5]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_SCnCLKLV                                                          */
  SCn_CR2_SCnCLKLV_LowLevel            = 0,     /*!< LowLevel : SCnCLK pin to low level on clock generation disable            */
  SCn_CR2_SCnCLKLV_HighLevel           = 1,     /*!< HighLevel : SCnCLK pin to high level on clock generation disable          */
} SCn_CR2_SCnCLKLV_Enum;

/* ================================================  SCn CR2 SCnCLKEN [4..4]  ================================================ */
typedef enum {                                  /*!< SCn_CR2_SCnCLKEN                                                          */
  SCn_CR2_SCnCLKEN_Disable             = 0,     /*!< Disable : Disable smartcard clock generation.                             */
  SCn_CR2_SCnCLKEN_Enable              = 1,     /*!< Enable : Enable smartcard clock generation.                               */
} SCn_CR2_SCnCLKEN_Enum;

/* ================================================  SCn CR2 SCnCLKG [0..3]  ================================================= */
typedef enum {                                  /*!< SCn_CR2_SCnCLKG                                                           */
  SCn_CR2_SCnCLKG_PCLK1                = 0,     /*!< PCLK1 : Smartcard clock (fsc): PCLK/1 with 1/2 duty                       */
  SCn_CR2_SCnCLKG_PCLK2                = 1,     /*!< PCLK2 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SCn_CR2_SCnCLKG_PCLK4                = 2,     /*!< PCLK4 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SCn_CR2_SCnCLKG_PCLK6                = 3,     /*!< PCLK6 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SCn_CR2_SCnCLKG_PCLK8                = 4,     /*!< PCLK8 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SCn_CR2_SCnCLKG_PCLK10               = 5,     /*!< PCLK10 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK12               = 6,     /*!< PCLK12 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK14               = 7,     /*!< PCLK14 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK16               = 8,     /*!< PCLK16 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK18               = 9,     /*!< PCLK18 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK20               = 10,    /*!< PCLK20 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK22               = 11,    /*!< PCLK22 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK24               = 12,    /*!< PCLK24 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK26               = 13,    /*!< PCLK26 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK28               = 14,    /*!< PCLK28 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SCn_CR2_SCnCLKG_PCLK30               = 15,    /*!< PCLK30 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
} SCn_CR2_SCnCLKG_Enum;

/* ==========================================================  CR3  ========================================================== */
/* ===============================================  SCn CR3 ACONDETn [23..23]  =============================================== */
typedef enum {                                  /*!< SCn_CR3_ACONDETn                                                          */
  SCn_CR3_ACONDETn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SCn_CR3_ACONDETn_Enable              = 1,     /*!< Enable : Auto convention detection (This bit is automatically
                                                     cleared after operation)                                                  */
} SCn_CR3_ACONDETn_Enum;

/* ===============================================  SCn CR3 CONSELn [22..22]  ================================================ */
typedef enum {                                  /*!< SCn_CR3_CONSELn                                                           */
  SCn_CR3_CONSELn_DirectConvention     = 0,     /*!< DirectConvention : Direct convention (lsb first shift out, 0:
                                                     Low level, 1: High level)                                                 */
  SCn_CR3_CONSELn_InverseConvention    = 1,     /*!< InverseConvention : Inverse convention (msb first shift out,
                                                     0: High level, 1: low level).                                             */
} SCn_CR3_CONSELn_Enum;

/* ===============================================  SCn CR3 RETRYENn [20..20]  =============================================== */
typedef enum {                                  /*!< SCn_CR3_RETRYENn                                                          */
  SCn_CR3_RETRYENn_Disable             = 0,     /*!< Disable : Disable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
  SCn_CR3_RETRYENn_Enable              = 1,     /*!< Enable : Enable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
} SCn_CR3_RETRYENn_Enum;

/* ==============================================  SCn CR3 DLYRETRYn [16..16]  =============================================== */
typedef enum {                                  /*!< SCn_CR3_DLYRETRYn                                                         */
  SCn_CR3_DLYRETRYn_2D5ETU             = 0,     /*!< 2D5ETU : 2.5 etu delay before re-transmit byte                            */
  SCn_CR3_DLYRETRYn_2D5ETU_EGT         = 1,     /*!< 2D5ETU_EGT : 2.5 etu + 'extra guard time' delay before re-transmit
                                                     byte                                                                      */
} SCn_CR3_DLYRETRYn_Enum;

/* ===============================================  SCn CR3 SCnINPOL [13..14]  =============================================== */
typedef enum {                                  /*!< SCn_CR3_SCnINPOL                                                          */
  SCn_CR3_SCnINPOL_FallingEdge         = 0,     /*!< FallingEdge : Smartcard Insert/Removal on falling edge                    */
  SCn_CR3_SCnINPOL_RisingEdge          = 1,     /*!< RisingEdge : Smartcard Insert/Removal on rising edge                      */
  SCn_CR3_SCnINPOL_BothEdge            = 2,     /*!< BothEdge : Smartcard Insert/Removal on both of falling and rising
                                                     edge                                                                      */
} SCn_CR3_SCnINPOL_Enum;

/* ================================================  SCn CR3 RXCNTENn [8..8]  ================================================ */
typedef enum {                                  /*!< SCn_CR3_RXCNTENn                                                          */
  SCn_CR3_RXCNTENn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SCn_CR3_RXCNTENn_Enable              = 1,     /*!< Enable : Received block length counts every Rx (This bit is
                                                     automatically cleared after the BLEDIFGn bit is set)                      */
} SCn_CR3_RXCNTENn_Enum;

/* ==========================================================  IER  ========================================================== */
/* ===============================================  SCn IER RSTAIENn [23..23]  =============================================== */
typedef enum {                                  /*!< SCn_IER_RSTAIENn                                                          */
  SCn_IER_RSTAIENn_Disable             = 0,     /*!< Disable : Disable reset assertion interrupt.                              */
  SCn_IER_RSTAIENn_Enable              = 1,     /*!< Enable : Enable reset assertion interrupt.                                */
} SCn_IER_RSTAIENn_Enum;

/* ===============================================  SCn IER SERIENn [22..22]  ================================================ */
typedef enum {                                  /*!< SCn_IER_SERIENn                                                           */
  SCn_IER_SERIENn_Disable              = 0,     /*!< Disable : Disable sequence error interrupt.                               */
  SCn_IER_SERIENn_Enable               = 1,     /*!< Enable : Enable sequence error interrupt.                                 */
} SCn_IER_SERIENn_Enum;

/* ===============================================  SCn IER SEDIENn [21..21]  ================================================ */
typedef enum {                                  /*!< SCn_IER_SEDIENn                                                           */
  SCn_IER_SEDIENn_Disable              = 0,     /*!< Disable : Disable sequence end interrupt.                                 */
  SCn_IER_SEDIENn_Enable               = 1,     /*!< Enable : Enable sequence end interrupt.                                   */
} SCn_IER_SEDIENn_Enum;

/* ==============================================  SCn IER CONERIENn [20..20]  =============================================== */
typedef enum {                                  /*!< SCn_IER_CONERIENn                                                         */
  SCn_IER_CONERIENn_Disable            = 0,     /*!< Disable : Disable convention detection error interrupt.                   */
  SCn_IER_CONERIENn_Enable             = 1,     /*!< Enable : Enable convention detection error interrupt.                     */
} SCn_IER_CONERIENn_Enum;

/* ==============================================  SCn IER CONEDIENn [19..19]  =============================================== */
typedef enum {                                  /*!< SCn_IER_CONEDIENn                                                         */
  SCn_IER_CONEDIENn_Disable            = 0,     /*!< Disable : Disable convention detection end interrupt.                     */
  SCn_IER_CONEDIENn_Enable             = 1,     /*!< Enable : Enable convention detection end interrupt.                       */
} SCn_IER_CONEDIENn_Enum;

/* ==============================================  SCn IER TRYERIENn [18..18]  =============================================== */
typedef enum {                                  /*!< SCn_IER_TRYERIENn                                                         */
  SCn_IER_TRYERIENn_Disable            = 0,     /*!< Disable : Disable transmit retry error interrupt.                         */
  SCn_IER_TRYERIENn_Enable             = 1,     /*!< Enable : Enable transmit retry error interrupt.                           */
} SCn_IER_TRYERIENn_Enum;

/* ===============================================  SCn IER SCINIENn [17..17]  =============================================== */
typedef enum {                                  /*!< SCn_IER_SCINIENn                                                          */
  SCn_IER_SCINIENn_Disable             = 0,     /*!< Disable : Disable SCnIN pin valid edge interrupt.                         */
  SCn_IER_SCINIENn_Enable              = 1,     /*!< Enable : Enable SCnIN pin valid edge interrupt.                           */
} SCn_IER_SCINIENn_Enum;

/* ===============================================  SCn IER BLEDIENn [16..16]  =============================================== */
typedef enum {                                  /*!< SCn_IER_BLEDIENn                                                          */
  SCn_IER_BLEDIENn_Disable             = 0,     /*!< Disable : Disable block length count end interrupt.                       */
  SCn_IER_BLEDIENn_Enable              = 1,     /*!< Enable : Enable block length count end interrupt.                         */
} SCn_IER_BLEDIENn_Enum;

/* ================================================  SCn IER RTOIENn [6..6]  ================================================= */
typedef enum {                                  /*!< SCn_IER_RTOIENn                                                           */
  SCn_IER_RTOIENn_Disable              = 0,     /*!< Disable : Disable receive time out interrupt.                             */
  SCn_IER_RTOIENn_Enable               = 1,     /*!< Enable : Enable receive time out interrupt.                               */
} SCn_IER_RTOIENn_Enum;

/* ================================================  SCn IER TXCIENn [2..2]  ================================================= */
typedef enum {                                  /*!< SCn_IER_TXCIENn                                                           */
  SCn_IER_TXCIENn_Disable              = 0,     /*!< Disable : Disable transmit complete interrupt.                            */
  SCn_IER_TXCIENn_Enable               = 1,     /*!< Enable : Enable transmit complete interrupt.                              */
} SCn_IER_TXCIENn_Enum;

/* ================================================  SCn IER RXCIENn [0..0]  ================================================= */
typedef enum {                                  /*!< SCn_IER_RXCIENn                                                           */
  SCn_IER_RXCIENn_Disable              = 0,     /*!< Disable : Disable receive data not empty interrupt.                       */
  SCn_IER_RXCIENn_Enable               = 1,     /*!< Enable : Enable receive data not empty interrupt.                         */
} SCn_IER_RXCIENn_Enum;

/* =========================================================  IFSR  ========================================================== */
/* ==============================================  SCn IFSR RSTAIFGn [23..23]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_RSTAIFGn                                                         */
  SCn_IFSR_RSTAIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_RSTAIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_RSTAIFGn_Enum;

/* ===============================================  SCn IFSR SERIFGn [22..22]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_SERIFGn                                                          */
  SCn_IFSR_SERIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_SERIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_SERIFGn_Enum;

/* ===============================================  SCn IFSR SEDIFGn [21..21]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_SEDIFGn                                                          */
  SCn_IFSR_SEDIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_SEDIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_SEDIFGn_Enum;

/* ==============================================  SCn IFSR CONERIFGn [20..20]  ============================================== */
typedef enum {                                  /*!< SCn_IFSR_CONERIFGn                                                        */
  SCn_IFSR_CONERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_CONERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_CONERIFGn_Enum;

/* ==============================================  SCn IFSR CONEDIFGn [19..19]  ============================================== */
typedef enum {                                  /*!< SCn_IFSR_CONEDIFGn                                                        */
  SCn_IFSR_CONEDIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_CONEDIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_CONEDIFGn_Enum;

/* ==============================================  SCn IFSR TRYERIFGn [18..18]  ============================================== */
typedef enum {                                  /*!< SCn_IFSR_TRYERIFGn                                                        */
  SCn_IFSR_TRYERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_TRYERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_TRYERIFGn_Enum;

/* ==============================================  SCn IFSR SCINIFGn [17..17]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_SCINIFGn                                                         */
  SCn_IFSR_SCINIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_SCINIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_SCINIFGn_Enum;

/* ==============================================  SCn IFSR BLEDIFGn [16..16]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_BLEDIFGn                                                         */
  SCn_IFSR_BLEDIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_BLEDIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_BLEDIFGn_Enum;

/* ===============================================  SCn IFSR RTOIFLAGn [6..6]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_RTOIFLAGn                                                        */
  SCn_IFSR_RTOIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_RTOIFLAGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SCn_IFSR_RTOIFLAGn_Enum;

/* ===============================================  SCn IFSR TXCIFLAGn [2..2]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_TXCIFLAGn                                                        */
  SCn_IFSR_TXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_TXCIFLAGn_Request           = 1,     /*!< Request : The data in the transmit shift register are shifted
                                                     out completely. This bit is cleared to '0' when write '1'.                */
} SCn_IFSR_TXCIFLAGn_Enum;

/* ===============================================  SCn IFSR RXCIFLAGn [0..0]  =============================================== */
typedef enum {                                  /*!< SCn_IFSR_RXCIFLAGn                                                        */
  SCn_IFSR_RXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SCn_IFSR_RXCIFLAGn_Request           = 1,     /*!< Request : There is data in the receive data register. This bit
                                                     is cleared to '0' when write '1'.                                         */
} SCn_IFSR_RXCIFLAGn_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  BCMP  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  EGTR  ========================================================== */
/* =========================================================  T3DR  ========================================================== */
/* =========================================================  T4DR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            SC0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ================================================  SC0 CR1 SCnMD [15..15]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_SCnMD                                                             */
  SC0_CR1_SCnMD_SCI                    = 0,     /*!< SCI : Smartcard interface mode (SCnPWR/RST/CLK/DATA/IN)                   */
  SC0_CR1_SCnMD_UART                   = 1,     /*!< UART : UART mode (SCnRXD/TXD)                                             */
} SC0_CR1_SCnMD_Enum;

/* =================================================  SC0 CR1 PENn [14..14]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_PENn                                                              */
  SC0_CR1_PENn_Disable                 = 0,     /*!< Disable : Disable parity bit generation and detection.                    */
  SC0_CR1_PENn_Enable                  = 1,     /*!< Enable : Enable parity bit generation and detection                       */
} SC0_CR1_PENn_Enum;

/* ================================================  SC0 CR1 PSELn [13..13]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_PSELn                                                             */
  SC0_CR1_PSELn_Odd                    = 0,     /*!< Odd : Odd parity (Odd number of logic '1')                                */
  SC0_CR1_PSELn_Even                   = 1,     /*!< Even : Even parity (Even number of logic '1')                             */
} SC0_CR1_PSELn_Enum;

/* =================================================  SC0 CR1 DLENn [9..10]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_DLENn                                                             */
  SC0_CR1_DLENn_5bit                   = 0,     /*!< 5bit : 5bit. Start,D0,D1,D2,D3,D4,(Parity),Stop1,(Stop2)                  */
  SC0_CR1_DLENn_6bit                   = 1,     /*!< 6bit : 6bit. Start,D0,D1,D2,D3,D4,D5,(Parity),Stop1,(Stop2)               */
  SC0_CR1_DLENn_7bit                   = 2,     /*!< 7bit : 7bit. Start,D0,D1,D2,D3,D4,D5,D6,(Parity),Stop1,(Stop2)            */
  SC0_CR1_DLENn_8bit                   = 3,     /*!< 8bit : 8bit. Start,D0,D1,D2,D3,D4,D5,D6,D7,(Parity),Stop1,(Stop2)         */
} SC0_CR1_DLENn_Enum;

/* =================================================  SC0 CR1 STOPBn [7..7]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_STOPBn                                                            */
  SC0_CR1_STOPBn_1bit                  = 0,     /*!< 1bit : 1 Stop bit                                                         */
  SC0_CR1_STOPBn_2bit                  = 1,     /*!< 2bit : 2 Stop bits                                                        */
} SC0_CR1_STOPBn_Enum;

/* =================================================  SC0 CR1 OVRSn [4..4]  ================================================== */
typedef enum {                                  /*!< SC0_CR1_OVRSn                                                             */
  SC0_CR1_OVRSn_16                     = 0,     /*!< 16 : 16 oversampling                                                      */
  SC0_CR1_OVRSn_8                      = 1,     /*!< 8 : 8 oversampling                                                        */
} SC0_CR1_OVRSn_Enum;

/* ==================================================  SC0 CR1 TXEn [3..3]  ================================================== */
typedef enum {                                  /*!< SC0_CR1_TXEn                                                              */
  SC0_CR1_TXEn_Disable                 = 0,     /*!< Disable : Transmitter is disabled.                                        */
  SC0_CR1_TXEn_Enable                  = 1,     /*!< Enable : Transmitter is enabled.                                          */
} SC0_CR1_TXEn_Enum;

/* ==================================================  SC0 CR1 RXEn [2..2]  ================================================== */
typedef enum {                                  /*!< SC0_CR1_RXEn                                                              */
  SC0_CR1_RXEn_Disable                 = 0,     /*!< Disable : Receiver is disabled.                                           */
  SC0_CR1_RXEn_Enable                  = 1,     /*!< Enable : Receiver is enabled.                                             */
} SC0_CR1_RXEn_Enum;

/* =================================================  SC0 CR1 RTOENn [1..1]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_RTOENn                                                            */
  SC0_CR1_RTOENn_Disable               = 0,     /*!< Disable : Disable receive time out function.                              */
  SC0_CR1_RTOENn_Enable                = 1,     /*!< Enable : Enable receive time out function.                                */
} SC0_CR1_RTOENn_Enum;

/* =================================================  SC0 CR1 SCInEN [0..0]  ================================================= */
typedef enum {                                  /*!< SC0_CR1_SCInEN                                                            */
  SC0_CR1_SCInEN_Disable               = 0,     /*!< Disable : Disable SCn block.                                              */
  SC0_CR1_SCInEN_Enable                = 1,     /*!< Enable : Enable SCn block.                                                */
} SC0_CR1_SCInEN_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ================================================  SC0 CR2 ACTENn [15..15]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_ACTENn                                                            */
  SC0_CR2_ACTENn_NoEffect              = 0,     /*!< NoEffect : No effect.                                                     */
  SC0_CR2_ACTENn_Enable                = 1,     /*!< Enable : Enable activation and cold reset. (This bit is automatically
                                                     cleared after operation)                                                  */
} SC0_CR2_ACTENn_Enum;

/* ================================================  SC0 CR2 WRENn [14..14]  ================================================= */
typedef enum {                                  /*!< SC0_CR2_WRENn                                                             */
  SC0_CR2_WRENn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SC0_CR2_WRENn_Enable                 = 1,     /*!< Enable : Enable warm reset. (This bit is automatically cleared
                                                     after operation)                                                          */
} SC0_CR2_WRENn_Enum;

/* ===============================================  SC0 CR2 DACTENn [13..13]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_DACTENn                                                           */
  SC0_CR2_DACTENn_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SC0_CR2_DACTENn_Enable               = 1,     /*!< Enable : Enable deactivation. (This bit is automatically cleared
                                                     after operation)                                                          */
} SC0_CR2_DACTENn_Enum;

/* ================================================  SC0 CR2 SCnINST [9..9]  ================================================= */
typedef enum {                                  /*!< SC0_CR2_SCnINST                                                           */
  SC0_CR2_SCnINST_LowLevel             = 0,     /*!< LowLevel : SCnIN pin state at low level                                   */
  SC0_CR2_SCnINST_HighLevel            = 1,     /*!< HighLevel : SCnIN pin state at high level                                 */
} SC0_CR2_SCnINST_Enum;

/* ================================================  SC0 CR2 SCnPWRLV [8..8]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_SCnPWRLV                                                          */
  SC0_CR2_SCnPWRLV_LowLevel            = 0,     /*!< LowLevel : SCnPWR pin to low level                                        */
  SC0_CR2_SCnPWRLV_HighLevel           = 1,     /*!< HighLevel : SCnPWR pin to high level                                      */
} SC0_CR2_SCnPWRLV_Enum;

/* ================================================  SC0 CR2 SCnRSTLV [7..7]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_SCnRSTLV                                                          */
  SC0_CR2_SCnRSTLV_LowLevel            = 0,     /*!< LowLevel : SCnRST pin to low level                                        */
  SC0_CR2_SCnRSTLV_HighLevel           = 1,     /*!< HighLevel : SCnRST pin to high level                                      */
} SC0_CR2_SCnRSTLV_Enum;

/* ===============================================  SC0 CR2 SCnDATALV [6..6]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_SCnDATALV                                                         */
  SC0_CR2_SCnDATALV_LowLevel           = 0,     /*!< LowLevel : SCnDATA pin to low level                                       */
  SC0_CR2_SCnDATALV_HighLevel          = 1,     /*!< HighLevel : The SCnDATA pin is high level with an external pull-up
                                                     resistor and reception mode.                                              */
} SC0_CR2_SCnDATALV_Enum;

/* ================================================  SC0 CR2 SCnCLKLV [5..5]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_SCnCLKLV                                                          */
  SC0_CR2_SCnCLKLV_LowLevel            = 0,     /*!< LowLevel : SCnCLK pin to low level on clock generation disable            */
  SC0_CR2_SCnCLKLV_HighLevel           = 1,     /*!< HighLevel : SCnCLK pin to high level on clock generation disable          */
} SC0_CR2_SCnCLKLV_Enum;

/* ================================================  SC0 CR2 SCnCLKEN [4..4]  ================================================ */
typedef enum {                                  /*!< SC0_CR2_SCnCLKEN                                                          */
  SC0_CR2_SCnCLKEN_Disable             = 0,     /*!< Disable : Disable smartcard clock generation.                             */
  SC0_CR2_SCnCLKEN_Enable              = 1,     /*!< Enable : Enable smartcard clock generation.                               */
} SC0_CR2_SCnCLKEN_Enum;

/* ================================================  SC0 CR2 SCnCLKG [0..3]  ================================================= */
typedef enum {                                  /*!< SC0_CR2_SCnCLKG                                                           */
  SC0_CR2_SCnCLKG_PCLK1                = 0,     /*!< PCLK1 : Smartcard clock (fsc): PCLK/1 with 1/2 duty                       */
  SC0_CR2_SCnCLKG_PCLK2                = 1,     /*!< PCLK2 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC0_CR2_SCnCLKG_PCLK4                = 2,     /*!< PCLK4 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC0_CR2_SCnCLKG_PCLK6                = 3,     /*!< PCLK6 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC0_CR2_SCnCLKG_PCLK8                = 4,     /*!< PCLK8 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC0_CR2_SCnCLKG_PCLK10               = 5,     /*!< PCLK10 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK12               = 6,     /*!< PCLK12 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK14               = 7,     /*!< PCLK14 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK16               = 8,     /*!< PCLK16 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK18               = 9,     /*!< PCLK18 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK20               = 10,    /*!< PCLK20 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK22               = 11,    /*!< PCLK22 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK24               = 12,    /*!< PCLK24 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK26               = 13,    /*!< PCLK26 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK28               = 14,    /*!< PCLK28 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC0_CR2_SCnCLKG_PCLK30               = 15,    /*!< PCLK30 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
} SC0_CR2_SCnCLKG_Enum;

/* ==========================================================  CR3  ========================================================== */
/* ===============================================  SC0 CR3 ACONDETn [23..23]  =============================================== */
typedef enum {                                  /*!< SC0_CR3_ACONDETn                                                          */
  SC0_CR3_ACONDETn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SC0_CR3_ACONDETn_Enable              = 1,     /*!< Enable : Auto convention detection (This bit is automatically
                                                     cleared after operation)                                                  */
} SC0_CR3_ACONDETn_Enum;

/* ===============================================  SC0 CR3 CONSELn [22..22]  ================================================ */
typedef enum {                                  /*!< SC0_CR3_CONSELn                                                           */
  SC0_CR3_CONSELn_DirectConvention     = 0,     /*!< DirectConvention : Direct convention (lsb first shift out, 0:
                                                     Low level, 1: High level)                                                 */
  SC0_CR3_CONSELn_InverseConvention    = 1,     /*!< InverseConvention : Inverse convention (msb first shift out,
                                                     0: High level, 1: low level).                                             */
} SC0_CR3_CONSELn_Enum;

/* ===============================================  SC0 CR3 RETRYENn [20..20]  =============================================== */
typedef enum {                                  /*!< SC0_CR3_RETRYENn                                                          */
  SC0_CR3_RETRYENn_Disable             = 0,     /*!< Disable : Disable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
  SC0_CR3_RETRYENn_Enable              = 1,     /*!< Enable : Enable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
} SC0_CR3_RETRYENn_Enum;

/* ==============================================  SC0 CR3 DLYRETRYn [16..16]  =============================================== */
typedef enum {                                  /*!< SC0_CR3_DLYRETRYn                                                         */
  SC0_CR3_DLYRETRYn_2D5ETU             = 0,     /*!< 2D5ETU : 2.5 etu delay before re-transmit byte                            */
  SC0_CR3_DLYRETRYn_2D5ETU_EGT         = 1,     /*!< 2D5ETU_EGT : 2.5 etu + 'extra guard time' delay before re-transmit
                                                     byte                                                                      */
} SC0_CR3_DLYRETRYn_Enum;

/* ===============================================  SC0 CR3 SCnINPOL [13..14]  =============================================== */
typedef enum {                                  /*!< SC0_CR3_SCnINPOL                                                          */
  SC0_CR3_SCnINPOL_FallingEdge         = 0,     /*!< FallingEdge : Smartcard Insert/Removal on falling edge                    */
  SC0_CR3_SCnINPOL_RisingEdge          = 1,     /*!< RisingEdge : Smartcard Insert/Removal on rising edge                      */
  SC0_CR3_SCnINPOL_BothEdge            = 2,     /*!< BothEdge : Smartcard Insert/Removal on both of falling and rising
                                                     edge                                                                      */
} SC0_CR3_SCnINPOL_Enum;

/* ================================================  SC0 CR3 RXCNTENn [8..8]  ================================================ */
typedef enum {                                  /*!< SC0_CR3_RXCNTENn                                                          */
  SC0_CR3_RXCNTENn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SC0_CR3_RXCNTENn_Enable              = 1,     /*!< Enable : Received block length counts every Rx (This bit is
                                                     automatically cleared after the BLEDIFGn bit is set)                      */
} SC0_CR3_RXCNTENn_Enum;

/* ==========================================================  IER  ========================================================== */
/* ===============================================  SC0 IER RSTAIENn [23..23]  =============================================== */
typedef enum {                                  /*!< SC0_IER_RSTAIENn                                                          */
  SC0_IER_RSTAIENn_Disable             = 0,     /*!< Disable : Disable reset assertion interrupt.                              */
  SC0_IER_RSTAIENn_Enable              = 1,     /*!< Enable : Enable reset assertion interrupt.                                */
} SC0_IER_RSTAIENn_Enum;

/* ===============================================  SC0 IER SERIENn [22..22]  ================================================ */
typedef enum {                                  /*!< SC0_IER_SERIENn                                                           */
  SC0_IER_SERIENn_Disable              = 0,     /*!< Disable : Disable sequence error interrupt.                               */
  SC0_IER_SERIENn_Enable               = 1,     /*!< Enable : Enable sequence error interrupt.                                 */
} SC0_IER_SERIENn_Enum;

/* ===============================================  SC0 IER SEDIENn [21..21]  ================================================ */
typedef enum {                                  /*!< SC0_IER_SEDIENn                                                           */
  SC0_IER_SEDIENn_Disable              = 0,     /*!< Disable : Disable sequence end interrupt.                                 */
  SC0_IER_SEDIENn_Enable               = 1,     /*!< Enable : Enable sequence end interrupt.                                   */
} SC0_IER_SEDIENn_Enum;

/* ==============================================  SC0 IER CONERIENn [20..20]  =============================================== */
typedef enum {                                  /*!< SC0_IER_CONERIENn                                                         */
  SC0_IER_CONERIENn_Disable            = 0,     /*!< Disable : Disable convention detection error interrupt.                   */
  SC0_IER_CONERIENn_Enable             = 1,     /*!< Enable : Enable convention detection error interrupt.                     */
} SC0_IER_CONERIENn_Enum;

/* ==============================================  SC0 IER CONEDIENn [19..19]  =============================================== */
typedef enum {                                  /*!< SC0_IER_CONEDIENn                                                         */
  SC0_IER_CONEDIENn_Disable            = 0,     /*!< Disable : Disable convention detection end interrupt.                     */
  SC0_IER_CONEDIENn_Enable             = 1,     /*!< Enable : Enable convention detection end interrupt.                       */
} SC0_IER_CONEDIENn_Enum;

/* ==============================================  SC0 IER TRYERIENn [18..18]  =============================================== */
typedef enum {                                  /*!< SC0_IER_TRYERIENn                                                         */
  SC0_IER_TRYERIENn_Disable            = 0,     /*!< Disable : Disable transmit retry error interrupt.                         */
  SC0_IER_TRYERIENn_Enable             = 1,     /*!< Enable : Enable transmit retry error interrupt.                           */
} SC0_IER_TRYERIENn_Enum;

/* ===============================================  SC0 IER SCINIENn [17..17]  =============================================== */
typedef enum {                                  /*!< SC0_IER_SCINIENn                                                          */
  SC0_IER_SCINIENn_Disable             = 0,     /*!< Disable : Disable SCnIN pin valid edge interrupt.                         */
  SC0_IER_SCINIENn_Enable              = 1,     /*!< Enable : Enable SCnIN pin valid edge interrupt.                           */
} SC0_IER_SCINIENn_Enum;

/* ===============================================  SC0 IER BLEDIENn [16..16]  =============================================== */
typedef enum {                                  /*!< SC0_IER_BLEDIENn                                                          */
  SC0_IER_BLEDIENn_Disable             = 0,     /*!< Disable : Disable block length count end interrupt.                       */
  SC0_IER_BLEDIENn_Enable              = 1,     /*!< Enable : Enable block length count end interrupt.                         */
} SC0_IER_BLEDIENn_Enum;

/* ================================================  SC0 IER RTOIENn [6..6]  ================================================= */
typedef enum {                                  /*!< SC0_IER_RTOIENn                                                           */
  SC0_IER_RTOIENn_Disable              = 0,     /*!< Disable : Disable receive time out interrupt.                             */
  SC0_IER_RTOIENn_Enable               = 1,     /*!< Enable : Enable receive time out interrupt.                               */
} SC0_IER_RTOIENn_Enum;

/* ================================================  SC0 IER TXCIENn [2..2]  ================================================= */
typedef enum {                                  /*!< SC0_IER_TXCIENn                                                           */
  SC0_IER_TXCIENn_Disable              = 0,     /*!< Disable : Disable transmit complete interrupt.                            */
  SC0_IER_TXCIENn_Enable               = 1,     /*!< Enable : Enable transmit complete interrupt.                              */
} SC0_IER_TXCIENn_Enum;

/* ================================================  SC0 IER RXCIENn [0..0]  ================================================= */
typedef enum {                                  /*!< SC0_IER_RXCIENn                                                           */
  SC0_IER_RXCIENn_Disable              = 0,     /*!< Disable : Disable receive data not empty interrupt.                       */
  SC0_IER_RXCIENn_Enable               = 1,     /*!< Enable : Enable receive data not empty interrupt.                         */
} SC0_IER_RXCIENn_Enum;

/* =========================================================  IFSR  ========================================================== */
/* ==============================================  SC0 IFSR RSTAIFGn [23..23]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_RSTAIFGn                                                         */
  SC0_IFSR_RSTAIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_RSTAIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_RSTAIFGn_Enum;

/* ===============================================  SC0 IFSR SERIFGn [22..22]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_SERIFGn                                                          */
  SC0_IFSR_SERIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_SERIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_SERIFGn_Enum;

/* ===============================================  SC0 IFSR SEDIFGn [21..21]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_SEDIFGn                                                          */
  SC0_IFSR_SEDIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_SEDIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_SEDIFGn_Enum;

/* ==============================================  SC0 IFSR CONERIFGn [20..20]  ============================================== */
typedef enum {                                  /*!< SC0_IFSR_CONERIFGn                                                        */
  SC0_IFSR_CONERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_CONERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_CONERIFGn_Enum;

/* ==============================================  SC0 IFSR CONEDIFGn [19..19]  ============================================== */
typedef enum {                                  /*!< SC0_IFSR_CONEDIFGn                                                        */
  SC0_IFSR_CONEDIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_CONEDIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_CONEDIFGn_Enum;

/* ==============================================  SC0 IFSR TRYERIFGn [18..18]  ============================================== */
typedef enum {                                  /*!< SC0_IFSR_TRYERIFGn                                                        */
  SC0_IFSR_TRYERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_TRYERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_TRYERIFGn_Enum;

/* ==============================================  SC0 IFSR SCINIFGn [17..17]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_SCINIFGn                                                         */
  SC0_IFSR_SCINIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_SCINIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_SCINIFGn_Enum;

/* ==============================================  SC0 IFSR BLEDIFGn [16..16]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_BLEDIFGn                                                         */
  SC0_IFSR_BLEDIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_BLEDIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_BLEDIFGn_Enum;

/* ===============================================  SC0 IFSR RTOIFLAGn [6..6]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_RTOIFLAGn                                                        */
  SC0_IFSR_RTOIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_RTOIFLAGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC0_IFSR_RTOIFLAGn_Enum;

/* ===============================================  SC0 IFSR TXCIFLAGn [2..2]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_TXCIFLAGn                                                        */
  SC0_IFSR_TXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_TXCIFLAGn_Request           = 1,     /*!< Request : The data in the transmit shift register are shifted
                                                     out completely. This bit is cleared to '0' when write '1'.                */
} SC0_IFSR_TXCIFLAGn_Enum;

/* ===============================================  SC0 IFSR RXCIFLAGn [0..0]  =============================================== */
typedef enum {                                  /*!< SC0_IFSR_RXCIFLAGn                                                        */
  SC0_IFSR_RXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC0_IFSR_RXCIFLAGn_Request           = 1,     /*!< Request : There is data in the receive data register. This bit
                                                     is cleared to '0' when write '1'.                                         */
} SC0_IFSR_RXCIFLAGn_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  BCMP  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  EGTR  ========================================================== */
/* =========================================================  T3DR  ========================================================== */
/* =========================================================  T4DR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            SC1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ================================================  SC1 CR1 SCnMD [15..15]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_SCnMD                                                             */
  SC1_CR1_SCnMD_SCI                    = 0,     /*!< SCI : Smartcard interface mode (SCnPWR/RST/CLK/DATA/IN)                   */
  SC1_CR1_SCnMD_UART                   = 1,     /*!< UART : UART mode (SCnRXD/TXD)                                             */
} SC1_CR1_SCnMD_Enum;

/* =================================================  SC1 CR1 PENn [14..14]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_PENn                                                              */
  SC1_CR1_PENn_Disable                 = 0,     /*!< Disable : Disable parity bit generation and detection.                    */
  SC1_CR1_PENn_Enable                  = 1,     /*!< Enable : Enable parity bit generation and detection                       */
} SC1_CR1_PENn_Enum;

/* ================================================  SC1 CR1 PSELn [13..13]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_PSELn                                                             */
  SC1_CR1_PSELn_Odd                    = 0,     /*!< Odd : Odd parity (Odd number of logic '1')                                */
  SC1_CR1_PSELn_Even                   = 1,     /*!< Even : Even parity (Even number of logic '1')                             */
} SC1_CR1_PSELn_Enum;

/* =================================================  SC1 CR1 DLENn [9..10]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_DLENn                                                             */
  SC1_CR1_DLENn_5bit                   = 0,     /*!< 5bit : 5bit. Start,D0,D1,D2,D3,D4,(Parity),Stop1,(Stop2)                  */
  SC1_CR1_DLENn_6bit                   = 1,     /*!< 6bit : 6bit. Start,D0,D1,D2,D3,D4,D5,(Parity),Stop1,(Stop2)               */
  SC1_CR1_DLENn_7bit                   = 2,     /*!< 7bit : 7bit. Start,D0,D1,D2,D3,D4,D5,D6,(Parity),Stop1,(Stop2)            */
  SC1_CR1_DLENn_8bit                   = 3,     /*!< 8bit : 8bit. Start,D0,D1,D2,D3,D4,D5,D6,D7,(Parity),Stop1,(Stop2)         */
} SC1_CR1_DLENn_Enum;

/* =================================================  SC1 CR1 STOPBn [7..7]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_STOPBn                                                            */
  SC1_CR1_STOPBn_1bit                  = 0,     /*!< 1bit : 1 Stop bit                                                         */
  SC1_CR1_STOPBn_2bit                  = 1,     /*!< 2bit : 2 Stop bits                                                        */
} SC1_CR1_STOPBn_Enum;

/* =================================================  SC1 CR1 OVRSn [4..4]  ================================================== */
typedef enum {                                  /*!< SC1_CR1_OVRSn                                                             */
  SC1_CR1_OVRSn_16                     = 0,     /*!< 16 : 16 oversampling                                                      */
  SC1_CR1_OVRSn_8                      = 1,     /*!< 8 : 8 oversampling                                                        */
} SC1_CR1_OVRSn_Enum;

/* ==================================================  SC1 CR1 TXEn [3..3]  ================================================== */
typedef enum {                                  /*!< SC1_CR1_TXEn                                                              */
  SC1_CR1_TXEn_Disable                 = 0,     /*!< Disable : Transmitter is disabled.                                        */
  SC1_CR1_TXEn_Enable                  = 1,     /*!< Enable : Transmitter is enabled.                                          */
} SC1_CR1_TXEn_Enum;

/* ==================================================  SC1 CR1 RXEn [2..2]  ================================================== */
typedef enum {                                  /*!< SC1_CR1_RXEn                                                              */
  SC1_CR1_RXEn_Disable                 = 0,     /*!< Disable : Receiver is disabled.                                           */
  SC1_CR1_RXEn_Enable                  = 1,     /*!< Enable : Receiver is enabled.                                             */
} SC1_CR1_RXEn_Enum;

/* =================================================  SC1 CR1 RTOENn [1..1]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_RTOENn                                                            */
  SC1_CR1_RTOENn_Disable               = 0,     /*!< Disable : Disable receive time out function.                              */
  SC1_CR1_RTOENn_Enable                = 1,     /*!< Enable : Enable receive time out function.                                */
} SC1_CR1_RTOENn_Enum;

/* =================================================  SC1 CR1 SCInEN [0..0]  ================================================= */
typedef enum {                                  /*!< SC1_CR1_SCInEN                                                            */
  SC1_CR1_SCInEN_Disable               = 0,     /*!< Disable : Disable SCn block.                                              */
  SC1_CR1_SCInEN_Enable                = 1,     /*!< Enable : Enable SCn block.                                                */
} SC1_CR1_SCInEN_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ================================================  SC1 CR2 ACTENn [15..15]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_ACTENn                                                            */
  SC1_CR2_ACTENn_NoEffect              = 0,     /*!< NoEffect : No effect.                                                     */
  SC1_CR2_ACTENn_Enable                = 1,     /*!< Enable : Enable activation and cold reset. (This bit is automatically
                                                     cleared after operation)                                                  */
} SC1_CR2_ACTENn_Enum;

/* ================================================  SC1 CR2 WRENn [14..14]  ================================================= */
typedef enum {                                  /*!< SC1_CR2_WRENn                                                             */
  SC1_CR2_WRENn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SC1_CR2_WRENn_Enable                 = 1,     /*!< Enable : Enable warm reset. (This bit is automatically cleared
                                                     after operation)                                                          */
} SC1_CR2_WRENn_Enum;

/* ===============================================  SC1 CR2 DACTENn [13..13]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_DACTENn                                                           */
  SC1_CR2_DACTENn_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SC1_CR2_DACTENn_Enable               = 1,     /*!< Enable : Enable deactivation. (This bit is automatically cleared
                                                     after operation)                                                          */
} SC1_CR2_DACTENn_Enum;

/* ================================================  SC1 CR2 SCnINST [9..9]  ================================================= */
typedef enum {                                  /*!< SC1_CR2_SCnINST                                                           */
  SC1_CR2_SCnINST_LowLevel             = 0,     /*!< LowLevel : SCnIN pin state at low level                                   */
  SC1_CR2_SCnINST_HighLevel            = 1,     /*!< HighLevel : SCnIN pin state at high level                                 */
} SC1_CR2_SCnINST_Enum;

/* ================================================  SC1 CR2 SCnPWRLV [8..8]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_SCnPWRLV                                                          */
  SC1_CR2_SCnPWRLV_LowLevel            = 0,     /*!< LowLevel : SCnPWR pin to low level                                        */
  SC1_CR2_SCnPWRLV_HighLevel           = 1,     /*!< HighLevel : SCnPWR pin to high level                                      */
} SC1_CR2_SCnPWRLV_Enum;

/* ================================================  SC1 CR2 SCnRSTLV [7..7]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_SCnRSTLV                                                          */
  SC1_CR2_SCnRSTLV_LowLevel            = 0,     /*!< LowLevel : SCnRST pin to low level                                        */
  SC1_CR2_SCnRSTLV_HighLevel           = 1,     /*!< HighLevel : SCnRST pin to high level                                      */
} SC1_CR2_SCnRSTLV_Enum;

/* ===============================================  SC1 CR2 SCnDATALV [6..6]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_SCnDATALV                                                         */
  SC1_CR2_SCnDATALV_LowLevel           = 0,     /*!< LowLevel : SCnDATA pin to low level                                       */
  SC1_CR2_SCnDATALV_HighLevel          = 1,     /*!< HighLevel : The SCnDATA pin is high level with an external pull-up
                                                     resistor and reception mode.                                              */
} SC1_CR2_SCnDATALV_Enum;

/* ================================================  SC1 CR2 SCnCLKLV [5..5]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_SCnCLKLV                                                          */
  SC1_CR2_SCnCLKLV_LowLevel            = 0,     /*!< LowLevel : SCnCLK pin to low level on clock generation disable            */
  SC1_CR2_SCnCLKLV_HighLevel           = 1,     /*!< HighLevel : SCnCLK pin to high level on clock generation disable          */
} SC1_CR2_SCnCLKLV_Enum;

/* ================================================  SC1 CR2 SCnCLKEN [4..4]  ================================================ */
typedef enum {                                  /*!< SC1_CR2_SCnCLKEN                                                          */
  SC1_CR2_SCnCLKEN_Disable             = 0,     /*!< Disable : Disable smartcard clock generation.                             */
  SC1_CR2_SCnCLKEN_Enable              = 1,     /*!< Enable : Enable smartcard clock generation.                               */
} SC1_CR2_SCnCLKEN_Enum;

/* ================================================  SC1 CR2 SCnCLKG [0..3]  ================================================= */
typedef enum {                                  /*!< SC1_CR2_SCnCLKG                                                           */
  SC1_CR2_SCnCLKG_PCLK1                = 0,     /*!< PCLK1 : Smartcard clock (fsc): PCLK/1 with 1/2 duty                       */
  SC1_CR2_SCnCLKG_PCLK2                = 1,     /*!< PCLK2 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC1_CR2_SCnCLKG_PCLK4                = 2,     /*!< PCLK4 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC1_CR2_SCnCLKG_PCLK6                = 3,     /*!< PCLK6 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC1_CR2_SCnCLKG_PCLK8                = 4,     /*!< PCLK8 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty             */
  SC1_CR2_SCnCLKG_PCLK10               = 5,     /*!< PCLK10 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK12               = 6,     /*!< PCLK12 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK14               = 7,     /*!< PCLK14 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK16               = 8,     /*!< PCLK16 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK18               = 9,     /*!< PCLK18 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK20               = 10,    /*!< PCLK20 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK22               = 11,    /*!< PCLK22 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK24               = 12,    /*!< PCLK24 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK26               = 13,    /*!< PCLK26 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK28               = 14,    /*!< PCLK28 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
  SC1_CR2_SCnCLKG_PCLK30               = 15,    /*!< PCLK30 : Smartcard clock (fsc): PCLK/(value x 2) with 1/2 duty            */
} SC1_CR2_SCnCLKG_Enum;

/* ==========================================================  CR3  ========================================================== */
/* ===============================================  SC1 CR3 ACONDETn [23..23]  =============================================== */
typedef enum {                                  /*!< SC1_CR3_ACONDETn                                                          */
  SC1_CR3_ACONDETn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SC1_CR3_ACONDETn_Enable              = 1,     /*!< Enable : Auto convention detection (This bit is automatically
                                                     cleared after operation)                                                  */
} SC1_CR3_ACONDETn_Enum;

/* ===============================================  SC1 CR3 CONSELn [22..22]  ================================================ */
typedef enum {                                  /*!< SC1_CR3_CONSELn                                                           */
  SC1_CR3_CONSELn_DirectConvention     = 0,     /*!< DirectConvention : Direct convention (lsb first shift out, 0:
                                                     Low level, 1: High level)                                                 */
  SC1_CR3_CONSELn_InverseConvention    = 1,     /*!< InverseConvention : Inverse convention (msb first shift out,
                                                     0: High level, 1: low level).                                             */
} SC1_CR3_CONSELn_Enum;

/* ===============================================  SC1 CR3 RETRYENn [20..20]  =============================================== */
typedef enum {                                  /*!< SC1_CR3_RETRYENn                                                          */
  SC1_CR3_RETRYENn_Disable             = 0,     /*!< Disable : Disable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
  SC1_CR3_RETRYENn_Enable              = 1,     /*!< Enable : Enable error signal generation/detection and retry
                                                     Rx/Tx.                                                                    */
} SC1_CR3_RETRYENn_Enum;

/* ==============================================  SC1 CR3 DLYRETRYn [16..16]  =============================================== */
typedef enum {                                  /*!< SC1_CR3_DLYRETRYn                                                         */
  SC1_CR3_DLYRETRYn_2D5ETU             = 0,     /*!< 2D5ETU : 2.5 etu delay before re-transmit byte                            */
  SC1_CR3_DLYRETRYn_2D5ETU_EGT         = 1,     /*!< 2D5ETU_EGT : 2.5 etu + 'extra guard time' delay before re-transmit
                                                     byte                                                                      */
} SC1_CR3_DLYRETRYn_Enum;

/* ===============================================  SC1 CR3 SCnINPOL [13..14]  =============================================== */
typedef enum {                                  /*!< SC1_CR3_SCnINPOL                                                          */
  SC1_CR3_SCnINPOL_FallingEdge         = 0,     /*!< FallingEdge : Smartcard Insert/Removal on falling edge                    */
  SC1_CR3_SCnINPOL_RisingEdge          = 1,     /*!< RisingEdge : Smartcard Insert/Removal on rising edge                      */
  SC1_CR3_SCnINPOL_BothEdge            = 2,     /*!< BothEdge : Smartcard Insert/Removal on both of falling and rising
                                                     edge                                                                      */
} SC1_CR3_SCnINPOL_Enum;

/* ================================================  SC1 CR3 RXCNTENn [8..8]  ================================================ */
typedef enum {                                  /*!< SC1_CR3_RXCNTENn                                                          */
  SC1_CR3_RXCNTENn_NoEffect            = 0,     /*!< NoEffect : No effect.                                                     */
  SC1_CR3_RXCNTENn_Enable              = 1,     /*!< Enable : Received block length counts every Rx (This bit is
                                                     automatically cleared after the BLEDIFGn bit is set)                      */
} SC1_CR3_RXCNTENn_Enum;

/* ==========================================================  IER  ========================================================== */
/* ===============================================  SC1 IER RSTAIENn [23..23]  =============================================== */
typedef enum {                                  /*!< SC1_IER_RSTAIENn                                                          */
  SC1_IER_RSTAIENn_Disable             = 0,     /*!< Disable : Disable reset assertion interrupt.                              */
  SC1_IER_RSTAIENn_Enable              = 1,     /*!< Enable : Enable reset assertion interrupt.                                */
} SC1_IER_RSTAIENn_Enum;

/* ===============================================  SC1 IER SERIENn [22..22]  ================================================ */
typedef enum {                                  /*!< SC1_IER_SERIENn                                                           */
  SC1_IER_SERIENn_Disable              = 0,     /*!< Disable : Disable sequence error interrupt.                               */
  SC1_IER_SERIENn_Enable               = 1,     /*!< Enable : Enable sequence error interrupt.                                 */
} SC1_IER_SERIENn_Enum;

/* ===============================================  SC1 IER SEDIENn [21..21]  ================================================ */
typedef enum {                                  /*!< SC1_IER_SEDIENn                                                           */
  SC1_IER_SEDIENn_Disable              = 0,     /*!< Disable : Disable sequence end interrupt.                                 */
  SC1_IER_SEDIENn_Enable               = 1,     /*!< Enable : Enable sequence end interrupt.                                   */
} SC1_IER_SEDIENn_Enum;

/* ==============================================  SC1 IER CONERIENn [20..20]  =============================================== */
typedef enum {                                  /*!< SC1_IER_CONERIENn                                                         */
  SC1_IER_CONERIENn_Disable            = 0,     /*!< Disable : Disable convention detection error interrupt.                   */
  SC1_IER_CONERIENn_Enable             = 1,     /*!< Enable : Enable convention detection error interrupt.                     */
} SC1_IER_CONERIENn_Enum;

/* ==============================================  SC1 IER CONEDIENn [19..19]  =============================================== */
typedef enum {                                  /*!< SC1_IER_CONEDIENn                                                         */
  SC1_IER_CONEDIENn_Disable            = 0,     /*!< Disable : Disable convention detection end interrupt.                     */
  SC1_IER_CONEDIENn_Enable             = 1,     /*!< Enable : Enable convention detection end interrupt.                       */
} SC1_IER_CONEDIENn_Enum;

/* ==============================================  SC1 IER TRYERIENn [18..18]  =============================================== */
typedef enum {                                  /*!< SC1_IER_TRYERIENn                                                         */
  SC1_IER_TRYERIENn_Disable            = 0,     /*!< Disable : Disable transmit retry error interrupt.                         */
  SC1_IER_TRYERIENn_Enable             = 1,     /*!< Enable : Enable transmit retry error interrupt.                           */
} SC1_IER_TRYERIENn_Enum;

/* ===============================================  SC1 IER SCINIENn [17..17]  =============================================== */
typedef enum {                                  /*!< SC1_IER_SCINIENn                                                          */
  SC1_IER_SCINIENn_Disable             = 0,     /*!< Disable : Disable SCnIN pin valid edge interrupt.                         */
  SC1_IER_SCINIENn_Enable              = 1,     /*!< Enable : Enable SCnIN pin valid edge interrupt.                           */
} SC1_IER_SCINIENn_Enum;

/* ===============================================  SC1 IER BLEDIENn [16..16]  =============================================== */
typedef enum {                                  /*!< SC1_IER_BLEDIENn                                                          */
  SC1_IER_BLEDIENn_Disable             = 0,     /*!< Disable : Disable block length count end interrupt.                       */
  SC1_IER_BLEDIENn_Enable              = 1,     /*!< Enable : Enable block length count end interrupt.                         */
} SC1_IER_BLEDIENn_Enum;

/* ================================================  SC1 IER RTOIENn [6..6]  ================================================= */
typedef enum {                                  /*!< SC1_IER_RTOIENn                                                           */
  SC1_IER_RTOIENn_Disable              = 0,     /*!< Disable : Disable receive time out interrupt.                             */
  SC1_IER_RTOIENn_Enable               = 1,     /*!< Enable : Enable receive time out interrupt.                               */
} SC1_IER_RTOIENn_Enum;

/* ================================================  SC1 IER TXCIENn [2..2]  ================================================= */
typedef enum {                                  /*!< SC1_IER_TXCIENn                                                           */
  SC1_IER_TXCIENn_Disable              = 0,     /*!< Disable : Disable transmit complete interrupt.                            */
  SC1_IER_TXCIENn_Enable               = 1,     /*!< Enable : Enable transmit complete interrupt.                              */
} SC1_IER_TXCIENn_Enum;

/* ================================================  SC1 IER RXCIENn [0..0]  ================================================= */
typedef enum {                                  /*!< SC1_IER_RXCIENn                                                           */
  SC1_IER_RXCIENn_Disable              = 0,     /*!< Disable : Disable receive data not empty interrupt.                       */
  SC1_IER_RXCIENn_Enable               = 1,     /*!< Enable : Enable receive data not empty interrupt.                         */
} SC1_IER_RXCIENn_Enum;

/* =========================================================  IFSR  ========================================================== */
/* ==============================================  SC1 IFSR RSTAIFGn [23..23]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_RSTAIFGn                                                         */
  SC1_IFSR_RSTAIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_RSTAIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_RSTAIFGn_Enum;

/* ===============================================  SC1 IFSR SERIFGn [22..22]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_SERIFGn                                                          */
  SC1_IFSR_SERIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_SERIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_SERIFGn_Enum;

/* ===============================================  SC1 IFSR SEDIFGn [21..21]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_SEDIFGn                                                          */
  SC1_IFSR_SEDIFGn_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_SEDIFGn_Request             = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_SEDIFGn_Enum;

/* ==============================================  SC1 IFSR CONERIFGn [20..20]  ============================================== */
typedef enum {                                  /*!< SC1_IFSR_CONERIFGn                                                        */
  SC1_IFSR_CONERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_CONERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_CONERIFGn_Enum;

/* ==============================================  SC1 IFSR CONEDIFGn [19..19]  ============================================== */
typedef enum {                                  /*!< SC1_IFSR_CONEDIFGn                                                        */
  SC1_IFSR_CONEDIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_CONEDIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_CONEDIFGn_Enum;

/* ==============================================  SC1 IFSR TRYERIFGn [18..18]  ============================================== */
typedef enum {                                  /*!< SC1_IFSR_TRYERIFGn                                                        */
  SC1_IFSR_TRYERIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_TRYERIFGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_TRYERIFGn_Enum;

/* ==============================================  SC1 IFSR SCINIFGn [17..17]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_SCINIFGn                                                         */
  SC1_IFSR_SCINIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_SCINIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_SCINIFGn_Enum;

/* ==============================================  SC1 IFSR BLEDIFGn [16..16]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_BLEDIFGn                                                         */
  SC1_IFSR_BLEDIFGn_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_BLEDIFGn_Request            = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_BLEDIFGn_Enum;

/* ===============================================  SC1 IFSR RTOIFLAGn [6..6]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_RTOIFLAGn                                                        */
  SC1_IFSR_RTOIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_RTOIFLAGn_Request           = 1,     /*!< Request : Request occurred, This bit is cleared to '0' when
                                                     write '1'.                                                                */
} SC1_IFSR_RTOIFLAGn_Enum;

/* ===============================================  SC1 IFSR TXCIFLAGn [2..2]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_TXCIFLAGn                                                        */
  SC1_IFSR_TXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_TXCIFLAGn_Request           = 1,     /*!< Request : The data in the transmit shift register are shifted
                                                     out completely. This bit is cleared to '0' when write '1'.                */
} SC1_IFSR_TXCIFLAGn_Enum;

/* ===============================================  SC1 IFSR RXCIFLAGn [0..0]  =============================================== */
typedef enum {                                  /*!< SC1_IFSR_RXCIFLAGn                                                        */
  SC1_IFSR_RXCIFLAGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  SC1_IFSR_RXCIFLAGn_Request           = 1,     /*!< Request : There is data in the receive data register. This bit
                                                     is cleared to '0' when write '1'.                                         */
} SC1_IFSR_RXCIFLAGn_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  BCMP  ========================================================== */
/* =========================================================  RTODR  ========================================================= */
/* =========================================================  EGTR  ========================================================== */
/* =========================================================  T3DR  ========================================================== */
/* =========================================================  T4DR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =================================================  SPIn CR SPInEN [7..7]  ================================================= */
typedef enum {                                  /*!< SPIn_CR_SPInEN                                                            */
  SPIn_CR_SPInEN_Disable               = 0,     /*!< Disable : Disable SPIn operation.                                         */
  SPIn_CR_SPInEN_Enable                = 1,     /*!< Enable : Enable SPIn operation.                                           */
} SPIn_CR_SPInEN_Enum;

/* =================================================  SPIn CR FLSBn [6..6]  ================================================== */
typedef enum {                                  /*!< SPIn_CR_FLSBn                                                             */
  SPIn_CR_FLSBn_msbFirst               = 0,     /*!< msbFirst : msb first                                                      */
  SPIn_CR_FLSBn_lsbFirst               = 1,     /*!< lsbFirst : lsb first                                                      */
} SPIn_CR_FLSBn_Enum;

/* =================================================  SPIn CR SPInMS [5..5]  ================================================= */
typedef enum {                                  /*!< SPIn_CR_SPInMS                                                            */
  SPIn_CR_SPInMS_Slave                 = 0,     /*!< Slave : Slave mode                                                        */
  SPIn_CR_SPInMS_Master                = 1,     /*!< Master : Master mode                                                      */
} SPIn_CR_SPInMS_Enum;

/* ================================================  SPIn CR SPInIEN [3..3]  ================================================= */
typedef enum {                                  /*!< SPIn_CR_SPInIEN                                                           */
  SPIn_CR_SPInIEN_Disable              = 0,     /*!< Disable : Disable SPIn interrupt.                                         */
  SPIn_CR_SPInIEN_Enable               = 1,     /*!< Enable : Enable SPIn interrupt.                                           */
} SPIn_CR_SPInIEN_Enum;

/* =================================================  SPIn CR CPOLn [1..1]  ================================================== */
typedef enum {                                  /*!< SPIn_CR_CPOLn                                                             */
  SPIn_CR_CPOLn_IdleLow                = 0,     /*!< IdleLow : SCK to 0 when idle                                              */
  SPIn_CR_CPOLn_IdleHigh               = 1,     /*!< IdleHigh : SCK to 1 when idle                                             */
} SPIn_CR_CPOLn_Enum;

/* =================================================  SPIn CR CPHAn [0..0]  ================================================== */
typedef enum {                                  /*!< SPIn_CR_CPHAn                                                             */
  SPIn_CR_CPHAn_StartIdle              = 0,     /*!< StartIdle : Start with idle state.                                        */
  SPIn_CR_CPHAn_StartInverted          = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} SPIn_CR_CPHAn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  SPIn SR SPInIFLAG [7..7]  ================================================ */
typedef enum {                                  /*!< SPIn_SR_SPInIFLAG                                                         */
  SPIn_SR_SPInIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SPIn_SR_SPInIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} SPIn_SR_SPInIFLAG_Enum;

/* ================================================  SPIn SR SSnHIGH [4..4]  ================================================= */
typedef enum {                                  /*!< SPIn_SR_SSnHIGH                                                           */
  SPIn_SR_SSnHIGH_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SPIn_SR_SSnHIGH_High                 = 1,     /*!< High : The SSn pin has gone from low level to high                        */
} SPIn_SR_SSnHIGH_Enum;

/* =================================================  SPIn SR FXCHn [1..1]  ================================================== */
typedef enum {                                  /*!< SPIn_SR_FXCHn                                                             */
  SPIn_SR_FXCHn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SPIn_SR_FXCHn_Exchange               = 1,     /*!< Exchange : Exchange MOSIn and MISOn function                              */
} SPIn_SR_FXCHn_Enum;

/* =================================================  SPIn SR SSnEN [0..0]  ================================================== */
typedef enum {                                  /*!< SPIn_SR_SSnEN                                                             */
  SPIn_SR_SSnEN_Disable                = 0,     /*!< Disable : Disable SSn pin operation.                                      */
  SPIn_SR_SSnEN_Enable                 = 1,     /*!< Enable : Enable SSn pin operation.                                        */
} SPIn_SR_SSnEN_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* =========================================================  PREDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =================================================  SPI0 CR SPInEN [7..7]  ================================================= */
typedef enum {                                  /*!< SPI0_CR_SPInEN                                                            */
  SPI0_CR_SPInEN_Disable               = 0,     /*!< Disable : Disable SPIn operation.                                         */
  SPI0_CR_SPInEN_Enable                = 1,     /*!< Enable : Enable SPIn operation.                                           */
} SPI0_CR_SPInEN_Enum;

/* =================================================  SPI0 CR FLSBn [6..6]  ================================================== */
typedef enum {                                  /*!< SPI0_CR_FLSBn                                                             */
  SPI0_CR_FLSBn_msbFirst               = 0,     /*!< msbFirst : msb first                                                      */
  SPI0_CR_FLSBn_lsbFirst               = 1,     /*!< lsbFirst : lsb first                                                      */
} SPI0_CR_FLSBn_Enum;

/* =================================================  SPI0 CR SPInMS [5..5]  ================================================= */
typedef enum {                                  /*!< SPI0_CR_SPInMS                                                            */
  SPI0_CR_SPInMS_Slave                 = 0,     /*!< Slave : Slave mode                                                        */
  SPI0_CR_SPInMS_Master                = 1,     /*!< Master : Master mode                                                      */
} SPI0_CR_SPInMS_Enum;

/* ================================================  SPI0 CR SPInIEN [3..3]  ================================================= */
typedef enum {                                  /*!< SPI0_CR_SPInIEN                                                           */
  SPI0_CR_SPInIEN_Disable              = 0,     /*!< Disable : Disable SPIn interrupt.                                         */
  SPI0_CR_SPInIEN_Enable               = 1,     /*!< Enable : Enable SPIn interrupt.                                           */
} SPI0_CR_SPInIEN_Enum;

/* =================================================  SPI0 CR CPOLn [1..1]  ================================================== */
typedef enum {                                  /*!< SPI0_CR_CPOLn                                                             */
  SPI0_CR_CPOLn_IdleLow                = 0,     /*!< IdleLow : SCK to 0 when idle                                              */
  SPI0_CR_CPOLn_IdleHigh               = 1,     /*!< IdleHigh : SCK to 1 when idle                                             */
} SPI0_CR_CPOLn_Enum;

/* =================================================  SPI0 CR CPHAn [0..0]  ================================================== */
typedef enum {                                  /*!< SPI0_CR_CPHAn                                                             */
  SPI0_CR_CPHAn_StartIdle              = 0,     /*!< StartIdle : Start with idle state.                                        */
  SPI0_CR_CPHAn_StartInverted          = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} SPI0_CR_CPHAn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  SPI0 SR SPInIFLAG [7..7]  ================================================ */
typedef enum {                                  /*!< SPI0_SR_SPInIFLAG                                                         */
  SPI0_SR_SPInIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SPI0_SR_SPInIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} SPI0_SR_SPInIFLAG_Enum;

/* ================================================  SPI0 SR SSnHIGH [4..4]  ================================================= */
typedef enum {                                  /*!< SPI0_SR_SSnHIGH                                                           */
  SPI0_SR_SSnHIGH_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SPI0_SR_SSnHIGH_High                 = 1,     /*!< High : The SSn pin has gone from low level to high                        */
} SPI0_SR_SSnHIGH_Enum;

/* =================================================  SPI0 SR FXCHn [1..1]  ================================================== */
typedef enum {                                  /*!< SPI0_SR_FXCHn                                                             */
  SPI0_SR_FXCHn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SPI0_SR_FXCHn_Exchange               = 1,     /*!< Exchange : Exchange MOSIn and MISOn function                              */
} SPI0_SR_FXCHn_Enum;

/* =================================================  SPI0 SR SSnEN [0..0]  ================================================== */
typedef enum {                                  /*!< SPI0_SR_SSnEN                                                             */
  SPI0_SR_SSnEN_Disable                = 0,     /*!< Disable : Disable SSn pin operation.                                      */
  SPI0_SR_SSnEN_Enable                 = 1,     /*!< Enable : Enable SSn pin operation.                                        */
} SPI0_SR_SSnEN_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* =========================================================  PREDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =================================================  SPI1 CR SPInEN [7..7]  ================================================= */
typedef enum {                                  /*!< SPI1_CR_SPInEN                                                            */
  SPI1_CR_SPInEN_Disable               = 0,     /*!< Disable : Disable SPIn operation.                                         */
  SPI1_CR_SPInEN_Enable                = 1,     /*!< Enable : Enable SPIn operation.                                           */
} SPI1_CR_SPInEN_Enum;

/* =================================================  SPI1 CR FLSBn [6..6]  ================================================== */
typedef enum {                                  /*!< SPI1_CR_FLSBn                                                             */
  SPI1_CR_FLSBn_msbFirst               = 0,     /*!< msbFirst : msb first                                                      */
  SPI1_CR_FLSBn_lsbFirst               = 1,     /*!< lsbFirst : lsb first                                                      */
} SPI1_CR_FLSBn_Enum;

/* =================================================  SPI1 CR SPInMS [5..5]  ================================================= */
typedef enum {                                  /*!< SPI1_CR_SPInMS                                                            */
  SPI1_CR_SPInMS_Slave                 = 0,     /*!< Slave : Slave mode                                                        */
  SPI1_CR_SPInMS_Master                = 1,     /*!< Master : Master mode                                                      */
} SPI1_CR_SPInMS_Enum;

/* ================================================  SPI1 CR SPInIEN [3..3]  ================================================= */
typedef enum {                                  /*!< SPI1_CR_SPInIEN                                                           */
  SPI1_CR_SPInIEN_Disable              = 0,     /*!< Disable : Disable SPIn interrupt.                                         */
  SPI1_CR_SPInIEN_Enable               = 1,     /*!< Enable : Enable SPIn interrupt.                                           */
} SPI1_CR_SPInIEN_Enum;

/* =================================================  SPI1 CR CPOLn [1..1]  ================================================== */
typedef enum {                                  /*!< SPI1_CR_CPOLn                                                             */
  SPI1_CR_CPOLn_IdleLow                = 0,     /*!< IdleLow : SCK to 0 when idle                                              */
  SPI1_CR_CPOLn_IdleHigh               = 1,     /*!< IdleHigh : SCK to 1 when idle                                             */
} SPI1_CR_CPOLn_Enum;

/* =================================================  SPI1 CR CPHAn [0..0]  ================================================== */
typedef enum {                                  /*!< SPI1_CR_CPHAn                                                             */
  SPI1_CR_CPHAn_StartIdle              = 0,     /*!< StartIdle : Start with idle state.                                        */
  SPI1_CR_CPHAn_StartInverted          = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} SPI1_CR_CPHAn_Enum;

/* ==========================================================  SR  =========================================================== */
/* ===============================================  SPI1 SR SPInIFLAG [7..7]  ================================================ */
typedef enum {                                  /*!< SPI1_SR_SPInIFLAG                                                         */
  SPI1_SR_SPInIFLAG_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  SPI1_SR_SPInIFLAG_Request            = 1,     /*!< Request : Request occurred.                                               */
} SPI1_SR_SPInIFLAG_Enum;

/* ================================================  SPI1 SR SSnHIGH [4..4]  ================================================= */
typedef enum {                                  /*!< SPI1_SR_SSnHIGH                                                           */
  SPI1_SR_SSnHIGH_NoEffect             = 0,     /*!< NoEffect : No effect.                                                     */
  SPI1_SR_SSnHIGH_High                 = 1,     /*!< High : The SSn pin has gone from low level to high                        */
} SPI1_SR_SSnHIGH_Enum;

/* =================================================  SPI1 SR FXCHn [1..1]  ================================================== */
typedef enum {                                  /*!< SPI1_SR_FXCHn                                                             */
  SPI1_SR_FXCHn_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  SPI1_SR_FXCHn_Exchange               = 1,     /*!< Exchange : Exchange MOSIn and MISOn function                              */
} SPI1_SR_FXCHn_Enum;

/* =================================================  SPI1 SR SSnEN [0..0]  ================================================== */
typedef enum {                                  /*!< SPI1_SR_SSnEN                                                             */
  SPI1_SR_SSnEN_Disable                = 0,     /*!< Disable : Disable SSn pin operation.                                      */
  SPI1_SR_SSnEN_Enable                 = 1,     /*!< Enable : Enable SSn pin operation.                                        */
} SPI1_SR_SSnEN_Enum;

/* ==========================================================  RDR  ========================================================== */
/* ==========================================================  TDR  ========================================================== */
/* =========================================================  PREDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==================================================  LCD CR IRSEL [6..7]  ================================================== */
typedef enum {                                  /*!< LCD_CR_IRSEL                                                              */
  LCD_CR_IRSEL_RLCD3                   = 0,     /*!< RLCD3 : 105/105/80[kohm] @(1/2)/(1/3)/(1/4) bias                          */
  LCD_CR_IRSEL_RLCD1                   = 1,     /*!< RLCD1 : 10/10/10[kohm] @(1/2)/(1/3)/(1/4) bias                            */
  LCD_CR_IRSEL_RLCD2                   = 2,     /*!< RLCD2 : 66/66/50[kohm] @(1/2)/(1/3)/(1/4) bias                            */
  LCD_CR_IRSEL_RLCD4                   = 3,     /*!< RLCD4 : 320/320/240[kohm] @(1/2)/(1/3)/(1/4) bias                         */
} LCD_CR_IRSEL_Enum;

/* ===================================================  LCD CR DBS [3..5]  =================================================== */
typedef enum {                                  /*!< LCD_CR_DBS                                                                */
  LCD_CR_DBS_8D4B                      = 0,     /*!< 8D4B : 1/8 duty, 1/4 bias                                                 */
  LCD_CR_DBS_6D4B                      = 1,     /*!< 6D4B : 1/6 duty, 1/4 bias                                                 */
  LCD_CR_DBS_5D3B                      = 2,     /*!< 5D3B : 1/5 duty, 1/3 bias                                                 */
  LCD_CR_DBS_4D3B                      = 3,     /*!< 4D3B : 1/4 duty, 1/3 bias                                                 */
  LCD_CR_DBS_3D3B                      = 4,     /*!< 3D3B : 1/3 duty, 1/3 bias                                                 */
  LCD_CR_DBS_3D2B                      = 5,     /*!< 3D2B : 1/3 duty, 1/2 bias                                                 */
} LCD_CR_DBS_Enum;

/* ==================================================  LCD CR LCLK [1..2]  =================================================== */
typedef enum {                                  /*!< LCD_CR_LCLK                                                               */
  LCD_CR_LCLK_128Hz                    = 0,     /*!< 128Hz : 32.768kHz(fLCD) / 256                                             */
  LCD_CR_LCLK_256Hz                    = 1,     /*!< 256Hz : 32.768kHz(fLCD) / 128                                             */
  LCD_CR_LCLK_512Hz                    = 2,     /*!< 512Hz : 32.768kHz(fLCD) / 64                                              */
  LCD_CR_LCLK_1024Hz                   = 3,     /*!< 1024Hz : 32.768kHz(fLCD) / 32                                             */
} LCD_CR_LCLK_Enum;

/* ==================================================  LCD CR DISP [0..0]  =================================================== */
typedef enum {                                  /*!< LCD_CR_DISP                                                               */
  LCD_CR_DISP_Off                      = 0,     /*!< Off : Display off                                                         */
  LCD_CR_DISP_On                       = 1,     /*!< On : Normal display on                                                    */
} LCD_CR_DISP_Enum;

/* =========================================================  BCCR  ========================================================== */
/* ===============================================  LCD BCCR LCDABC [12..12]  ================================================ */
typedef enum {                                  /*!< LCD_BCCR_LCDABC                                                           */
  LCD_BCCR_LCDABC_Off                  = 0,     /*!< Off : LCD automatic bias is off                                           */
  LCD_BCCR_LCDABC_On                   = 1,     /*!< On : LCD automatic bias is on                                             */
} LCD_BCCR_LCDABC_Enum;

/* ================================================  LCD BCCR BMSEL [8..10]  ================================================= */
typedef enum {                                  /*!< LCD_BCCR_BMSEL                                                            */
  LCD_BCCR_BMSEL_BMA1Clk               = 0,     /*!< BMA1Clk : 'Bias Mode A' for 1-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA2Clk               = 1,     /*!< BMA2Clk : 'Bias Mode A' for 2-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA3Clk               = 2,     /*!< BMA3Clk : 'Bias Mode A' for 3-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA4Clk               = 3,     /*!< BMA4Clk : 'Bias Mode A' for 4-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA5Clk               = 4,     /*!< BMA5Clk : 'Bias Mode A' for 5-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA6Clk               = 5,     /*!< BMA6Clk : 'Bias Mode A' for 6-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA7Clk               = 6,     /*!< BMA7Clk : 'Bias Mode A' for 7-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA8Clk               = 7,     /*!< BMA8Clk : 'Bias Mode A' for 8-clock of fLCD                               */
} LCD_BCCR_BMSEL_Enum;

/* =================================================  LCD BCCR LCTEN [5..5]  ================================================= */
typedef enum {                                  /*!< LCD_BCCR_LCTEN                                                            */
  LCD_BCCR_LCTEN_Disable               = 0,     /*!< Disable : Disable LCD driver contrast.                                    */
  LCD_BCCR_LCTEN_Enable                = 1,     /*!< Enable : Enable LCD driver contrast.                                      */
} LCD_BCCR_LCTEN_Enum;

/* =================================================  LCD BCCR VLCD [0..3]  ================================================== */
typedef enum {                                  /*!< LCD_BCCR_VLCD                                                             */
  LCD_BCCR_VLCD_Step0                  = 0,     /*!< Step0 : VDD x 32/47 Step                                                  */
  LCD_BCCR_VLCD_Step1                  = 1,     /*!< Step1 : VDD x 32/46 Step                                                  */
  LCD_BCCR_VLCD_Step2                  = 2,     /*!< Step2 : VDD x 32/45 Step                                                  */
  LCD_BCCR_VLCD_Step3                  = 3,     /*!< Step3 : VDD x 32/44 Step                                                  */
  LCD_BCCR_VLCD_Step4                  = 4,     /*!< Step4 : VDD x 32/43 Step                                                  */
  LCD_BCCR_VLCD_Step5                  = 5,     /*!< Step5 : VDD x 32/42 Step                                                  */
  LCD_BCCR_VLCD_Step6                  = 6,     /*!< Step6 : VDD x 32/41 Step                                                  */
  LCD_BCCR_VLCD_Step7                  = 7,     /*!< Step7 : VDD x 32/40 Step                                                  */
  LCD_BCCR_VLCD_Step8                  = 8,     /*!< Step8 : VDD x 32/39 Step                                                  */
  LCD_BCCR_VLCD_Step9                  = 9,     /*!< Step9 : VDD x 32/38 Step                                                  */
  LCD_BCCR_VLCD_Step10                 = 10,    /*!< Step10 : VDD x 32/37 Step                                                 */
  LCD_BCCR_VLCD_Step11                 = 11,    /*!< Step11 : VDD x 32/36 Step                                                 */
  LCD_BCCR_VLCD_Step12                 = 12,    /*!< Step12 : VDD x 32/35 Step                                                 */
  LCD_BCCR_VLCD_Step13                 = 13,    /*!< Step13 : VDD x 32/34 Step                                                 */
  LCD_BCCR_VLCD_Step14                 = 14,    /*!< Step14 : VDD x 32/33 Step                                                 */
  LCD_BCCR_VLCD_Step15                 = 15,    /*!< Step15 : VDD x 32/32 Step                                                 */
} LCD_BCCR_VLCD_Enum;

/* ==========================================================  DR0  ========================================================== */
/* ==========================================================  DR1  ========================================================== */
/* ==========================================================  DR2  ========================================================== */
/* ==========================================================  DR3  ========================================================== */
/* ==========================================================  DR4  ========================================================== */
/* ==========================================================  DR5  ========================================================== */
/* ==========================================================  DR6  ========================================================== */
/* ==========================================================  DR7  ========================================================== */
/* ==========================================================  DR8  ========================================================== */
/* ==========================================================  DR9  ========================================================== */
/* =========================================================  DR10  ========================================================== */
/* =========================================================  DR11  ========================================================== */
/* =========================================================  DR12  ========================================================== */
/* =========================================================  DR13  ========================================================== */
/* =========================================================  DR14  ========================================================== */
/* =========================================================  DR15  ========================================================== */
/* =========================================================  DR16  ========================================================== */
/* =========================================================  DR17  ========================================================== */
/* =========================================================  DR18  ========================================================== */
/* =========================================================  DR19  ========================================================== */
/* =========================================================  DR20  ========================================================== */
/* =========================================================  DR21  ========================================================== */
/* =========================================================  DR22  ========================================================== */
/* =========================================================  DR23  ========================================================== */
/* =========================================================  DR24  ========================================================== */
/* =========================================================  DR25  ========================================================== */
/* =========================================================  DR26  ========================================================== */
/* =========================================================  DR27  ========================================================== */
/* =========================================================  DR28  ========================================================== */
/* =========================================================  DR29  ========================================================== */
/* =========================================================  DR30  ========================================================== */
/* =========================================================  DR31  ========================================================== */
/* =========================================================  DR32  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  CRC CR INSIZE [14..15]  ================================================= */
typedef enum {                                  /*!< CRC_CR_INSIZE                                                             */
  CRC_CR_INSIZE_32Bit                  = 0,     /*!< 32Bit : 32-bit is the input data size                                     */
  CRC_CR_INSIZE_16Bit                  = 1,     /*!< 16Bit : 16-bit is the input data size                                     */
  CRC_CR_INSIZE_8Bit                   = 2,     /*!< 8Bit : 8-bit is the input data size.                                      */
} CRC_CR_INSIZE_Enum;

/* ================================================  CRC CR INCOMP [10..10]  ================================================= */
typedef enum {                                  /*!< CRC_CR_INCOMP                                                             */
  CRC_CR_INCOMP_Disable                = 0,     /*!< Disable : No effect.                                                      */
  CRC_CR_INCOMP_Enable                 = 1,     /*!< Enable : 1's complement of input data                                     */
} CRC_CR_INCOMP_Enum;

/* ==================================================  CRC CR MODS [7..7]  =================================================== */
typedef enum {                                  /*!< CRC_CR_MODS                                                               */
  CRC_CR_MODS_UserMode                 = 0,     /*!< UserMode : User Mode (Calculate every data written to the CRC_IN
                                                     register)                                                                 */
  CRC_CR_MODS_AutoMode                 = 1,     /*!< AutoMode : Auto Mode (Calculate till CRC_SADR == CRC_EADR)                */
} CRC_CR_MODS_Enum;

/* =================================================  CRC CR RLTCLR [6..6]  ================================================== */
typedef enum {                                  /*!< CRC_CR_RLTCLR                                                             */
  CRC_CR_RLTCLR_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  CRC_CR_RLTCLR_Init                   = 1,     /*!< Init : Initialize the CRC_RLT register with the value of CRC_INIT.
                                                     (This bit is automatically cleared to '0' after operation.)               */
} CRC_CR_RLTCLR_Enum;

/* ==================================================  CRC CR MDSEL [5..5]  ================================================== */
typedef enum {                                  /*!< CRC_CR_MDSEL                                                              */
  CRC_CR_MDSEL_CRC                     = 0,     /*!< CRC : Select CRC.                                                         */
  CRC_CR_MDSEL_Checksum                = 1,     /*!< Checksum : Select Checksum.                                               */
} CRC_CR_MDSEL_Enum;

/* ==================================================  CRC CR POLYS [3..4]  ================================================== */
typedef enum {                                  /*!< CRC_CR_POLYS                                                              */
  CRC_CR_POLYS_CRC16_CCITT             = 0,     /*!< CRC16_CCITT : CRC16-CCITT (G1(x) = x16 + x12 + x5 + 1)                    */
  CRC_CR_POLYS_CRC16                   = 1,     /*!< CRC16 : CRC16 (G2(x) = x16 + x15 + x2 + 1)                                */
  CRC_CR_POLYS_CRC8                    = 2,     /*!< CRC8 : CRC8 (G3(x) = x8 + x2 + x + 1)                                     */
  CRC_CR_POLYS_CRC32                   = 3,     /*!< CRC32 : CRC32 (G4(x) = x32 + x26 + x23 + x22 + x16 + x12 + x11
                                                     + x10 +x8 + x7 + x5 + x4 + x2 + x + 1)                                    */
} CRC_CR_POLYS_Enum;

/* =================================================  CRC CR SARINC [2..2]  ================================================== */
typedef enum {                                  /*!< CRC_CR_SARINC                                                             */
  CRC_CR_SARINC_Disable                = 0,     /*!< Disable : No effect.                                                      */
  CRC_CR_SARINC_Enable                 = 1,     /*!< Enable : The CRC/Checksum start address register is incremented
                                                     as the selected input size every writing to the CRC_IN
                                                     register.                                                                 */
} CRC_CR_SARINC_Enum;

/* =================================================  CRC CR FIRSTBS [1..1]  ================================================= */
typedef enum {                                  /*!< CRC_CR_FIRSTBS                                                            */
  CRC_CR_FIRSTBS_msbFirst              = 0,     /*!< msbFirst : msb first                                                      */
  CRC_CR_FIRSTBS_lsbFirst              = 1,     /*!< lsbFirst : lsb first                                                      */
} CRC_CR_FIRSTBS_Enum;

/* =================================================  CRC CR CRCRUN [0..0]  ================================================== */
typedef enum {                                  /*!< CRC_CR_CRCRUN                                                             */
  CRC_CR_CRCRUN_Stop                   = 0,     /*!< Stop : Not busy. The CRC operation can be finished by writing
                                                     '0' to this bit while running.                                            */
  CRC_CR_CRCRUN_Start                  = 1,     /*!< Start : Start CRC operation. This bit is automatically cleared
                                                     to '0' when the value of CRC_SADR register reaches the
                                                     value of CRC_EADR register.                                               */
} CRC_CR_CRCRUN_Enum;

/* ==========================================================  IN  =========================================================== */
/* ==========================================================  RLT  ========================================================== */
/* =========================================================  INIT  ========================================================== */
/* =========================================================  SADR  ========================================================== */
/* =========================================================  EADR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMACn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMACn CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMACn_CR_ERFGSTP                                                          */
  DMACn_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMACn_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMACn_CR_ERFGSTP_Enum;

/* ================================================  DMACn CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMACn_CR_PERSEL                                                           */
  DMACn_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMACn_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMACn_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMACn_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMACn_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMACn_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMACn_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMACn_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMACn_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMACn_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMACn_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMACn_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMACn_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMACn_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMACn_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMACn_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMACn_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMACn_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMACn_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMACn_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMACn_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMACn_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMACn_CR_PERSEL_Enum;

/* =================================================  DMACn CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMACn_CR_SIZE                                                             */
  DMACn_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMACn_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMACn_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMACn_CR_SIZE_Enum;

/* ==================================================  DMACn CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMACn_CR_DIR                                                              */
  DMACn_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMACn_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMACn_CR_DIR_Enum;

/* =================================================  DMACn CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMACn_CR_CHnEN                                                            */
  DMACn_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMACn_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMACn_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMACn IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMACn_IESR_TRERIENn                                                       */
  DMACn_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMACn_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMACn_IESR_TRERIENn_Enum;

/* ===============================================  DMACn IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMACn_IESR_TRCIENn                                                        */
  DMACn_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMACn_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMACn_IESR_TRCIENn_Enum;

/* ==============================================  DMACn IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMACn_IESR_TRERIFGn                                                       */
  DMACn_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMACn_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMACn_IESR_TRERIFGn_Enum;

/* ===============================================  DMACn IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMACn_IESR_TRCIFGn                                                        */
  DMACn_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMACn_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMACn_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMAC0 CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMAC0_CR_ERFGSTP                                                          */
  DMAC0_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMAC0_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMAC0_CR_ERFGSTP_Enum;

/* ================================================  DMAC0 CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMAC0_CR_PERSEL                                                           */
  DMAC0_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMAC0_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMAC0_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMAC0_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMAC0_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMAC0_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMAC0_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMAC0_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMAC0_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMAC0_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMAC0_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMAC0_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMAC0_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMAC0_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMAC0_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMAC0_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMAC0_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMAC0_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMAC0_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMAC0_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMAC0_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMAC0_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMAC0_CR_PERSEL_Enum;

/* =================================================  DMAC0 CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMAC0_CR_SIZE                                                             */
  DMAC0_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMAC0_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMAC0_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMAC0_CR_SIZE_Enum;

/* ==================================================  DMAC0 CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMAC0_CR_DIR                                                              */
  DMAC0_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMAC0_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMAC0_CR_DIR_Enum;

/* =================================================  DMAC0 CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMAC0_CR_CHnEN                                                            */
  DMAC0_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMAC0_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMAC0_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMAC0 IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMAC0_IESR_TRERIENn                                                       */
  DMAC0_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMAC0_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMAC0_IESR_TRERIENn_Enum;

/* ===============================================  DMAC0 IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMAC0_IESR_TRCIENn                                                        */
  DMAC0_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMAC0_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMAC0_IESR_TRCIENn_Enum;

/* ==============================================  DMAC0 IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMAC0_IESR_TRERIFGn                                                       */
  DMAC0_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC0_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMAC0_IESR_TRERIFGn_Enum;

/* ===============================================  DMAC0 IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMAC0_IESR_TRCIFGn                                                        */
  DMAC0_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC0_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMAC0_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMAC1 CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMAC1_CR_ERFGSTP                                                          */
  DMAC1_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMAC1_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMAC1_CR_ERFGSTP_Enum;

/* ================================================  DMAC1 CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMAC1_CR_PERSEL                                                           */
  DMAC1_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMAC1_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMAC1_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMAC1_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMAC1_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMAC1_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMAC1_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMAC1_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMAC1_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMAC1_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMAC1_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMAC1_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMAC1_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMAC1_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMAC1_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMAC1_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMAC1_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMAC1_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMAC1_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMAC1_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMAC1_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMAC1_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMAC1_CR_PERSEL_Enum;

/* =================================================  DMAC1 CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMAC1_CR_SIZE                                                             */
  DMAC1_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMAC1_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMAC1_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMAC1_CR_SIZE_Enum;

/* ==================================================  DMAC1 CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMAC1_CR_DIR                                                              */
  DMAC1_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMAC1_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMAC1_CR_DIR_Enum;

/* =================================================  DMAC1 CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMAC1_CR_CHnEN                                                            */
  DMAC1_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMAC1_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMAC1_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMAC1 IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMAC1_IESR_TRERIENn                                                       */
  DMAC1_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMAC1_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMAC1_IESR_TRERIENn_Enum;

/* ===============================================  DMAC1 IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMAC1_IESR_TRCIENn                                                        */
  DMAC1_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMAC1_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMAC1_IESR_TRCIENn_Enum;

/* ==============================================  DMAC1 IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMAC1_IESR_TRERIFGn                                                       */
  DMAC1_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC1_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMAC1_IESR_TRERIFGn_Enum;

/* ===============================================  DMAC1 IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMAC1_IESR_TRCIFGn                                                        */
  DMAC1_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC1_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMAC1_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC2                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMAC2 CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMAC2_CR_ERFGSTP                                                          */
  DMAC2_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMAC2_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMAC2_CR_ERFGSTP_Enum;

/* ================================================  DMAC2 CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMAC2_CR_PERSEL                                                           */
  DMAC2_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMAC2_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMAC2_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMAC2_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMAC2_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMAC2_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMAC2_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMAC2_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMAC2_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMAC2_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMAC2_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMAC2_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMAC2_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMAC2_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMAC2_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMAC2_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMAC2_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMAC2_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMAC2_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMAC2_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMAC2_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMAC2_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMAC2_CR_PERSEL_Enum;

/* =================================================  DMAC2 CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMAC2_CR_SIZE                                                             */
  DMAC2_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMAC2_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMAC2_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMAC2_CR_SIZE_Enum;

/* ==================================================  DMAC2 CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMAC2_CR_DIR                                                              */
  DMAC2_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMAC2_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMAC2_CR_DIR_Enum;

/* =================================================  DMAC2 CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMAC2_CR_CHnEN                                                            */
  DMAC2_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMAC2_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMAC2_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMAC2 IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMAC2_IESR_TRERIENn                                                       */
  DMAC2_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMAC2_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMAC2_IESR_TRERIENn_Enum;

/* ===============================================  DMAC2 IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMAC2_IESR_TRCIENn                                                        */
  DMAC2_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMAC2_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMAC2_IESR_TRCIENn_Enum;

/* ==============================================  DMAC2 IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMAC2_IESR_TRERIFGn                                                       */
  DMAC2_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC2_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMAC2_IESR_TRERIFGn_Enum;

/* ===============================================  DMAC2 IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMAC2_IESR_TRCIFGn                                                        */
  DMAC2_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC2_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMAC2_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC3                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMAC3 CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMAC3_CR_ERFGSTP                                                          */
  DMAC3_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMAC3_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMAC3_CR_ERFGSTP_Enum;

/* ================================================  DMAC3 CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMAC3_CR_PERSEL                                                           */
  DMAC3_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMAC3_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMAC3_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMAC3_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMAC3_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMAC3_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMAC3_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMAC3_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMAC3_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMAC3_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMAC3_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMAC3_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMAC3_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMAC3_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMAC3_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMAC3_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMAC3_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMAC3_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMAC3_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMAC3_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMAC3_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMAC3_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMAC3_CR_PERSEL_Enum;

/* =================================================  DMAC3 CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMAC3_CR_SIZE                                                             */
  DMAC3_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMAC3_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMAC3_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMAC3_CR_SIZE_Enum;

/* ==================================================  DMAC3 CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMAC3_CR_DIR                                                              */
  DMAC3_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMAC3_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMAC3_CR_DIR_Enum;

/* =================================================  DMAC3 CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMAC3_CR_CHnEN                                                            */
  DMAC3_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMAC3_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMAC3_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMAC3 IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMAC3_IESR_TRERIENn                                                       */
  DMAC3_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMAC3_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMAC3_IESR_TRERIENn_Enum;

/* ===============================================  DMAC3 IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMAC3_IESR_TRCIENn                                                        */
  DMAC3_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMAC3_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMAC3_IESR_TRCIENn_Enum;

/* ==============================================  DMAC3 IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMAC3_IESR_TRERIFGn                                                       */
  DMAC3_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC3_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMAC3_IESR_TRERIFGn_Enum;

/* ===============================================  DMAC3 IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMAC3_IESR_TRCIFGn                                                        */
  DMAC3_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC3_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMAC3_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC4                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  DMAC4 CR ERFGSTP [15..15]  =============================================== */
typedef enum {                                  /*!< DMAC4_CR_ERFGSTP                                                          */
  DMAC4_CR_ERFGSTP_Disable             = 0,     /*!< Disable : Disable DMA stop function by an error of peripheral.            */
  DMAC4_CR_ERFGSTP_Enable              = 1,     /*!< Enable : Enable DMA stop function by an error of peripheral.              */
} DMAC4_CR_ERFGSTP_Enum;

/* ================================================  DMAC4 CR PERSEL [8..12]  ================================================ */
typedef enum {                                  /*!< DMAC4_CR_PERSEL                                                           */
  DMAC4_CR_PERSEL_Idle                 = 0,     /*!< Idle : Channel idle                                                       */
  DMAC4_CR_PERSEL_ADC                  = 1,     /*!< ADC : ADC Output                                                          */
  DMAC4_CR_PERSEL_SPI0Rx               = 2,     /*!< SPI0Rx : SPI0 Rx                                                          */
  DMAC4_CR_PERSEL_SPI0Tx               = 3,     /*!< SPI0Tx : SPI0 Tx                                                          */
  DMAC4_CR_PERSEL_SPI1Rx               = 4,     /*!< SPI1Rx : SPI1 Rx                                                          */
  DMAC4_CR_PERSEL_SPI1Tx               = 5,     /*!< SPI1Tx : SPI1 Tx                                                          */
  DMAC4_CR_PERSEL_USART10Rx            = 6,     /*!< USART10Rx : USART10 Rx                                                    */
  DMAC4_CR_PERSEL_USART10Tx            = 7,     /*!< USART10Tx : USART10 Tx                                                    */
  DMAC4_CR_PERSEL_I2C0Rx               = 8,     /*!< I2C0Rx : I2C0 Rx                                                          */
  DMAC4_CR_PERSEL_I2C0Tx               = 9,     /*!< I2C0Tx : I2C0 Tx                                                          */
  DMAC4_CR_PERSEL_I2C1Rx               = 10,    /*!< I2C1Rx : I2C1 Rx                                                          */
  DMAC4_CR_PERSEL_I2C1Tx               = 11,    /*!< I2C1Tx : I2C1 Tx                                                          */
  DMAC4_CR_PERSEL_UART0Rx              = 12,    /*!< UART0Rx : UART0 Rx                                                        */
  DMAC4_CR_PERSEL_UART0Tx              = 13,    /*!< UART0Tx : UART0 Tx                                                        */
  DMAC4_CR_PERSEL_UART1Rx              = 14,    /*!< UART1Rx : UART1 Rx                                                        */
  DMAC4_CR_PERSEL_UART1Tx              = 15,    /*!< UART1Tx : UART1 Tx                                                        */
  DMAC4_CR_PERSEL_LPUARTRx             = 16,    /*!< LPUARTRx : LPUART Rx                                                      */
  DMAC4_CR_PERSEL_LPUARTTx             = 17,    /*!< LPUARTTx : LPUART Tx                                                      */
  DMAC4_CR_PERSEL_SC0Rx                = 18,    /*!< SC0Rx : SC0 Rx                                                            */
  DMAC4_CR_PERSEL_SC0Tx                = 19,    /*!< SC0Tx : SC0 Tx                                                            */
  DMAC4_CR_PERSEL_SC1Rx                = 20,    /*!< SC1Rx : SC1 Rx                                                            */
  DMAC4_CR_PERSEL_SC1Tx                = 21,    /*!< SC1Tx : SC1 Tx                                                            */
} DMAC4_CR_PERSEL_Enum;

/* =================================================  DMAC4 CR SIZE [2..3]  ================================================== */
typedef enum {                                  /*!< DMAC4_CR_SIZE                                                             */
  DMAC4_CR_SIZE_8bit                   = 0,     /*!< 8bit : 8 bits                                                             */
  DMAC4_CR_SIZE_16bit                  = 1,     /*!< 16bit : 16 bits                                                           */
  DMAC4_CR_SIZE_32bit                  = 2,     /*!< 32bit : 32 bits                                                           */
} DMAC4_CR_SIZE_Enum;

/* ==================================================  DMAC4 CR DIR [1..1]  ================================================== */
typedef enum {                                  /*!< DMAC4_CR_DIR                                                              */
  DMAC4_CR_DIR_MemToPeri               = 0,     /*!< MemToPeri : Transfer is from memory to peripheral.                        */
  DMAC4_CR_DIR_PeriToMem               = 1,     /*!< PeriToMem : Transfer is from peripheral to memory.                        */
} DMAC4_CR_DIR_Enum;

/* =================================================  DMAC4 CR CHnEN [0..0]  ================================================= */
typedef enum {                                  /*!< DMAC4_CR_CHnEN                                                            */
  DMAC4_CR_CHnEN_Disable               = 0,     /*!< Disable : Disable channel n.                                              */
  DMAC4_CR_CHnEN_Enable                = 1,     /*!< Enable : Enable channel n.                                                */
} DMAC4_CR_CHnEN_Enum;

/* =========================================================  IESR  ========================================================== */
/* ==============================================  DMAC4 IESR TRERIENn [5..5]  =============================================== */
typedef enum {                                  /*!< DMAC4_IESR_TRERIENn                                                       */
  DMAC4_IESR_TRERIENn_Disable          = 0,     /*!< Disable : Disable transfer error interrupt.                               */
  DMAC4_IESR_TRERIENn_Enable           = 1,     /*!< Enable : Enable transfer error interrupt.                                 */
} DMAC4_IESR_TRERIENn_Enum;

/* ===============================================  DMAC4 IESR TRCIENn [4..4]  =============================================== */
typedef enum {                                  /*!< DMAC4_IESR_TRCIENn                                                        */
  DMAC4_IESR_TRCIENn_Disable           = 0,     /*!< Disable : Disable transfer complete interrupt.                            */
  DMAC4_IESR_TRCIENn_Enable            = 1,     /*!< Enable : Enable transfer complete interrupt.                              */
} DMAC4_IESR_TRCIENn_Enum;

/* ==============================================  DMAC4 IESR TRERIFGn [1..1]  =============================================== */
typedef enum {                                  /*!< DMAC4_IESR_TRERIFGn                                                       */
  DMAC4_IESR_TRERIFGn_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC4_IESR_TRERIFGn_Request          = 1,     /*!< Request : Request occurred.                                               */
} DMAC4_IESR_TRERIFGn_Enum;

/* ===============================================  DMAC4 IESR TRCIFGn [0..0]  =============================================== */
typedef enum {                                  /*!< DMAC4_IESR_TRCIFGn                                                        */
  DMAC4_IESR_TRCIFGn_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  DMAC4_IESR_TRCIFGn_Request           = 1,     /*!< Request : Request occurred.                                               */
} DMAC4_IESR_TRCIFGn_Enum;

/* ==========================================================  PAR  ========================================================== */
/* ==========================================================  MAR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  TRIM00  ========================================================= */
/* ========================================================  TRIM01  ========================================================= */
/* ========================================================  TRIM02  ========================================================= */
/* ========================================================  TRIM03  ========================================================= */
/* ========================================================  TRIM04  ========================================================= */
/* ========================================================  TRIM05  ========================================================= */
/* ========================================================  TRIM06  ========================================================= */
/* ========================================================  TRIM07  ========================================================= */
/* ========================================================  TRIM08  ========================================================= */
/* ========================================================  TRIM09  ========================================================= */
/* ========================================================  TRIM10  ========================================================= */
/* ========================================================  TRIM11  ========================================================= */
/* ========================================================  TRIM12  ========================================================= */
/* ========================================================  TRIM13  ========================================================= */
/* ========================================================  TRIM14  ========================================================= */
/* ========================================================  TRIM15  ========================================================= */
/* ========================================================  TRIM16  ========================================================= */
/* ========================================================  TRIM17  ========================================================= */
/* ========================================================  TRIM18  ========================================================= */
/* ========================================================  TRIM19  ========================================================= */
/* =====================================================  CONF_MF1CNFIG  ===================================================== */
/* =====================================================  CONF_MF2CNFIG  ===================================================== */
/* =====================================================  CONF_MF3CNFIG  ===================================================== */
/* =====================================================  CONF_MF4CNFIG  ===================================================== */
/* ========================================================  TRIM24  ========================================================= */
/* ========================================================  TRIM25  ========================================================= */
/* ========================================================  TRIM26  ========================================================= */
/* ========================================================  TRIM27  ========================================================= */
/* ========================================================  TRIM28  ========================================================= */
/* ========================================================  TRIM29  ========================================================= */
/* ========================================================  TRIM30  ========================================================= */
/* ========================================================  TRIM31  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RPCNFIG  ======================================================== */
/* ==============================================  COA1 RPCNFIG WTIDKY [4..31]  ============================================== */
typedef enum {                                  /*!< COA1_RPCNFIG_WTIDKY                                                       */
  COA1_RPCNFIG_WTIDKY_Value            = 110922279,/*!< Value : Key Value (0x69c8a27)                                          */
} COA1_RPCNFIG_WTIDKY_Enum;

/* ===============================================  COA1 RPCNFIG READP [0..1]  =============================================== */
typedef enum {                                  /*!< COA1_RPCNFIG_READP                                                        */
  COA1_RPCNFIG_READP_Level0            = 3,     /*!< Level0 : No restriction for read/erase/write.                             */
  COA1_RPCNFIG_READP_Level1            = 2,     /*!< Level1 : 1. Not readable/erasable/writable by 'Debug' 2. Bulk
                                                     erasable only by 'Debug' 3. Readable/erasable/writable
                                                     by 'Instruction from Flash Memory and RAM'                                */
  COA1_RPCNFIG_READP_Level2            = 0,     /*!< Level2 : 1. Not readable/erasable/writable by 'Debug' / 'Instruction
                                                     from RAM' 2. Bulk erasable only by 'Instruction from RAM'
                                                     / 'Debug' 3. Readable/erasable/writable by 'Instruction
                                                     from Flash Memory'                                                        */
} COA1_RPCNFIG_READP_Enum;

/* =======================================================  WDTCNFIG  ======================================================== */
/* ==============================================  COA1 WDTCNFIG WRCMF [4..15]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WRCMF                                                       */
  COA1_WDTCNFIG_WRCMF_BySW             = 2413,  /*!< BySW : By S/W (CLKSRCR Register) (0x96d)                                  */
  COA1_WDTCNFIG_WRCMF_AlwaysEnableExceptDeepSleep = 679,/*!< AlwaysEnableExceptDeepSleep : Always Enable Except for Deep
                                                     Sleep (0x2a7)                                                             */
  COA1_WDTCNFIG_WRCMF_AlwaysEnable     = 4095,  /*!< AlwaysEnable : Always Enable                                              */
} COA1_WDTCNFIG_WRCMF_Enum;

/* ==============================================  COA1 WDTCNFIG WCLKMF [2..2]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WCLKMF                                                      */
  COA1_WDTCNFIG_WCLKMF_BySW            = 0,     /*!< BySW : By S/W (PPCLKSR Register)                                          */
  COA1_WDTCNFIG_WCLKMF_AlwaysWDTRC     = 1,     /*!< AlwaysWDTRC : Always WDTRC                                                */
} COA1_WDTCNFIG_WCLKMF_Enum;

/* ==============================================  COA1 WDTCNFIG WRSTMF [1..1]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WRSTMF                                                      */
  COA1_WDTCNFIG_WRSTMF_AlwaysEnable    = 0,     /*!< AlwaysEnable : Always Enable                                              */
  COA1_WDTCNFIG_WRSTMF_BySW            = 1,     /*!< BySW : By S/W (WDTCR Register)                                            */
} COA1_WDTCNFIG_WRSTMF_Enum;

/* ==============================================  COA1 WDTCNFIG WCNTMF [0..0]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WCNTMF                                                      */
  COA1_WDTCNFIG_WCNTMF_AlwaysEnable    = 0,     /*!< AlwaysEnable : Always Enable                                              */
  COA1_WDTCNFIG_WCNTMF_BySW            = 1,     /*!< BySW : By S/W (WDTCR Register)                                            */
} COA1_WDTCNFIG_WCNTMF_Enum;

/* =======================================================  LVRCNFIG  ======================================================== */
/* =============================================  COA1 LVRCNFIG LVRENM [8..15]  ============================================== */
typedef enum {                                  /*!< COA1_LVRCNFIG_LVRENM                                                      */
  COA1_LVRCNFIG_LVRENM_BySW            = 170,   /*!< BySW : By S/W (LVRCR Register) (0xaa)                                     */
  COA1_LVRCNFIG_LVRENM_AlwaysEnable    = 255,   /*!< AlwaysEnable : Always Enable (0xff)                                       */
} COA1_LVRCNFIG_LVRENM_Enum;

/* ==============================================  COA1 LVRCNFIG LVRVS [0..2]  =============================================== */
typedef enum {                                  /*!< COA1_LVRCNFIG_LVRVS                                                       */
  COA1_LVRCNFIG_LVRVS_1p50V            = 7,     /*!< 1p50V : 1.50V                                                             */
  COA1_LVRCNFIG_LVRVS_1p75V            = 6,     /*!< 1p75V : 1.75V                                                             */
  COA1_LVRCNFIG_LVRVS_1p90V            = 5,     /*!< 1p90V : 1.90V                                                             */
  COA1_LVRCNFIG_LVRVS_2p05V            = 4,     /*!< 2p05V : 2.05V                                                             */
  COA1_LVRCNFIG_LVRVS_2p20V            = 3,     /*!< 2p20V : 2.20V                                                             */
  COA1_LVRCNFIG_LVRVS_2p35V            = 2,     /*!< 2p35V : 2.35V                                                             */
  COA1_LVRCNFIG_LVRVS_2p50V            = 1,     /*!< 2p50V : 2.50V                                                             */
  COA1_LVRCNFIG_LVRVS_2p65V            = 0,     /*!< 2p65V : 2.65V                                                             */
} COA1_LVRCNFIG_LVRVS_Enum;

/* =======================================================  CNFIGWTP1  ======================================================= */
/* ==============================================  COA1 CNFIGWTP1 CP3WP [2..2]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP3WP                                                      */
  COA1_CNFIGWTP1_CP3WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP3WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP3WP_Enum;

/* ==============================================  COA1 CNFIGWTP1 CP2WP [1..1]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP2WP                                                      */
  COA1_CNFIGWTP1_CP2WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP2WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP2WP_Enum;

/* ==============================================  COA1 CNFIGWTP1 CP1WP [0..0]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP1WP                                                      */
  COA1_CNFIGWTP1_CP1WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP1WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP1WP_Enum;

/* ========================================================  FMWTP1  ========================================================= */
/* ==============================================  COA1 FMWTP1 SWTP31 [31..31]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP31                                                        */
  COA1_FMWTP1_SWTP31_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP31_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP31_Enum;

/* ==============================================  COA1 FMWTP1 SWTP30 [30..30]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP30                                                        */
  COA1_FMWTP1_SWTP30_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP30_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP30_Enum;

/* ==============================================  COA1 FMWTP1 SWTP29 [29..29]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP29                                                        */
  COA1_FMWTP1_SWTP29_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP29_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP29_Enum;

/* ==============================================  COA1 FMWTP1 SWTP28 [28..28]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP28                                                        */
  COA1_FMWTP1_SWTP28_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP28_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP28_Enum;

/* ==============================================  COA1 FMWTP1 SWTP27 [27..27]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP27                                                        */
  COA1_FMWTP1_SWTP27_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP27_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP27_Enum;

/* ==============================================  COA1 FMWTP1 SWTP26 [26..26]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP26                                                        */
  COA1_FMWTP1_SWTP26_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP26_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP26_Enum;

/* ==============================================  COA1 FMWTP1 SWTP25 [25..25]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP25                                                        */
  COA1_FMWTP1_SWTP25_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP25_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP25_Enum;

/* ==============================================  COA1 FMWTP1 SWTP24 [24..24]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP24                                                        */
  COA1_FMWTP1_SWTP24_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP24_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP24_Enum;

/* ==============================================  COA1 FMWTP1 SWTP23 [23..23]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP23                                                        */
  COA1_FMWTP1_SWTP23_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP23_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP23_Enum;

/* ==============================================  COA1 FMWTP1 SWTP22 [22..22]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP22                                                        */
  COA1_FMWTP1_SWTP22_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP22_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP22_Enum;

/* ==============================================  COA1 FMWTP1 SWTP21 [21..21]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP21                                                        */
  COA1_FMWTP1_SWTP21_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP21_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP21_Enum;

/* ==============================================  COA1 FMWTP1 SWTP20 [20..20]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP20                                                        */
  COA1_FMWTP1_SWTP20_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP20_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP20_Enum;

/* ==============================================  COA1 FMWTP1 SWTP19 [19..19]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP19                                                        */
  COA1_FMWTP1_SWTP19_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP19_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP19_Enum;

/* ==============================================  COA1 FMWTP1 SWTP18 [18..18]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP18                                                        */
  COA1_FMWTP1_SWTP18_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP18_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP18_Enum;

/* ==============================================  COA1 FMWTP1 SWTP17 [17..17]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP17                                                        */
  COA1_FMWTP1_SWTP17_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP17_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP17_Enum;

/* ==============================================  COA1 FMWTP1 SWTP16 [16..16]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP16                                                        */
  COA1_FMWTP1_SWTP16_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP16_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP16_Enum;

/* ==============================================  COA1 FMWTP1 SWTP15 [15..15]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP15                                                        */
  COA1_FMWTP1_SWTP15_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP15_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP15_Enum;

/* ==============================================  COA1 FMWTP1 SWTP14 [14..14]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP14                                                        */
  COA1_FMWTP1_SWTP14_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP14_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP14_Enum;

/* ==============================================  COA1 FMWTP1 SWTP13 [13..13]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP13                                                        */
  COA1_FMWTP1_SWTP13_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP13_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP13_Enum;

/* ==============================================  COA1 FMWTP1 SWTP12 [12..12]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP12                                                        */
  COA1_FMWTP1_SWTP12_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP12_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP12_Enum;

/* ==============================================  COA1 FMWTP1 SWTP11 [11..11]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP11                                                        */
  COA1_FMWTP1_SWTP11_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP11_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP11_Enum;

/* ==============================================  COA1 FMWTP1 SWTP10 [10..10]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP10                                                        */
  COA1_FMWTP1_SWTP10_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP10_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP10_Enum;

/* ===============================================  COA1 FMWTP1 SWTP9 [9..9]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP9                                                         */
  COA1_FMWTP1_SWTP9_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP9_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP9_Enum;

/* ===============================================  COA1 FMWTP1 SWTP8 [8..8]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP8                                                         */
  COA1_FMWTP1_SWTP8_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP8_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP8_Enum;

/* ===============================================  COA1 FMWTP1 SWTP7 [7..7]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP7                                                         */
  COA1_FMWTP1_SWTP7_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP7_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP7_Enum;

/* ===============================================  COA1 FMWTP1 SWTP6 [6..6]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP6                                                         */
  COA1_FMWTP1_SWTP6_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP6_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP6_Enum;

/* ===============================================  COA1 FMWTP1 SWTP5 [5..5]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP5                                                         */
  COA1_FMWTP1_SWTP5_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP5_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP5_Enum;

/* ===============================================  COA1 FMWTP1 SWTP4 [4..4]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP4                                                         */
  COA1_FMWTP1_SWTP4_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP4_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP4_Enum;

/* ===============================================  COA1 FMWTP1 SWTP3 [3..3]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP3                                                         */
  COA1_FMWTP1_SWTP3_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP3_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP3_Enum;

/* ===============================================  COA1 FMWTP1 SWTP2 [2..2]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP2                                                         */
  COA1_FMWTP1_SWTP2_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP2_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP2_Enum;

/* ===============================================  COA1 FMWTP1 SWTP1 [1..1]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP1                                                         */
  COA1_FMWTP1_SWTP1_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP1_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP1_Enum;

/* ===============================================  COA1 FMWTP1 SWTP0 [0..0]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP0                                                         */
  COA1_FMWTP1_SWTP0_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP0_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP0_Enum;



/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* A31L12X_H */


/** @} */ /* End of group A31L12x */

/** @} */ /* End of group VENDOR ABOV Semiconductor Co., Ltd. */
